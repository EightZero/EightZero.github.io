<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/15/k8s%E5%92%8Cp2p/"/>
    <url>/2021/12/15/k8s%E5%92%8Cp2p/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/14/kubespary%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/"/>
    <url>/2021/12/14/kubespary%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="kubespary安装部署集群"><a href="#kubespary安装部署集群" class="headerlink" title="kubespary安装部署集群"></a>kubespary安装部署集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull quay.io/kubespray/kubespray:v2.17.1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --rm -it --mount type=bind,source=&quot;$(pwd)&quot;/inventory/sample,dst=/inventory \<br>  --mount type=bind,source=&quot;$&#123;HOME&#125;&quot;/.ssh/id_rsa,dst=/root/.ssh/id_rsa \<br>  quay.io/kubespray/kubespray:v2.17.1 bash<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/kubernetes-sigs/kubespray.git<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd kubespray<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --rm -it --net=host -v $PWD/inventory/mycluster:/inventory -v $&#123;HOME&#125;/.ssh/id_rsa:/root/.ssh/id_rsa quay.io/kubespray/kubespray:v2.17.1 bash<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> apt-get update</span><br><span class="hljs-meta">$</span><span class="bash"> apt-get install vim</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cp -r inventory/sample inventory/mycluster</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">declare</span> -a IPS=(192.168.92.136 192.168.92.138)</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">CONFIG_FILE=inventory/mycluster/hosts.yml python3 contrib/inventory_builder/inventory.py $&#123;IPS[@]&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ansible-playbook -i inventory<span class="hljs-regexp">/mycluster/</span>hosts.yml cluster.yml -b -v \<br>  --<span class="hljs-keyword">private</span>-key=~<span class="hljs-regexp">/.ssh/</span>private_key --become-user=root <br></code></pre></td></tr></table></figure><p>vim /etc/docker/daemon.json</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://mxgdxrlr.mirror.aliyuncs.com&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">all:</span><br><span class="hljs-symbol">  hosts:</span><br><span class="hljs-symbol">    biz_master:</span><br><span class="hljs-symbol">      ansible_host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.92</span><span class="hljs-number">.138</span><br><span class="hljs-symbol">      ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.92</span><span class="hljs-number">.138</span><br><span class="hljs-symbol">      access_ip:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.92</span><span class="hljs-number">.138</span><br><span class="hljs-symbol">  children:</span><br><span class="hljs-symbol">    kube_control_plane:</span><br><span class="hljs-symbol">      hosts:</span><br><span class="hljs-symbol">        biz_master:</span><br><span class="hljs-symbol">    kube_node:</span><br><span class="hljs-symbol">      hosts:</span><br><span class="hljs-symbol">        biz_master:</span><br><span class="hljs-symbol">    etcd:</span><br><span class="hljs-symbol">      hosts:</span><br><span class="hljs-symbol">        biz_master:</span><br><span class="hljs-symbol">    k8s_cluster:</span><br><span class="hljs-symbol">      children:</span><br><span class="hljs-symbol">        kube_control_plane:</span><br><span class="hljs-symbol">        kube_node:</span><br><span class="hljs-symbol">    calico_rr:</span><br><span class="hljs-symbol">      hosts:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>添加/删除节点</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/13/k8s%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    <url>/2021/12/13/k8s%E7%A8%B3%E5%AE%9A%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="动态调整容器资源"><a href="#动态调整容器资源" class="headerlink" title="动态调整容器资源"></a>动态调整容器资源</h1><p>应用容器资源竞争</p><p>解决方式：</p><p>预防阶段：全链路的压力测试，提前通过科学的手段预判应用需要的副本数和资源量。如果没法准确预算资源，就只能采用冗余分配资源的方式</p><p>生产阶段：大规模访问流量抵达后，对不紧要的业务做服务降级并同时对主要应用进行临时扩容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/03/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7%E7%BF%BB%E8%AF%91/"/>
    <url>/2021/12/03/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7%E7%BF%BB%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="【译】一种云容器服务的多租户框架"><a href="#【译】一种云容器服务的多租户框架" class="headerlink" title="【译】一种云容器服务的多租户框架"></a>【译】一种云容器服务的多租户框架</h1><p><strong>摘要：</strong>容器技术在云原生时代发展迅速，Kubernetes作为一个生产级别的容器编排平台，已被证明在管理本地数据中心中的容器化应用程序方面是成功的。然而，kubernetes在设计上缺乏足够的多租户支持，这意味在云环境中，需要专用的集群来服务于多个租户。这一限制大大降低了云计算的好处，并使得kubernetes构建多租户软件即服务（SaaS）产品变得困难。在本文中，我们提出了虚拟集群的一个新的多租户框架，扩展了足够多的多租户支持。基本上虚拟集群提供了控制平面和数据平面隔离。同时在租户之间共享底层计算资源。新的框架通过避免修改kubernetes的核心组件，从而保持了API的兼容性。因此，它可以很容易与现有的kubernetes集成。我们的实验结果表明，虚拟集群引入的开销，在延迟和吞吐量方面是适度的</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>多租户是云计算提高资源效率的基本属性之一，在典型的多租户用例中，计算资源通常是抽象的，因此租户不需要知道共享物理基础设施的详细信息，此外，租户不应该知道其他租户的存在，因为他们是不值得信赖的。但，kubernetes在多租户这块不太令人满意。首先，要正确使用kubernetes，租户必须了解节点资源的详细信息，如拓扑结构，容量和利用率。更重要的是，kubernetes缺乏强大的隔离机制，在kubernetes中，对象是集群范围（Cluster Scoped），或者命名空间（Namespace Scoped）范围。命名空间范围的Pod对象是最受欢迎的，它封装了容器并描述他们的资源规范。目前，为了支持kubernetes中的多个租户，集群管理员必须使用命名空间(Namespace)来分组所有租户的资源，并应用基于角色的访问控制（RBAC）来限制租户的访问。kubernetes还支持网络策略和Pod安全策略，以保护租户容器。上述技术是必要的，但是仍然不满足多租户的生产要求。</p><p>kubernetes控制平面由一个apiserver和一组内置控制器（controllers）组成，如图1所示，允许多个租户共享一个apiserver至少会导致以下问题：</p><ul><li><strong>性能干扰</strong>：当多租户同时向apiserver发送请求时，可能会出现优先级反转（高优先级进程因为所需资源被低优先级进程占用而被阻塞），进程一直无法获得运行所需的必要资源（starvation）等性能异常。在最坏的情况下，一个漏洞或者压倒性的租户（如图1中的租户a）可以通过对大量资源的查询来排挤其他租户。例如：租户可能会经常查询其命名空间中的所有pod，这使得来自其他租户的请求大大延迟</li><li><strong>缺少API支持</strong>：虽然使用RBAC可以阻止租户访问其他租户的对象。但如果没有适当的API支持就无法保护某些信息。例如：命名空间（Namespace）是集群范围（Cluster Scoped）的对象，而Namespace List API不能根据租户身份筛选结果。一旦租户被允许列出Namespace以找出他们自己的Namespace，他们就可以看到集群中所有的Namespace，这可能会有问题，因为Namespace可能包含敏感信息</li><li><strong>管理不便</strong>：为了避免影响其他租户，租户通常对操作集群范围内的资源有严格的限制。因此，租户不能自由地创建Namespace，ClusterRole，或者安装CRD，webhook。要解决这些限制，租户必须与集群管理员进行严格的协商</li></ul><p><img src="https://gitee.com/eightzero/pico/raw/master/202112031446818.png" alt="图1"></p><p>​                                                                                            图1</p><p>Kubernetes数据平面也不完全支持多租户。它的服务发现机制假设了一个平面网络模型，这意味着所有的Pod和节点守护进程都可以相互访问，这一假设在云多租环境中被完全打破。在这些环境中，租户容器通常连接到VPC以实现网络隔离。因此，原生Kubernetes服务API，比如Cluster IP类型服务，如果没有供应商的支持，通常无法在公有云中运行。</p><p>完全支持Kubernetes的多租户是具有挑战性的，因为许多核心组件需要重构。社区正在持续不断的设法解决这些问题。例如：有一个实现APIServer请求优先级和公平性的提案**[9]**。多租户工作组提出了<a href="https://github.com/kubernetes-sigs/multi-tenancy">一个CRD来允许命名空间的自助创建</a>。在基于Kubernetes构建的企业产品中，多租户的支持通常是通过封装一层Kubernetes apiserver，暴露一组新的api **[11]-[13]**。最后但并非最不重要的是，有人可能会为不同的租户创建专用的集群，但由此产生的低资源利用率一直是个问题。</p><p>在本文中，我们提出了VirtualCluster，一个具有特定设计目标的新的框架，用来解决Kubernetes中上述的隔离问题。具体目标如下：</p><ul><li>支持完全API兼容性的的多租户，这是将VirtualCluster与现有Kubernetes集成的成本最小的用例</li><li>利用Kubernetes的可扩展性，即CRD，避免修改核心组件</li><li>在租户之间共享节点资源，以最大化资源利用率</li></ul><p>为实现上述目标，在VirtualCluster中，每个租户都被分配了一个专用的Kubernetes控制平面，被称为租户控制平面。租户现在可以在自己的控制平面上创建命名空间或者CRD而不会影响其他租户，并且大部分性能问题，由于共享一个控制平面而不存在。管理物理节点的集群现在成为容器资源的提供者，被称为super cluster。我们开发了一个syncer controller来把对象从租户控制平面迁移到super cluster，并且将对象状态更新回租户控制平面。syncer还可以确保在故障或竞争条件下的数据一致性。Kata沙箱容器 <strong>[14]</strong> 用来提供一个VM标准容器运行时隔离。在每个guest OS中运行的Kata agent被略微修改，以使用增强的kubeproxy来支持Kubernetes cluster IP类型的服务。我们开发了一个虚拟节点代理（virtual node agent），将来自租户控制平面的所有日志和执行请求代理到super cluster中运行的Pods。综上所述，从租户的角度来看，每个租户的apiserver表现的都像一个完整的，具有弹性能力的Kubernetes集群。核心VirtualCluster组件是开源的**[15]**</p><p>我们已经进行了实验来评估VirtualCluster框架的性能影响。结果表明，在大规模压力测试中，使用VirtualCluster的操作延迟（latency）与基线相当。VirtualCluster还保持了可持续的吞吐量。例如，当在100个租户的控制平面中同时创建了1万个Pod时，创建所有Pod所需要23秒。在所有Pod在Super Cluster中直接创建的话，需要花费18秒。除了要求super cluster使用租户控制平面指定的子域名（subdomain）这个测试用例在当前设计中并不支持外，我们已经验证了VirtualCluster可以通过所有的Kubernetes的一致性测试。</p><p>就目标用例而言，VirtualCluster特别适合于构建云容器服务或者基于Kubernetes的软件及服务（SaaS）。使用VirtualCluster，用户可以没有维护物理节点的负担，并且只用支付工作负载（workload）所使用的资源。大多数Kubernetes插件和operators可以被移植到VirtualCluster，几乎没有任何集成工作。此外，当支持多个租户时，可以实现更好的计算资源利用率</p><h2 id="2-背景和相关工作"><a href="#2-背景和相关工作" class="headerlink" title="2. 背景和相关工作"></a>2. 背景和相关工作</h2><p>多租一直是云计算领域的研究课题。此前，研究人员研究了如何提升控制平面、网络和存储的云环境的隔离和安全性**[16]-[22]<strong>。提出了一些检测机制来识别恶意租户</strong>[23]-[24]**。一些研究集中在</p><h2 id="3-设计"><a href="#3-设计" class="headerlink" title="3. 设计"></a>3. 设计</h2><h2 id="4-评估"><a href="#4-评估" class="headerlink" title="4. 评估"></a>4. 评估</h2><p>实验环境：1.18 Kubernetes集群，1 Master + 2 woker Node</p><p>为了测量syncer controller的资源使用，避免其他组件潜在的干扰，在其中一个worker node部署syncer controller，在另一个work node部署租户控制平面（tenant control planes）。每个租户控制平面使用一个专用的etcd。所有的控制平面使用一个高速的virtual switch连到同一个VPC。由于资源限制，我们在super cluster安装了100个virtual kubelets，来模拟一个拥有100个节点，运行大量Pods的集群。请注意注意实验中Pod的创建延迟由于使用了virtual kubelet，并没有把拉取镜像和创建容器的时间包含在内。</p><p>选取Pod端到端创建时间作为主要性能指标主要有如下原因：</p><ul><li>当VirtualCluster在高负载的情况下，syncer引入的队列延迟是主要的性能问题</li><li>Pod对象，作为Kubernetes主要的对象，可能是最复杂的模式，并且还发明很多对象来为它服务。操作pod对象的性能将会有很高的代表性</li><li>Pod创建触发了一个复杂的工作流程，包括其他主要的Kubernetes组件，像scheduler和kubelet。它正处于应用部署的关键路径。因此它的性能经常被强调</li></ul><p>当VirtualCluster部署正常的load，syncer每秒的请求会有1或2毫秒延迟，这在典型的Kubernetes用例中，是不值得一提的。我们开发了一个可以同时在所有租户控制平面创建大量Pod的负载生成器（load generator）来给系统做压测。在super cluster，每一个virtual kubelet运行一个模拟pod的提供者（mock Pod provider），标记所有Pod调度到virtual kubelet，并且立即设置为running的状态。Pod创建时间通过计算租户pod的创建时间戳，和租户里Pod condition被更新为ready的时间戳之差，包括所有队列延迟和有syncer产生的对象同步的开销。通过负载生成器（load generator）直接发送所有请求到super cluster生成一些基线用例，来做对比。基线中Pod的创建时间通过Pod创建时间戳和Pod的condition状态更新为ready的时间戳来计算。</p><p>a. Syncer controller对延迟的影响</p><h2 id="REFERENCES"><a href="#REFERENCES" class="headerlink" title="REFERENCES"></a>REFERENCES</h2><p>[9] “Priority and fairness for api server requests,” <a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1040-priority-and-fairness">https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1040-priority-and-fairness</a>, 2019, accessed: 2020-08-20.</p><p>[11] “Red hat openshift container platform,” <a href="https://www.openshift.com/products/container-platform">https://www.openshift.com/products/container-platform</a>, 2020, accessed: 2020-08-20.</p><p>[12] “Anthos, modern application platform for your business,” <a href="https://cloud.google.com/anthos">https://cloud.google.com/anthos</a>, 2020, accessed: 2020-08-20.</p><p>[13] “Project pacifific – technical overview,” <a href="https://blogs.vmware.com/vsphere/2019/08/project-pacifific-technical-overview.html">https://blogs.vmware.com/vsphere/2019/08/project-pacifific-technical-overview.html</a>, 2019,</p><p>accessed: 2020-08-20.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>k8s多租户</title>
    <link href="/2021/12/01/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7/"/>
    <url>/2021/12/01/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>企业外部多租需求，为保证安全性和提升资源使用率，需要对每个租户提供一个专用的控制层平面</p><p>而原生k8s基于命名空间（Namespace） 机制的多租户是弱多租，没法做到很好的隔离</p><p>目前硬多租隔离方案有：</p><ul><li>Kubernetes-sig mutil-tenancy的VirtualCluster</li><li>loft-sh的vCluster</li></ul><p>实现原理上大同小异，具体差异可看这里<a href="https://github.com/kubernetes-sigs/multi-tenancy/issues/1486">differences between VirtualCluster and vcluster</a></p><p>综合社区兼容性，和完善性，选择VirtualCluster作为分析对象</p><h1 id="VirtualCluster"><a href="#VirtualCluster" class="headerlink" title="VirtualCluster"></a>VirtualCluster</h1><p>VirtualCluster 代表了一种新架构，可以解决各种 Kubernetes 控制平面隔离挑战。它通过为每个租户提供集群视图来扩展现有的基于命名空间的 Kubernetes 多租户模型。 VirtualCluster 完全利用了 Kubernetes 的可扩展性并保留了完整的 API 兼容性。使用VirtualCluster，每个租户会被分配一个专用的租户控制层，租户可以在租户控制平面中创建集群范围资源，例如命名空间和 CRD，而不会影响其他人，因此，由于共享一个 apiserver 导致的大部分隔离问题都消失了。管理和维护实际物理节点的 Kubernetes 集群称为super cluster，现在成为 Pod 资源提供者，至于数据层的隔离则是用安全沙箱容器，例如kata。</p><p>VirtualCluster由如下组件组成：</p><ul><li><strong>vc-manager：</strong>引入了新的 CRD VirtualCluster 来对租户控制平面进行建模。 vc-manager 管理每个 VirtualCluster 自定义资源的生命周期。根据规范，它要么在本地 K8s 集群中创建控制平面 Pod，要么在提供有效 kubeconfig 的情况下导入现有集群。</li><li><strong>syncer：</strong>一个集中控制器，将 Pod 供应所需的 API 对象，从每个租户控制平面填充到超级集群，并双向同步对象状态。它还定期扫描同步对象，以确保租户控制平面和超级集群之间的状态一致。</li><li><strong>vn-agent：</strong>一个节点守护进程，它将所有租户 kubelet API 请求代理到在节点中运行的 kubelet 进程。它确保每个租户只能访问节点中自己的 Pod。</li></ul><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>理想情况下，租户在大多数情况下不应该知道super cluster的存在。比较租户控制平面和普通 Kubernetes 集群，仍然存在一些明显的差异。</p><ul><li>在租户控制平面中，节点对象只有在租户 Pod 被创建后才会出现。super cluster节点拓扑没有完全暴露在租户控制平面中。这意味着 VirtualCluster 不支持租户控制平面中的类似 DaemonSet 的工作负载。目前，如果新创建的租户 Pod 的<code>nodename</code>已在<code>spec</code>中设置，则syncer controller会拒绝它。</li><li>syncer controller管理租户控制平面中node对象的生命周期，但它不会更新node lease对象以减少网络流量。因此，建议将租户控制平面节点控制器 –node-monitor-grace-period 参数增加到更大的值（&gt;60 秒)</li><li>Coredns 感知不到租户。因此，如果需要 DNS，租户应在租户控制平面中安装 coredns。应该使用名称 kube-dns 在 kube-system 命名空间中创建 DNS 服务。然后syncer controller可以在super cluster中识别 DNS  service的cluster IP ，并将其注入任何 <code>Pod spec.dnsConfig</code>。</li><li>租户service spec中的cluster IP 字段是一个虚假值。如果任何租户控制器需要在super cluster节点中生效实际的cluster IP，则需要进行特殊处理。syncer将使用<code>transparent.tenancy.x-k8s.io/clusterIP</code> 作为key，在租户services对象的annotations中回填super cluster中使用的cluster IP。然后，解决方法通常是在控制器中进行简单的代码更改。本文档显示了 coredns 的示例。</li><li>VirtualCluster 不支持租户 PersistentVolumes。所有的 PV 和 Storageclass 都由super cluster提供。</li></ul><h2 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/202112031923287.png" alt="img_06"></p><p>​                                                                                                    图1</p><h3 id="1-Tenant-Operator"><a href="#1-Tenant-Operator" class="headerlink" title="1. Tenant Operator"></a>1. Tenant Operator</h3><p>VirtualCluster CRD，简称VC， 定义为描述租户控制平面规范 比如apiserver版本，资源配置等。VC对象由Super Cluster管理员管理。这个租户Operator调谐（reconcile） VC 对象的状态，无论何时它们被更改，以处理租户控制平面的生命周期事件。</p><p>请注意，租户控制平面不需要调度器，因为 Pod 调度是在super cluster中完成的。</p><p>VC目前支持本地模式和云模式进行配置租户控制平面。在云模式下，租户operator利用阿里云ACK或AWS EKS等公有云服务 ，用于管理控制平面组件。它还存储了集群访问凭证，super cluster中每个租户控制平面的 kubeconf ig，以便syncer控制器可以从super cluster访问所有租户控制平面。不允许租户访问超级集群。</p><h3 id="2-Syncer-controller"><a href="#2-Syncer-controller" class="headerlink" title="2. Syncer controller"></a>2. Syncer controller</h3><p>syncer只填充在Pod provision中使用的租户对象，例如：命名空间（Namespaces），Pods，Services，Secrets等等。对于super cluster，不包括所有其他控制或扩展对象。</p><p>请注意，所有对同步对象的读请求均由租户apiservers提供服务，从而缓解super cluster的压力，相比所有租户都直接访问super cluster的场景。</p><p>在Kubernetes中，任何命名空间作用域对象的全称，例如namespace/objectname，必须唯一。</p><p>syncer为每一个同步的租户命名空间（Namespace）都会添加一个前缀，避免名称冲突。</p><p>前缀是将VC 的对象所有者名称和对象的 UID 的哈希值，做一个简短的连接<br>。同步器的作用不仅仅是复制对象。</p><h3 id="3-Virtual-Node-agent"><a href="#3-Virtual-Node-agent" class="headerlink" title="3. Virtual Node agent"></a>3. Virtual Node agent</h3><p>在 Kubernetes 中，kubelet 只能将自己注册到一个 apiserver，即 Virtual Cluster 中的Super Cluster。因此，常用的 kubelet API，例如 log 和exec 对租户不起作用，因为租户 apiserver 不能直接访问kubelet。实现了一个虚拟节点代理(vn-agent) 解决这个问题，它运行在每个节点上代理租户的 kubelet API 请求。更具体地说，一旦<br>在super cluster中调度了一个 Pod，syncer将创建租户 apiserver 中的虚拟节点对象。为了拦截kubelet API 请求，虚拟节点指向物理节点中的 vn-agent而不是 kubelet 。当代理请求时，vn-agent 需要从 HTTPS请求 中识别租户，因为租户 Pod 在super cluster中的Namespace与租户控制平面的不同。发送请求的租户可以是通过将其 TLS 证书的哈希值与保存在每个 VC 对象中的哈希值作对比来识别。之后可以计算出它在super cluster中使用的命名空间（Namespace）前缀</p><h3 id="4-增强型kubeproxy"><a href="#4-增强型kubeproxy" class="headerlink" title="4. 增强型kubeproxy"></a>4. 增强型kubeproxy</h3><p>在Kubernetes中，cluster IP类型的Services，定义了集群内访问一组端点的路由策略（即访问Pods），路由策略由一个 kubeproxy 守护进程实施，它会在Service endpoints发生变化时，更新主机的IPtables。当容器连到一个VPC（virtual private cloud）网络时，这个机制就被破坏了。因为网络流量可通过一个vendor-specific network interface绕过主机网络协议栈（network stack）。为了在这样的环境下启用cluster IP类型的Services，通过允许直接注入或者更新每个Kata容器的guest OS中的网络路由规则来增强kubeproxy。更具体的说，允许在guest OS中的Kata agent开启一个与kubeproxy的安全的gRPC连接，通过它可以将服务路由规则应用于guest OS的 IPtable</p><p>kubeproxy 的改动是适度的。它需要监视 Pod 创建事件，并且和 Pod init容器 配合。Pod init容器先于任何工作负载（workload）容器运行，检查 IPtable 更新进度，确保在工作负载（workload）容器启动之前注入路由规则</p><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><p>实验环境：1.18 Kubernetes集群，1 Master + 2 woker Node</p><p>为了测量syncer controller的资源使用，避免其他组件潜在的干扰，在其中一个worker node部署syncer controller，在另一个work node部署租户控制平面（tenant control planes）。每个租户控制平面使用一个专用的etcd。所有的控制平面使用一个高速的virtual switch连到同一个VPC。由于资源限制，我们在super cluster安装了100个virtual kubelets，来模拟一个拥有100个节点，运行大量Pods的集群。请注意注意实验中Pod的创建延迟由于使用了virtual kubelet，并没有把拉取镜像和创建容器的时间包含在内。</p><p>选取Pod端到端创建时间作为主要性能指标主要有如下原因：</p><ul><li>当VirtualCluster在高负载的情况下，syncer引入的队列延迟是主要的性能问题</li><li>Pod对象，作为Kubernetes主要的对象，可能是最复杂的模式，并且还发明很多对象来为它服务。操作pod对象的性能将会有很高的代表性</li><li>Pod创建触发了一个复杂的工作流程，包括其他主要的Kubernetes组件，像scheduler和kubelet。它正处于应用部署的关键路径。因此它的性能经常被强调</li></ul><p>当VirtualCluster部署正常的load，syncer每秒的请求会有1或2毫秒延迟，这在典型的Kubernetes用例中，是不值得一提的。开发了一个可以同时在所有租户控制平面创建大量Pod的负载生成器（load generator）来给系统做压测。在super cluster，每一个virtual kubelet运行一个模拟pod的提供者（mock Pod provider），标记所有Pod调度到virtual kubelet，并且立即设置为running的状态。Pod创建时间通过计算租户pod的创建时间戳，和租户里Pod condition被更新为ready的时间戳之差，包括所有队列延迟和有syncer产生的对象同步的开销。通过负载生成器（load generator）直接发送所有请求到super cluster生成一些基线用例，来做对比。基线中Pod的创建时间通过Pod创建时间戳和Pod的condition状态更新为ready的时间戳来计算。</p><h3 id="1-Syncer-controller对延迟的影响"><a href="#1-Syncer-controller对延迟的影响" class="headerlink" title="1. Syncer controller对延迟的影响"></a>1. Syncer controller对延迟的影响</h3><p>可能影响Syncer延迟方面性能的三个因素。它们是创建的 Pod 数、租户数和下行工作线程数。通过改变每个因素的数量得到了十二个案例，结果如图 2 所示。在每个用例中，每个租户中创建的 Pod 数量是相等的。</p><p>对于基线用例，负载生成器使用与租户数量相同的线程数直接将Pod提交到超级集群。 将 Pod 创建时间直方图与基线案例的直方图进行比较，结果为如图2所示。集中的直方图表示性能稳定，而平坦的直方图表示高性能变化。</p><p>图 2 显示使用 VirtualCluster 不会显着延长 Pod 创建时间。大多数操作的延迟都在基线延迟范围内。</p><p>例如，当使用 100 个租户和 20 个工作线程时，在创建 1250、2500、5000 和 10000 个 Pod 时，TP99（99% 百分位延迟）为 3秒（基线为 1秒）、4秒（基线为 2秒）、8秒（基线为8秒）、14秒（基线为8秒）。</p><p>由基线用例在创建大量 Pod 时表现出明显的性能变化。可以发现super cluster的可扩展性瓶颈是调度器。默认的 Kubernetes 调度器只有一个队列，它按顺序调度 Pod。因此，在实验中看到当每秒几百个 Pod 创建时，调度器吞吐量达到峰值。在高 Pod 流失率下，调度队列延迟会减慢 Pod 创建过程，这也解释了另一个观察结果，即增加下行工作线程的数量根本没有帮助减少延迟。花费在同步器向下调谐循环（reconcile loop）上的时间是微不足道的。使用20个工作线程足以推动super cluster达到调度吞吐量的上限。但是，上行工作线程的数量确实会影响延迟（图中未显示），因为租户控制平面在处理对象状态更新方面没有瓶颈。因此，我们在同步器中设置了较高的默认向上工作线程数为100和较低的默认值为20向下工作线程。在图 2 中，我们还可以观察到租户数量不会影响创建相同数量 Pod 的延迟。</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202112031834417.jpg" alt="experiment"></p><p>​                                                                                            图2</p><h3 id="2-Syncer-controller对吞吐量的影响"><a href="#2-Syncer-controller对吞吐量的影响" class="headerlink" title="2. Syncer controller对吞吐量的影响"></a>2. Syncer controller对吞吐量的影响</h3><p>通过计算每秒创建Pod数量来评估VirtualCluster吞吐量，结果如图3所示。</p><p>从图 3(a) 中，当创建相同数量的 Pod（10000Pods）， 可以看到租户数量不影响吞吐量。 VirtualCluster 引入了约 21% 的恒定吞吐量下降。由于syncer中的一些关键部分（例如工作队列入队或出队）无法并行化，因此预估吞吐量较低。syncer中的锁竞争可能也会降低吞吐量。</p><p>图 3(b) 显示，当租户数固定（100个租户），吞吐量大致为VirtualCluster 的常数，但随着 Pod 数量的增加，基线用例反而会变得更低，最大吞吐量下降约为 34%。请注意，添加更多syncer可能会通过减少每个同步器锁竞争来提高整体吞吐量。但是，由于以下几个原因，它不是可取的：<br>1）无论租户数量和Pod数量如何，使用一个同步器仍然可以实现可持续的吞吐量；<br>2）与控制平面吞吐量相比，从租户的角度来看，操作延迟更为重要。</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202112061458730.jpg" alt="vcluster-3"></p><p>​                                                                                        图3</p><h3 id="3-Syncer-controller的开销"><a href="#3-Syncer-controller的开销" class="headerlink" title="3.Syncer controller的开销"></a>3.Syncer controller的开销</h3><p>Syncer的可用计算资源会在它繁忙时影响其性能。实验中，没有为syncer设置资源限制。图 4 显示了实验中同步器控制器的 CPU 和内存使用情况。正如预期的那样，随着 Pod 数量的增加，资源使用量几乎呈线性增加。可以通过计算累积的 CPU 时间除以进程挂钟时间来估计消耗的 CPU 的平均数量。比如在一万个Pod的情况下，syncer在实验过程中大致消耗了$\frac{138}{23}$个CPU，也就是6个CPU，远远超出了正常情况下的要求。通常建议syncer的 CPU 限制为1到2个 CPU。在一万个 Pod 的情况下，syncer的峰值内存使用量约为 1.2GB。峰值内存增长率大约为每个 Pod 40KB，这是通过计算曲线的比率来估计的。syncer中的主要内存消耗是 Informer 缓存。一个租户对象在syncer中至少有两个副本，一个在租户控制平面的informer缓存中，另一个在超级集群（super cluster）informer缓存中。syncer工作队列在增长时也会消耗内存，但队列的请求的大小通常很小（几个字节），并且队列不会因为重复数据删除而无限增长。 我们还检查了syncer重启性能，当100 个租户控制平面10000个Pods时，它花费少于21秒初始化所有 Informer 缓存，这是相当快的，因为syncer重启很少见。此外，我们还测量了syncer中周期性扫描线程的开销。并行扫描线程数等于租户数，扫描间隔设置为一分钟。发现平均完成扫描 10000 个 Pod 的时间不到两秒钟。</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202112061605974.jpg" alt="vcluster-10"></p><p>​                                                                                        图4</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://docs.google.com/document/d/1EELeVaduYZ65j4AXg9bp3Kyn38GKDU5fAJ5LFcxt2ZU/edit#">阿里云 Kubernetes 团队 Virtual Cluster 提案</a></li><li><a href="https://docs.google.com/document/d/1U8RQQmTUjxgMZY05HG2f7b3KsB94BhK4Ko6aWbLNXcc/edit#heading=h.b2hihvai50vt">Kubernetes Multi-Tenancy Proposal</a></li><li><a href="https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/virtualcluster/doc/vc-icdcs.pdf">github vc-icdcs</a></li><li><a href="https://github.com/kubernetes-sigs/multi-tenancy/issues/1486">https://github.com/kubernetes-sigs/multi-tenancy/issues/1486</a></li><li><a href="https://docs.google.com/document/d/1hpJX5O_siMmNGMvIHvz8Pm7XOjJLz5g57XWrgwWarFw/edit?userstoinvite=vrgf2003@gmail.com#heading=h.c0uts5ftkk58"><strong>Kubernetes Tenant CRD</strong>  Iterative Kubernetes Multi-tenancy WG Worksheet</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>Multi-tenancy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多租户容器隔离</title>
    <link href="/2021/12/01/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AE%B9%E5%99%A8%E9%9A%94%E7%A6%BB/"/>
    <url>/2021/12/01/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7%E5%AE%B9%E5%99%A8%E9%9A%94%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<p>IO CPU</p><p>KVM Kata </p><p>emu, firecracker, ACRN, cloud-hypervisor</p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>Multi-tenancy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源利用率提升</title>
    <link href="/2021/12/01/%E8%B5%84%E6%BA%90%E5%88%A9%E7%94%A8%E7%8E%87%E6%8F%90%E5%8D%87/"/>
    <url>/2021/12/01/%E8%B5%84%E6%BA%90%E5%88%A9%E7%94%A8%E7%8E%87%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<p>关键词：资源超售，超卖，</p><p>资源效率低下的原因：</p><ol><li><strong>在线业务流量周期性</strong></li><li><strong>集群资源碎片</strong></li><li><strong>在离线机房隔离</strong></li></ol><p>提升资源利用率瓶颈：</p><p>传统模式的 Kubernetes 按照业务申请的 request 资源量进行静态调度，</p><p>提升资源率的方法</p><p><strong>及时准确的资源预测手段</strong></p><p><strong>快速响应资源变化的能力</strong></p><p><strong>一套可以在资源水位变化的时候进行的服务保障措施</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CAP</title>
    <link href="/2021/11/29/CAP/"/>
    <url>/2021/11/29/CAP/</url>
    
    <content type="html"><![CDATA[<p>一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>云原生计算</title>
    <link href="/2021/11/29/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%AE%A1%E7%AE%97/"/>
    <url>/2021/11/29/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p>云计算：</p><p>应用迁移上云，很多并没有进行应用重构</p><p>的云服务进行重构，而是继续采用“老”的架构，那么即使业务运行没有问题，应用也不能充分利用“新”的云运行环境的能力。因为这些架构是为了“老”的分布式运行环境而设计的，不是“云原生的”，所以需要对这些架构以及围绕这些架构建立的技术栈、工具链、交付体系进行升级，依托于云技术栈将其重新部署、部分重构甚至全部重写，才能将应用变成“云原生的”，从而保证能够充分利用云计算的能力。<br>为了让应用能够更好地使用云的PaaS平台能力开发SaaS（Software as a Service，软件即服务），Heroku于2011年提出了十二因子应用的概念。十二因子应用适用于任何编程语言，通常被认为是最早的云原生应</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://12factor.net/">https://12factor.net/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/18/%E5%AD%98%E5%8F%96CRD/"/>
    <url>/2021/11/18/%E5%AD%98%E5%8F%96CRD/</url>
    
    <content type="html"><![CDATA[<p>Kubebuilder 和<a href="https://github.com/kubernetes/code-generator">k8s.io/code-generator</a>类似，是一个代码生成工具，用于为你的CRD生成<a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md">kubernetes-style API</a>实现。区别在于：</p><ul><li>Kubebuilder不会生成informers、listers、clientsets，而code-generator会。</li><li>Kubebuilder会生成Controller、Admission Webhooks，而code-generator不会。</li><li>Kubebuilder会生成manifests yaml，而code-generator不会。</li><li>Kubebuilder还带有一些其他便利性设施。</li></ul><p>Resource + Controller = Operator，因此你可以利用Kubebuilder编写你自己的Operator。</p><p>如果你不想做Operator，如果你不会直接or间接生成Pod，只是想存取CRD（把K8S当作数据库使用）。那你可以使用Kubebuilder生成CRD和manifests yaml，再使用code-generator生成informers、listers、clientsets。</p><p>本文讲的就是这个方法。</p><h2 id="kubebuilder"><a href="#kubebuilder" class="headerlink" title="kubebuilder"></a>kubebuilder</h2><h3 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubebuilder init --domain baishan.com<br>kubebuilder edit --multigroup=true<br></code></pre></td></tr></table></figure><h3 id="2-生成Resource和manifests"><a href="#2-生成Resource和manifests" class="headerlink" title="2. 生成Resource和manifests"></a>2. 生成Resource和manifests</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubebuilder create api --group devops --version v1 --kind Cluster<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">Create Resource [y/<span class="hljs-built_in">n</span>]<br>y<br>Create Controller [y/<span class="hljs-built_in">n</span>]<br><span class="hljs-built_in">n</span><br></code></pre></td></tr></table></figure><p>使用code-genrator生成controller，所以这里不用生成controller</p><p>添加文件<code>apis/devops/v1/rbac.go</code>，这个文件用生成RBAC manifests：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// +kubebuilder:rbac:groups=devops.baishan.com,resources=clusters,verbs=get;list;watch;create;update;patch;delete</span><br><span class="hljs-comment">// +kubebuilder:rbac:groups=devops.baishan.com,resources=clusters/status,verbs=get;update;patch</span><br><br><span class="hljs-keyword">package</span> v1<br></code></pre></td></tr></table></figure><h3 id="3-生成CRD-manifests："><a href="#3-生成CRD-manifests：" class="headerlink" title="3. 生成CRD manifests："></a>3. 生成CRD manifests：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make manifests<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">config</span><br>├── crd<br>│   └── <span class="hljs-keyword">bases</span><br><span class="hljs-keyword"></span>│       └── devops.<span class="hljs-keyword">baishan.com_clusters.yaml</span><br><span class="hljs-keyword"></span>└── rbac<br>    └── role.yaml<br></code></pre></td></tr></table></figure><p>如果你修改了<code>cluster_types.go</code>的结构，你需要执行以下命令来更新代码和manifests：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">make &amp;&amp; make manifests<br></code></pre></td></tr></table></figure><h2 id="code-generator"><a href="#code-generator" class="headerlink" title="code generator"></a>code generator</h2><h3 id="1-准备脚本"><a href="#1-准备脚本" class="headerlink" title="1. 准备脚本"></a>1. 准备脚本</h3><p>下载code generator到本地，把code generator目录下hack文件夹里面的<code>update-codegen.sh</code>和<code>verify-codegen.sh</code>拷到当前的hack目录下，同时新建tools.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// +build tools</span><br><span class="hljs-keyword">package</span> tools<br><br><span class="hljs-keyword">import</span> _ <span class="hljs-string">&quot;k8s.io/code-generator&quot;</span><br></code></pre></td></tr></table></figure><p>当前hack目录如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">hack<br>├── boilerplate.<span class="hljs-keyword">go</span>.txt<br>├── tools.<span class="hljs-keyword">go</span><br>├── <span class="hljs-keyword">update</span>-codegen.<span class="hljs-keyword">sh</span><br>└── verify-codegen.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://chanjarster.github.io/post/k8s/mix-kubebuilder-and-code-generator">https://chanjarster.github.io/post/k8s/mix-kubebuilder-and-code-generator</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Node  operator</title>
    <link href="/2021/11/17/Node-operator/"/>
    <url>/2021/11/17/Node-operator/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes on kubernetes operator</title>
    <link href="/2021/11/17/kubernetes-on-kubernetes-operator/"/>
    <url>/2021/11/17/kubernetes-on-kubernetes-operator/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Operator开发</title>
    <link href="/2021/11/17/Operator%E5%BC%80%E5%8F%91/"/>
    <url>/2021/11/17/Operator%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubebuilder和operator-sdk-区别"><a href="#Kubebuilder和operator-sdk-区别" class="headerlink" title="Kubebuilder和operator sdk 区别"></a>Kubebuilder和operator sdk 区别</h2><p>There’s not a huge difference between the Go projects that kubebuilder and operator-sdk scaffold. Both use controller-tools and controller-runtime and both scaffold substantially similar go package structures.</p><p>Where they differ is:</p><ul><li>Operator SDK also has support for Ansible and Helm operators, which make it easy to write operators without having to learn Go and if you already have experience with Ansible or Helm</li><li>Operator SDK includes integrations with the Operator Lifecycle Manager (OLM), which is a key component of the Operator Framework that is important to Day 2 cluster operations, like managing a live upgrade of your operator.</li><li>Operator SDK includes a scorecard subcommand that helps you understand if your operator follows best practices.</li><li>Operator SDK includes an e2e testing framework that simplifies testing your operator against an actual cluster.</li><li>Kubebuilder includes an envtest package that allows operator developers to run simple tests with a standalone etcd and apiserver.</li><li>Kubebuilder scaffolds a Makefile to assist users in operator tasks (build, test, run, code generation, etc.); Operator SDK is currently using built-in subcommands. Each has pros and cons. The SDK team will likely be migrating to a Makefile-based approach in the future.</li><li>Kubebuilder uses Kustomize to build deployment manifests; Operator SDK uses static files with placeholders.</li><li>Kubebuilder has recently improved its support for admission and CRD conversion webhooks, which has not yet made it into SDK.</li></ul><p>The SDK and Kubebuilder teams work closely together, and we’re planning to increase our efforts to help the kubebuilder team maintain controller-tools and controller-runtime so that the entire community has access to the latest features and bug fixes.</p><h2 id="Kubebuilder"><a href="#Kubebuilder" class="headerlink" title="Kubebuilder"></a>Kubebuilder</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubebuilder init --domain baishan.com</span><br>Writing kustomize manifests for you to edit...<br>Writing scaffold for you to edit...<br>Get controller runtime:<br><span class="hljs-meta">$</span><span class="bash"> go get sigs.k8s.io/controller-runtime@v0.10.0</span><br>Update dependencies:<br><span class="hljs-meta">$</span><span class="bash"> go mod tidy</span><br>Next: define a resource with:<br><span class="hljs-meta">$</span><span class="bash"> kubebuilder create api</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubebuilder edit --multigroup=true<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── Dockerfile<br>├── Makefile<br>├── PROJECT<br>├── config<br>│   ├── default<br>│   │   ├── kustomization.yaml<br>│   │   ├── manager_auth_proxy_patch.yaml<br>│   │   └── manager_config_patch.yaml<br>│   ├── manager<br>│   │   ├── controller_manager_config.yaml<br>│   │   ├── kustomization.yaml<br>│   │   └── manager.yaml<br>│   ├── prometheus<br>│   │   ├── kustomization.yaml<br>│   │   └── monitor.yaml<br>│   └── rbac<br>│       ├── auth_proxy_client_clusterrole.yaml<br>│       ├── auth_proxy_role.yaml<br>│       ├── auth_proxy_role_binding.yaml<br>│       ├── auth_proxy_service.yaml<br>│       ├── kustomization.yaml<br>│       ├── leader_election_role.yaml<br>│       ├── leader_election_role_binding.yaml<br>│       ├── role_binding.yaml<br>│       └── service_account.yaml<br>├── go.mod<br>├── go.sum<br>├── hack<br>│   └── boilerplate.go.txt<br>└── main.go<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubebuilder create api --group devops --version v1 --kind Cluster</span><br>Create Resource [y/n]<br>y<br>Create Controller [y/n]<br>y<br>Writing kustomize manifests for you to edit...<br>Writing scaffold for you to edit...<br>api/v1/cluster_types.go<br>controllers/cluster_controller.go<br>Update dependencies:<br><span class="hljs-meta">$</span><span class="bash"> go mod tidy</span><br>Running make:<br><span class="hljs-meta">$</span><span class="bash"> make generate</span><br>go: creating new go.mod: module tmp<br>Downloading sigs.k8s.io/controller-tools/cmd/controller-gen@v0.7.0<br>go get: installing executables with &#x27;go get&#x27; in module mode is deprecated.<br>To adjust and download dependencies of the current module, use &#x27;go get -d&#x27;.<br>To install using requirements of the current module, use &#x27;go install&#x27;.<br>To install ignoring the current module, use &#x27;go install&#x27; with a version,<br>like &#x27;go install example.com/cmd@latest&#x27;.<br>For more information, see https://golang.org/doc/go-get-install-deprecation<br>or run &#x27;go help get&#x27; or &#x27;go help install&#x27;.<br>go get: added github.com/fatih/color v1.12.0<br>go get: added github.com/go-logr/logr v0.4.0<br>go get: added github.com/gobuffalo/flect v0.2.3<br>go get: added github.com/gogo/protobuf v1.3.2<br>go get: added github.com/google/go-cmp v0.5.6<br>go get: added github.com/google/gofuzz v1.1.0<br>go get: added github.com/inconshreveable/mousetrap v1.0.0<br>go get: added github.com/json-iterator/go v1.1.11<br>go get: added github.com/mattn/go-colorable v0.1.8<br>go get: added github.com/mattn/go-isatty v0.0.12<br>go get: added github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd<br>go get: added github.com/modern-go/reflect2 v1.0.1<br>go get: added github.com/spf13/cobra v1.2.1<br>go get: added github.com/spf13/pflag v1.0.5<br>go get: added golang.org/x/mod v0.4.2<br>go get: added golang.org/x/net v0.0.0-20210520170846-37e1c6afe023<br>go get: added golang.org/x/sys v0.0.0-20210616094352-59db8d763f22<br>go get: added golang.org/x/text v0.3.6<br>go get: added golang.org/x/tools v0.1.5<br>go get: added golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1<br>go get: added gopkg.in/inf.v0 v0.9.1<br>go get: added gopkg.in/yaml.v2 v2.4.0<br>go get: added gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b<br>go get: added k8s.io/api v0.22.2<br>go get: added k8s.io/apiextensions-apiserver v0.22.2<br>go get: added k8s.io/apimachinery v0.22.2<br>go get: added k8s.io/klog/v2 v2.9.0<br>go get: added k8s.io/utils v0.0.0-20210819203725-bdf08cb9a70a<br>go get: added sigs.k8s.io/controller-tools v0.7.0<br>go get: added sigs.k8s.io/structured-merge-diff/v4 v4.1.2<br>go get: added sigs.k8s.io/yaml v1.2.0<br>/Users/flynn/go/src/baishan.com/cluster-manager/bin/controller-gen object:headerFile=&quot;hack/boilerplate.go.txt&quot; paths=&quot;./...&quot;<br>Next: implement your new API and generate the manifests (e.g. CRDs,CRs) with:<br><span class="hljs-meta">$</span><span class="bash"> make manifests</span><br></code></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── Dockerfile<br>├── Makefile<br>├── PROJECT<br>├── api<br>│   └── v1<br>│       ├── cluster_types.go<br>│       ├── groupversion_info.go<br>│       └── zz_generated.deepcopy.go<br>├── bin<br>│   └── controller-gen<br>├── config<br>│   ├── crd<br>│   │   ├── kustomization.yaml<br>│   │   ├── kustomizeconfig.yaml<br>│   │   └── patches<br>│   │       ├── cainjection_in_clusters.yaml<br>│   │       └── webhook_in_clusters.yaml<br>│   ├── default<br>│   │   ├── kustomization.yaml<br>│   │   ├── manager_auth_proxy_patch.yaml<br>│   │   └── manager_config_patch.yaml<br>│   ├── manager<br>│   │   ├── controller_manager_config.yaml<br>│   │   ├── kustomization.yaml<br>│   │   └── manager.yaml<br>│   ├── prometheus<br>│   │   ├── kustomization.yaml<br>│   │   └── monitor.yaml<br>│   ├── rbac<br>│   │   ├── auth_proxy_client_clusterrole.yaml<br>│   │   ├── auth_proxy_role.yaml<br>│   │   ├── auth_proxy_role_binding.yaml<br>│   │   ├── auth_proxy_service.yaml<br>│   │   ├── cluster_editor_role.yaml<br>│   │   ├── cluster_viewer_role.yaml<br>│   │   ├── kustomization.yaml<br>│   │   ├── leader_election_role.yaml<br>│   │   ├── leader_election_role_binding.yaml<br>│   │   ├── role_binding.yaml<br>│   │   └── service_account.yaml<br>│   └── samples<br>│       └── devops_v1_cluster.yaml<br>├── controllers<br>│   ├── cluster_controller.go<br>│   └── suite_test.go<br>├── go.mod<br>├── go.sum<br>├── hack<br>│   └── boilerplate.go.txt<br>└── main.go<br></code></pre></td></tr></table></figure><p>安装CRD</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>定义yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">devops.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-01</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xiamen-area</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">osType:</span> <span class="hljs-string">centos</span>                 <span class="hljs-comment"># 操作系统类型</span><br>  <span class="hljs-attr">criType:</span> <span class="hljs-string">containerd</span>            <span class="hljs-comment"># cri 类型， 目前支持 containerd， 废弃 docker 支持</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1.19.6</span>               <span class="hljs-comment"># kubernetes version</span><br>  <span class="hljs-attr">eth:</span> <span class="hljs-string">ens34</span>           <span class="hljs-comment"># 网卡名称， 默认 eth0</span><br>  <span class="hljs-attr">clusterCIDR:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.101</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span>   <span class="hljs-comment"># 集群 pod cidr</span><br>  <span class="hljs-attr">serviceCIDR:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.201</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span>   <span class="hljs-comment"># 集群 service cidr</span><br>  <span class="hljs-attr">localAPIEndpoint:</span><br>    <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-number">183.131</span><span class="hljs-number">.145</span><span class="hljs-number">.84</span><br>    <span class="hljs-attr">bindPort:</span> <span class="hljs-number">6443</span>   <br>  <span class="hljs-attr">network:</span><br>    <span class="hljs-attr">ipvs:</span> <span class="hljs-literal">true</span>                   <span class="hljs-comment"># kube-proxy 类型，支持 ipvs、iptables</span><br>    <span class="hljs-attr">internalLB:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">enableMasterSchedule:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># master 结点是否调度</span><br>    <span class="hljs-attr">ha:</span><br>      <span class="hljs-attr">thirdParty:</span><br>        <span class="hljs-attr">vip:</span> <span class="hljs-string">&quot;172.16.18.243&quot;</span>     <span class="hljs-comment"># 集群 apiserver vip</span><br>        <span class="hljs-attr">vport:</span> <span class="hljs-number">6443</span><br>    <span class="hljs-attr">hooks:</span><br>      <span class="hljs-attr">cniInstall:</span> <span class="hljs-string">flannel</span>         <span class="hljs-comment"># 集群 cni 插件</span><br>  <span class="hljs-attr">masterMachines:</span> <span class="hljs-comment"># 集群 master 结点</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.18</span><span class="hljs-number">.17</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.18</span><span class="hljs-number">.18</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.18</span><span class="hljs-number">.19</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-comment"># 镜像仓库 mirrors</span><br>    <span class="hljs-attr">mirrors:</span><br>      <span class="hljs-attr">&quot;docker.io&quot;:</span><br>        <span class="hljs-attr">endpoints:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://yqdzw3p0.mirror.aliyuncs.com&quot;</span><br>      <span class="hljs-attr">&quot;quay.io&quot;:</span><br>        <span class="hljs-attr">endpoints:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://quay.mirrors.ustc.edu.cn&quot;</span><br>  <span class="hljs-attr">upgrade:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">Manual</span>                     <span class="hljs-comment"># 集群升级模式，支持 Auto、Manual</span><br>    <span class="hljs-attr">strategy:</span> <span class="hljs-comment"># 集群升级策略</span><br>      <span class="hljs-attr">maxUnready:</span> <span class="hljs-number">0</span>                  <span class="hljs-comment"># 需要增加结点轮转升级</span><br>      <span class="hljs-attr">drainNodeBeforeUpgrade:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 升级结点前 drain 掉</span><br></code></pre></td></tr></table></figure><p>安装Operator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master kok-operator]# helm upgrade --install kok-operator --create-namespace --namespace kok-system --debug ./charts/kok-operator<br>history.go:56: [debug] getting history for release kok-operator<br>Release &quot;kok-operator&quot; does not exist. Installing it now.<br>install.go:178: [debug] Original chart version: &quot;&quot;<br>install.go:199: [debug] CHART PATH: /root/kok-operator/charts/kok-operator<br><br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 1 resource(s)<br>install.go:165: [debug] Clearing discovery cache<br>wait.go:48: [debug] beginning wait for 4 resources with timeout of 1m0s<br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 5 resource(s)<br>NAME: kok-operator<br>LAST DEPLOYED: Sun Nov 21 21:38:08 2021<br>NAMESPACE: kok-system<br>STATUS: deployed<br>REVISION: 1<br>TEST SUITE: None<br>USER-SUPPLIED VALUES:<br>&#123;&#125;<br><br>COMPUTED VALUES:<br>affinity: &#123;&#125;<br>args:<br>  imagesPrefix: docker.io/wtxue<br>fullnameOverride: &quot;&quot;<br>image:<br>  pullPolicy: Always<br>  repository: docker.io/wtxue/kok-operator<br>  tag: v0.2.0-dev2<br>imagePullSecrets: []<br>nameOverride: &quot;&quot;<br>nodeSelector: &#123;&#125;<br>podAnnotations: &#123;&#125;<br>podSecurityContext: &#123;&#125;<br>rbac:<br>  create: true<br>  name: &quot;&quot;<br>replicaCount: 1<br>resources: &#123;&#125;<br>securityContext: &#123;&#125;<br>service:<br>  port: 80<br>  type: ClusterIP<br>tolerations: []<br><br>HOOKS:<br>MANIFEST:<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/rbac.yaml</span><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: kok-operator<br>  namespace: kok-system<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/rbac.yaml</span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: kok-operator<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>rules:<br>  - apiGroups:<br>      - &quot;&quot;<br>    resources: [&quot;*&quot;]<br>    verbs: [&quot;*&quot;]<br>  - apiGroups:<br>      - &quot;apps&quot;<br>      - &quot;apiextensions.k8s.io&quot;<br>      - &quot;autoscaling&quot;<br>    resources: [&quot;*&quot;]<br>    verbs: [&quot;*&quot;]<br>  - apiGroups: [&quot;devops.fake.io&quot;,&quot;workload.fake.io&quot;]<br>    resources: [&quot;*&quot;]<br>    verbs: [&quot;*&quot;]<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/rbac.yaml</span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: kok-operator<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>subjects:<br>  - kind: ServiceAccount<br>    name: kok-operator<br>    namespace: kok-system<br>roleRef:<br>  kind: ClusterRole<br>  name: kok-operator<br>  apiGroup: rbac.authorization.k8s.io<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/service.yaml</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: kok-operator<br>  namespace: kok-system<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>spec:<br>  type: ClusterIP<br>  ports:<br>    - port: 80<br>      targetPort: http<br>      protocol: TCP<br>      name: http<br>  selector:<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/deployment.yaml</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: kok-operator<br>  namespace: kok-system<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app.kubernetes.io/name: kok-operator<br>      app.kubernetes.io/instance: kok-operator<br>  template:<br>    metadata:<br>      labels:<br>        app.kubernetes.io/name: kok-operator<br>        app.kubernetes.io/instance: kok-operator<br>    spec:<br>      serviceAccountName: kok-operator<br>      securityContext:<br>        &#123;&#125;<br>      containers:<br>        - name: kok-operator<br>          securityContext:<br>            &#123;&#125;<br>          image: &quot;docker.io/wtxue/kok-operator:v0.2.0-dev2&quot;<br>          imagePullPolicy: Always<br>          command:<br>            - kok-operator<br>          args:<br>            - ctrl<br>            - -v<br>            - &quot;4&quot;<br>            - --images-prefix=docker.io/wtxue<br>          ports:<br>            - name: http<br>              containerPort: 8090<br>              protocol: TCP<br><span class="hljs-meta">#</span><span class="bash">          livenessProbe:</span><br><span class="hljs-meta">#</span><span class="bash">            httpGet:</span><br><span class="hljs-meta">#</span><span class="bash">              path: /</span><br><span class="hljs-meta">#</span><span class="bash">              port: http</span><br><span class="hljs-meta">#</span><span class="bash">          readinessProbe:</span><br><span class="hljs-meta">#</span><span class="bash">            httpGet:</span><br><span class="hljs-meta">#</span><span class="bash">              path: /</span><br><span class="hljs-meta">#</span><span class="bash">              port: http</span><br>          resources:<br>            &#123;&#125;<br><br>NOTES:<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>operator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/03/K8s-Operator-club/"/>
    <url>/2021/11/03/K8s-Operator-club/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Cluster Operator</p></li><li><p>Node Operator</p></li><li><p>节点故障自愈</p></li></ul><p>物理机硬件存在一定的故障概率，随着集群节点规模的增加，集群中会常态出现故障节点，如果不及时修复上线，这部分物理机的资源将会被闲置。</p><p>为解决这一问题，设计了一套故障发现、隔离、修复的闭环自愈系统</p><p>如下图所示，故障发现方面，采取 Agent 上报和监控系统主动探测相结合的方式，保证了故障发现的实时性和可靠性（Agent 上报实时性比较好，监控系统主动探测可以覆盖 Agent 异常未上报场景）。故障信息统一存储于事件中心，关注集群故障的组件或系统都可以订阅事件中心事件拿到这些故障信息</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202111031602490.jpeg" alt="node_err1"></p><p>节点故障自愈系统会根据故障类型创建不同的维修流程，例如：硬件维系流程、系统重装流程等。维修流程中优先会隔离故障节点（暂停节点调度），然后将节点上 Pod 打上待迁移标签来通知 PaaS 或 MigrateController 进行 Pod 迁移，完成这些前置操作后，会尝试恢复节点（硬件维修、重装操作系统等），修复成功的节点会重新开启调度，长期未自动修复的节点由人工介入排查处理</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202111031604542.jpeg" alt="node_err2"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/03/%E5%8D%95%E9%9B%86%E7%BE%A4%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
    <url>/2021/11/03/%E5%8D%95%E9%9B%86%E7%BE%A4%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="大规模集群的挑战"><a href="#大规模集群的挑战" class="headerlink" title="大规模集群的挑战"></a>大规模集群的挑战</h2><ul><li>随着集群规模增大，故障的爆炸半径也将扩大</li><li>用户大量的 list 操作，包括 list all，list by namespace，list by label 等，均会随着集群的规模增大而开销变大。这些合理或者不合理的 list 请求，将让 apiserver 的内存在短时间内快速增长，出现 OOM 异常，无法对外响应请求。此外，业务方的 list 请求也会因为 apiserver 无法处理请求而不断重试，造成 apiserver 重启后因过载不可恢复服务能力，影响整个集群的可用性</li><li>大量 List 请求透过 apiserver 直接访问 etcd 服务，也会让 etcd 实例的内存剧增而出现 OOM 异常。</li><li>随着业务量的增长，特别是离线任务的增多，create/update/delete 等请求的数量也迅速增加，导致客户端请求 apiserver 的 RT 极速上升，进而使得调度器和一些控制器因为选主请求超时而丢主。</li><li> 业务量增长将加剧 etcd 由于 compact 等操作自身存在的性能问题，而使 etcd 的 P99 RT 暴涨，进而导致 apiserver 无法响应请求。</li><li>集群中的控制器服务，包括 Kubernetes 社区自带的控制器例如 service controller，cronjob controller 以及业务的 operator 等，自身存在的性能问题都将在大规模集群面前被进一步放大。这些问题将进一步传导到线上业务，导致业务受损。</li></ul><h2 id="大规模集群的收益"><a href="#大规模集群的收益" class="headerlink" title="大规模集群的收益"></a>大规模集群的收益</h2><ul><li>为运行大型服务提供更为便利的基础设施 ，便于应对业务扩容时大幅飙升的资源需求，可以通过扩展现有集群而不是新建其它小集群来应对业务的增长。同时集群管理者可以管理更少的集群，并且以此来简化基础架构管理 </li><li>为大数据和机器学习的离线计算任务提供更多的资源，为分时复用/分时调度等调度手段提供更大的施展空间，让离线的计算任务在在线业务的低峰期时可以使用更多的资源进行计算，享受极致弹性和极速交付</li><li>在更大的集群中可以通过更加丰富的编排调度手段来更为有效地提升集群整体的资源利用率</li></ul><h2 id="Kube-Apiserver"><a href="#Kube-Apiserver" class="headerlink" title="Kube-Apiserver"></a>Kube-Apiserver</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/202111031136347.png" alt="apiserver性能优化"></p><h2 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a>Etcd</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/01/kube-apiserver%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2021/11/01/kube-apiserver%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>Kube-apiserver性能优化</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/01/Etcd%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2021/11/01/Etcd%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>Etcd性能测试</p><p>写入测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">./benchmark --endpoints=&quot;https://183.131.145.84:2379,https://183.131.145.85:2379,https://61.153.100.147:2379&quot; \<br>--cacert=/etc/kubernetes/pki/etcd/ca.crt \<br>--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt \<br>--key=/etc/kubernetes/pki/etcd/healthcheck-client.key \<br>--target-leader --conns=100 --clients=1000 put --key-size=8 --sequential-keys --total=100000 --val-size=256<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">Summary:<br>  Total:4.7816 secs.<br>  Slowest:0.1165 secs.<br>  Fastest:0.0084 secs.<br>  Average:0.0475 secs.<br>  Stddev:0.0097 secs.<br>  Requests/sec:20913.3304<br><br>Response time histogram:<br>  0.0084 [1]|<br>  0.0192 [215]|<br>  0.0300 [2183]|∎∎<br>  0.0408 [23213]|∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎<br>  0.0516 [40597]|∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎<br>  0.0624 [27652]|∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎<br>  0.0732 [5322]|∎∎∎∎∎<br>  0.0841 [720]|<br>  0.0949 [81]|<br>  0.1057 [13]|<br>  0.1165 [3]|<br><br>Latency distribution:<br><span class="hljs-meta">  10%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0365 secs.</span><br><span class="hljs-meta">  25%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0407 secs.</span><br><span class="hljs-meta">  50%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0464 secs.</span><br><span class="hljs-meta">  75%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0544 secs.</span><br><span class="hljs-meta">  90%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0600 secs.</span><br><span class="hljs-meta">  95%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0635 secs.</span><br><span class="hljs-meta">  99%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0722 secs.</span><br>  99.9% in 0.0838 secs.<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">./benchmark --endpoints=&quot;https://183.131.145.84:2379,https://183.131.145.85:2379,https://61.153.100.147:2379&quot; \<br>--cacert=/etc/kubernetes/pki/etcd/ca.crt \<br>--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt \<br>--key=/etc/kubernetes/pki/etcd/healthcheck-client.key \<br>--conns=100 --clients=1000  range foo --consistency=s --total=100000<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">Summary:<br>  Total:1.3914 secs.<br>  Slowest:0.1184 secs.<br>  Fastest:0.0004 secs.<br>  Average:0.0117 secs.<br>  Stddev:0.0113 secs.<br>  Requests/sec:71869.4758<br><br>Response time histogram:<br>  0.0004 [1]|<br>  0.0122 [65176]|∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎<br>  0.0240 [24403]|∎∎∎∎∎∎∎∎∎∎∎∎∎∎<br>  0.0358 [5816]|∎∎∎<br>  0.0476 [2880]|∎<br>  0.0594 [964]|<br>  0.0712 [404]|<br>  0.0830 [225]|<br>  0.0948 [106]|<br>  0.1066 [3]|<br>  0.1184 [22]|<br><br>Latency distribution:<br><span class="hljs-meta">  10%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0022 secs.</span><br><span class="hljs-meta">  25%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0041 secs.</span><br><span class="hljs-meta">  50%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0084 secs.</span><br><span class="hljs-meta">  75%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0151 secs.</span><br><span class="hljs-meta">  90%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0245 secs.</span><br><span class="hljs-meta">  95%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0346 secs.</span><br><span class="hljs-meta">  99%</span><span class="bash"> <span class="hljs-keyword">in</span> 0.0551 secs.</span><br>  99.9% in 0.0840 secs.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes万级规模高可用</title>
    <link href="/2021/10/27/kubernetes%E4%B8%87%E7%BA%A7%E8%A7%84%E6%A8%A1%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <url>/2021/10/27/kubernetes%E4%B8%87%E7%BA%A7%E8%A7%84%E6%A8%A1%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>当集群节点超过5000时</p><p><img src="https://gitee.com/eightzero/pico/raw/master/8cf1d986cfb040998d715ded91f56e2f.png" alt="8cf1d986cfb040998d715ded91f56e2f"></p><p>问题</p><ul><li>etcd 出现大量的读写延迟。</li><li>kube-apiserver 查询 pods/nodes 延时很高，甚至导致 etcd oom。</li><li>控制器无法及时感知数据变化，如出现 watch 数据延迟。</li></ul><p>解决方案：</p><p>100 节点增长到 4 千节点：</p><ul><li>从 apiserver 客户端的角度优先访问本地 cache，在客户端去做负载均衡</li><li>apiserver 服务端主要做了 watch 优化和 cache 索引优化</li><li>在 etcd 内核上利用并发读提升单 etcd 集群读处理能力，基于 hashmap 的 freelist 管理新算法提高 etcd 存储上限，基于 raft learner 技术来提高多备能力</li></ul><p>4 千节点增长到 8 千节点：</p><ul><li>qps 限流管理和容量管理优化</li><li>etcd 单资源对象存储拆分</li><li>组件规范全生命周期落地通过客户端的规范约束降低对 apiserver 的压力和以及穿透到 etcd 的压力等等</li></ul><p> 8 千节点增长到上万节点：</p><ul><li>etcdcompact 算法优化</li><li>etcd 单节点多 multiboltdb 的架构优化</li><li>apiserver 的服务端数据压缩</li><li>通过组件治理降低 etcd 写放大等</li><li>同时开始打造常态化的压测服务能力</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes资源利用率提升</title>
    <link href="/2021/10/26/kubernetes-HPA/"/>
    <url>/2021/10/26/kubernetes-HPA/</url>
    
    <content type="html"><![CDATA[<h2 id="带宽，CPU资源监控"><a href="#带宽，CPU资源监控" class="headerlink" title="带宽，CPU资源监控"></a>带宽，CPU资源监控</h2><p>度量前后使用率，对业务的影响</p><p>工具：</p><ul><li>Linux 实时性能测试工具——Cyclictest</li></ul><p>Prometheus Adapter，接入现有的监控系统</p><p>ebpf</p><h3 id="MetricServer"><a href="#MetricServer" class="headerlink" title="MetricServer"></a>MetricServer</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="自动扩缩容HPA"><a href="#自动扩缩容HPA" class="headerlink" title="自动扩缩容HPA"></a>自动扩缩容HPA</h2><ul><li><p>HPA(Horizontal Pod Autoscaler)：维持应用的期望状态（通过调节应用副本数）</p><p>request和limit</p></li></ul><p>所有容器都应该设置 request</p><p>request 的值并不是指给容器实际分配的资源大小，它仅仅是给调度器看的，调度器会 “观察” 每个节点可以用于分配的资源有多少，也知道每个节点已经被分配了多少资源。被分配资源的大小就是节点上所有 Pod 中定义的容器 request 之和，它可以计算出节点剩余多少资源可以被分配(可分配资源减去已分配的 request 之和)。如果发现节点剩余可分配资源大小比当前要被调度的 Pod 的 reuqest 还小，那么就不会考虑调度到这个节点，反之，才可能调度。所以，如果不配置 request，那么调度器就不能知道节点大概被分配了多少资源出去，调度器得不到准确信息，也就无法做出合理的调度决策，很容易造成调度不合理，有些节点可能很闲，而有些节点可能很忙，甚至 NotReady。</p><p>所以，建议是给所有容器都设置 request，让调度器感知节点有多少资源被分配了，以便做出合理的调度决策，让集群节点的资源能够被合理的分配使用，避免陷入资源分配不均导致一些意外发生。</p><p>可以使用 LimitRange 来设置 namespace 的默认 request 与 limit 值，同时它也可以用来限制最小和最大的 request 与 limit</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">LimitRange</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mem-limit-range</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">limits:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">512Mi</span><br>  <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>    <span class="hljs-attr">defaultRequest:</span><br>      <span class="hljs-attr">memory:</span> <span class="hljs-string">256Mi</span><br>  <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">Container</span><br></code></pre></td></tr></table></figure><ul><li><p>VPA(Vertival Pod Autoscaler)：预估应用的实际使用资源量</p></li><li><p>调度：驱动应用的期望状态到资源的期望状态的引擎</p></li><li><p>CA(Cluster Autoscaler)：维持资源的期望状态（通过调节节点数）</p></li></ul><h2 id="空闲的资源做什么？"><a href="#空闲的资源做什么？" class="headerlink" title="空闲的资源做什么？"></a>空闲的资源做什么？</h2><p>在线离线混合部署</p><p>批处理任务Volcano</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.qikqiak.com/post/k8s-hpa-usage/">https://www.qikqiak.com/post/k8s-hpa-usage/</a></li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试环境搭建</title>
    <link href="/2021/10/12/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/12/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<ul><li><p>kubernetes master + 2 node （使用cilium替代kube-proxy）</p></li><li><p>helm3</p></li><li><p>cilium+hubble</p></li><li><p>切换superedge</p></li><li><p>安装ISTIO</p></li><li><p>安装Karmada</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init --pod-network-cidr=10.218.0.0/16 --skip-phases=addon/kube-proxy<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init --kubernetes-version=1.18.20  --image-repository registry.aliyuncs.com/google_containers  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.218.0.0/16   --skip-phases=addon/kube-proxy<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm install cilium cilium/cilium --version 1.10.4 \<br>--namespace kube-system \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">kubeProxyReplacement</span>=strict \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServiceHost</span>=192.168.92.132 \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServicePort</span>=6443 \<br>--<span class="hljs-builtin-name">set</span> hubble.relay.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span> \<br>--<span class="hljs-builtin-name">set</span> hubble.ui.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm install cilium cilium/cilium --version 1.10.4 \<br>--namespace kube-system \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">kubeProxyReplacement</span>=strict \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServiceHost</span>=183.131.145.82 \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServicePort</span>=6443 \<br>--<span class="hljs-builtin-name">set</span> hubble.relay.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span> \<br>--<span class="hljs-builtin-name">set</span> hubble.ui.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>将 Hubble UI 改为 NodePort 访问</li></ul><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab">kubectl -n kube-<span class="hljs-built_in">system</span> patch svc hubble-ui -p <span class="hljs-string">&#x27;&#123;&quot;</span>spec<span class="hljs-string">&quot;: &#123;&quot;</span><span class="hljs-built_in">type</span><span class="hljs-string">&quot;: &quot;</span>NodePort<span class="hljs-string">&quot;&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">kubectl</span> -n kube-system <span class="hljs-meta">get</span> <span class="hljs-keyword">svc</span> hubble-ui<br></code></pre></td></tr></table></figure><p>升级内核</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://mirrors.nju.edu.cn/elrepo/kernel/el<span class="hljs-number">7</span>/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/RPMS/kernel-lt-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">151</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><br><span class="hljs-attribute">rpm</span> -ivh kernel-lt-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">151</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><br><span class="hljs-attribute">cat</span> /boot/grub<span class="hljs-number">2</span>/grub.cfg | grep menuentry<br><br><span class="hljs-attribute">grub2</span>-set-default &#x27;CentOS Linux (<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">151</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>) <span class="hljs-number">7</span> (Core)&#x27;<br><br><span class="hljs-attribute">grub2</span>-editenv list<br><br><span class="hljs-attribute">grub2</span>-mkconfig -o /boot/grub<span class="hljs-number">2</span>/grub.cfg<br><br><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><p>遇到问题</p><p><img src="https://gitee.com/eightzero/pico/raw/master/image-20211012155844618.png" alt="image-20211012155844618"></p><ul><li><p>Cilium pod CrashLoopBackOff</p><p>内核最低支持4.8.0</p><p><img src="https://gitee.com/eightzero/pico/raw/master/image-20211012160038293.png" alt="image-20211012160038293"></p></li><li><p>coredns ContainerCreating</p></li></ul><h2 id="多公网集群搭建"><a href="#多公网集群搭建" class="headerlink" title="多公网集群搭建"></a>多公网集群搭建</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm init <span class="hljs-attribute">--kubernetes-version</span>=1.18.20  <span class="hljs-attribute">--apiserver-advertise-address</span>=机器Ip  --image-repository registry.aliyuncs.com/google_containers  <span class="hljs-attribute">--service-cidr</span>=10.10.0.0/16 <span class="hljs-attribute">--pod-network-cidr</span>=10.122.0.0/16<br></code></pre></td></tr></table></figure><p>#在kubeadm-config.yml设置好镜像源，版本，集群网段，–apiserver-advertise-address为外网ip 等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; kubeadm-init.yaml<br>apiVersion: kubeadm.k8s.io/v1beta2<br>bootstrapTokens:<br>- groups:<br>  - system:bootstrappers:kubeadm:default-node-token<br>  token: abcdef.66wcf1rc5wk6637f            ## token 建议重新生成别用默认的<br>  ttl: 24h0m0s<br>  usages:<br>  - signing<br>  - authentication<br>kind: InitConfiguration<br>localAPIEndpoint:<br>  advertiseAddress: &quot;IPADDRESS&quot;     # 公网IP地址<br>  bindPort: 6443            # API 端口<br>nodeRegistration:<br>  criSocket: /var/run/dockershim.sock<br>  name: master001<br>  taints:<br>  - effect: NoSchedule<br>    key: node-role.kubernetes.io/master<br>---<br>apiServer:<br>  extraArgs:<br>    advertise-address: &quot;IPADDRESS&quot;    ## 公网机器互联需要<br>  certSANs:<br>  - &quot;IPADDRESS&quot;<br>  timeoutForControlPlane: 10m0s<br>apiVersion: kubeadm.k8s.io/v1beta2<br>certificatesDir: /etc/kubernetes/pki<br>clusterName: kubernetes<br>controllerManager: &#123;&#125;<br>dns:<br>  type: CoreDNS<br>etcd:<br>  local:<br>    dataDir: /var/lib/etcd<br>imageRepository: registry.aliyuncs.com/google_containers       # image的仓库源<br>kind: ClusterConfiguration<br>kubernetesVersion: v1.16.0<br>networking:<br>  dnsDomain: cluster.local<br>  serviceSubnet: 10.96.0.0/12<br>  podSubnet: 192.168.0.0/16<br>scheduler: &#123;&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>以上配置文件中的IPADDRESS作为占位符,可以通过以下命令替换成<strong>公网IP</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip=$(curl -s -4 ip.sb)<br>sed -i &quot;s/IPADDRESS/$ip/g&quot; kubeadm-init.yaml<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init phase preflight --config myKubeadmConfig.yaml  --ignore-preflight-errors NumCPU<br>kubeadm init phase certs all --config myKubeadmConfig.yaml<br>kubeadm init phase kubeconfig all --config myKubeadmConfig.yaml<br>kubeadm init phase kubelet-start --config myKubeadmConfig.yaml<br>kubeadm init phase control-plane all --config myKubeadmConfig.yaml<br>kubeadm init phase etcd local --config myKubeadmConfig.yaml<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>etcd.yaml<br><span class="hljs-comment">#把--listen-client-urls 和 --listen-peer-urls 都改成0.0.0.0:xxx</span><br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">kubeadm</span> <span class="hljs-comment">init</span> --<span class="hljs-comment">skip</span><span class="hljs-literal">-</span><span class="hljs-comment">phases=preflight</span><span class="hljs-string">,</span><span class="hljs-comment">certs</span><span class="hljs-string">,</span><span class="hljs-comment">kubeconfig</span><span class="hljs-string">,</span><span class="hljs-comment">kubelet</span><span class="hljs-literal">-</span><span class="hljs-comment">start</span><span class="hljs-string">,</span><span class="hljs-comment">control</span><span class="hljs-literal">-</span><span class="hljs-comment">plane</span><span class="hljs-string">,</span><span class="hljs-comment">etcd</span><span class="hljs-string">,</span><span class="hljs-comment">addon/kube</span><span class="hljs-literal">-</span><span class="hljs-comment">proxy</span> --<span class="hljs-comment">config</span> <span class="hljs-comment">myKubeadmConfig</span><span class="hljs-string">.</span><span class="hljs-comment">yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm join 172.25.156.55:6443 --token y9ohc0.77zro9ruyyub4t0w \<br>    --discovery-token-ca-cert-hash sha256:b84e69459da3ee0e1c26a4b8ffa4f778040bd93511a0465d83596edef7bcb56a<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">iptables -t nat -<span class="hljs-keyword">A</span> OUTPUT -d <span class="hljs-number">172.25.156.55</span> -j DNAT --to-destination <span class="hljs-number">120.79.141.184</span><br></code></pre></td></tr></table></figure><h2 id="高可用实验环境搭建"><a href="#高可用实验环境搭建" class="headerlink" title="高可用实验环境搭建"></a>高可用实验环境搭建</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">sudo</span> yum install -y yum-utils \<br>  device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> \</span><br>  lvm2<br></code></pre></td></tr></table></figure><p>设置国内仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo yum-config-manager \<br>    --add-repo \<br>    http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br></code></pre></td></tr></table></figure><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><p>配置 Docker 守护程序，尤其是使用 systemd 来管理容器的 cgroup。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir /etc/docker<br>cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json<br>&#123;<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;log-driver&quot;: &quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;<br>    &quot;max-size&quot;: &quot;100m&quot;<br>  &#125;,<br>  &quot;storage-driver&quot;: &quot;overlay2&quot;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo systemctl <span class="hljs-keyword">start</span> docker &amp;&amp; systemctl <span class="hljs-keyword">enable</span> docker<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo systemctl <span class="hljs-keyword">start</span> kubelet &amp;&amp; systemctl <span class="hljs-keyword">enable</span> kubelet<br></code></pre></td></tr></table></figure><h3 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><p>节点之中不可以有重复的主机名、MAC 地址或 product_uuid</p><h4 id="允许-iptables-检查桥接流量"><a href="#允许-iptables-检查桥接流量" class="headerlink" title="允许 iptables 检查桥接流量"></a>允许 iptables 检查桥接流量</h4><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。</p><p>为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br>cat &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sudo sysctl --system<br></code></pre></td></tr></table></figure><h4 id="开启包转发"><a href="#开启包转发" class="headerlink" title="开启包转发"></a>开启包转发</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vi /etc/sysctl<span class="hljs-selector-class">.conf</span><br>添加：<br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.ip_forward</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="开放指定端口"><a href="#开放指定端口" class="headerlink" title="开放指定端口"></a>开放指定端口</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=6443/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=2379</span><span class="hljs-literal">-</span><span class="hljs-comment">2380/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=10250/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=10251/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=10252/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=8443/tcp</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart firewalld</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--list-ports</span><br></code></pre></td></tr></table></figure><h3 id="控制平面节点"><a href="#控制平面节点" class="headerlink" title="控制平面节点"></a>控制平面节点</h3><table><thead><tr><th>协议</th><th>方向</th><th>端口范围</th><th>作用</th><th>使用者</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>6443</td><td>Kubernetes API 服务器</td><td>所有组件</td></tr><tr><td>TCP</td><td>入站</td><td>2379-2380</td><td>etcd 服务器客户端 API</td><td>kube-apiserver, etcd</td></tr><tr><td>TCP</td><td>入站</td><td>10250</td><td>Kubelet API</td><td>kubelet 自身、控制平面组件</td></tr><tr><td>TCP</td><td>入站</td><td>10251</td><td>kube-scheduler</td><td>kube-scheduler 自身</td></tr><tr><td>TCP</td><td>入站</td><td>10252</td><td>kube-controller-manager</td><td>kube-controller-manager 自身</td></tr></tbody></table><h3 id="工作节点"><a href="#工作节点" class="headerlink" title="工作节点"></a>工作节点</h3><table><thead><tr><th>协议</th><th>方向</th><th>端口范围</th><th>作用</th><th>使用者</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>10250</td><td>Kubelet API</td><td>kubelet 自身、控制平面组件</td></tr><tr><td>TCP</td><td>入站</td><td>30000-32767</td><td>NodePort 服务†</td><td>所有组件</td></tr></tbody></table><h4 id="设置内核、K8S的yum源"><a href="#设置内核、K8S的yum源" class="headerlink" title="设置内核、K8S的yum源"></a>设置内核、K8S的yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><br>sudo setenforce 0<br>sudo sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config<br><br>sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes<br><br>sudo systemctl <span class="hljs-built_in">enable</span> --now kubelet<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#关闭swap</span><br>swapoff -a <br>sed -i <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></figure><h4 id="查找指定版本"><a href="#查找指定版本" class="headerlink" title="查找指定版本"></a>查找指定版本</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yum list kubelet  --showduplicates <span class="hljs-string">| sort -r</span><br></code></pre></td></tr></table></figure><h4 id="安装kubernetes1-18-20"><a href="#安装kubernetes1-18-20" class="headerlink" title="安装kubernetes1.18.20"></a>安装kubernetes1.18.20</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> yum install -y kubeadm-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">20</span>-<span class="hljs-number">0</span> kubectl-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">20</span>-<span class="hljs-number">0</span> kubelet-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">20</span>-<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h4><p>Master </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">! /etc/keepalived/keepalived.conf<br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>    router_id LVS_DEVEL<br>&#125;<br>vrrp_script check_apiserver &#123;<br>  script <span class="hljs-string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span><br>  interval 3<br>  weight -2<br>  fall 10<br>  rise 2<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    interface em1.101@em1<br>    virtual_router_id 51<br>    priority 100<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass keepalive<br>    &#125;<br>    virtual_ipaddress &#123;<br>        183.131.145.10<br>    &#125;<br>    track_script &#123;<br>        check_apiserver<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">! /etc/keepalived/keepalived.conf<br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>    router_id LVS_DEVEL<br>&#125;<br>vrrp_script check_apiserver &#123;<br>  script <span class="hljs-string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span><br>  interval 3<br>  weight -2<br>  fall 10<br>  rise 2<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state BACKUP<br>    interface <span class="hljs-variable">$&#123;INTERFACE&#125;</span><br>    virtual_router_id 51<br>    priority 50<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass keepalive<br>    &#125;<br>    virtual_ipaddress &#123;<br>        183.131.145.10<br>    &#125;<br>    track_script &#123;<br>        check_apiserver<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>/etc/keepalived/check_apiserver.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#!/bin/sh</span><br><br><span class="hljs-function"><span class="hljs-title">errorExit</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*** $*&quot;</span> 1&gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br>curl --silent --max-time 2 --insecure https://localhost:8443/ -o /dev/null || errorExit <span class="hljs-string">&quot;Error GET https://localhost:8443/&quot;</span><br><span class="hljs-keyword">if</span> ip addr | grep -q 183.131.145.10; <span class="hljs-keyword">then</span><br>    curl --silent --max-time 2 --insecure https://183.131.145.10:8443/ -o /dev/null || errorExit <span class="hljs-string">&quot;Error GET https://183.131.145.10:8443/&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>haproxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># /etc/haproxy/haproxy.cfg</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Global settings</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>global<br>    <span class="hljs-built_in">log</span> /dev/<span class="hljs-built_in">log</span> local0<br>    <span class="hljs-built_in">log</span> /dev/<span class="hljs-built_in">log</span> local1 notice<br>    daemon<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span><br><span class="hljs-comment"># use if not designated in their block</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>defaults<br>    mode                    http<br>    <span class="hljs-built_in">log</span>                     global<br>    option                  httplog<br>    option                  dontlognull<br>    option http-server-close<br>    option forwardfor       except 127.0.0.0/8<br>    option                  redispatch<br>    retries                 1<br>    timeout http-request    10s<br>    timeout queue           20s<br>    timeout connect         5s<br>    timeout client          20s<br>    timeout server          20s<br>    timeout http-keep-alive 10s<br>    timeout check           10s<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># apiserver frontend which proxys to the control plane nodes</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>frontend apiserver<br>    <span class="hljs-built_in">bind</span> *:8443<br>    mode tcp<br>    option tcplog<br>    default_backend apiserver<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># round robin balancing for apiserver</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>backend apiserver<br>    option httpchk GET /healthz<br>    http-check expect status 200<br>    mode tcp<br>    option ssl-hello-chk<br>    balance     roundrobin<br>        server master01 183.131.145.85:6443 check<br>        server master02 183.131.145.84:6443 check<br>        server master03 61.153.100.147:6443 check<br>        <span class="hljs-comment"># [...]</span><br></code></pre></td></tr></table></figure><p>keepalive static pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">keepalived</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">osixia/keepalived:2.0.17</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">keepalived</span><br>    <span class="hljs-attr">resources:</span> &#123;&#125;<br>    <span class="hljs-attr">securityContext:</span><br>      <span class="hljs-attr">capabilities:</span><br>        <span class="hljs-attr">add:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_ADMIN</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_BROADCAST</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_RAW</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/etc/keepalived/keepalived.conf</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/keepalived/check_apiserver.sh</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">check</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/keepalived/keepalived.conf</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/keepalived/check_apiserver.sh</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">check</span><br><span class="hljs-attr">status:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>haproxy</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">haproxy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">haproxy:2.1.4</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">haproxy</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">8</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8443</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/etc/haproxy/haproxy.cfg</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">haproxyconf</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/haproxy/haproxy.cfg</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">FileOrCreate</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">haproxyconf</span><br><span class="hljs-attr">status:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>/etc/kubernetes/manifests/kube-vip.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-vip</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/kube-vip</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">start</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/vip.yaml</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;plndr/kube-vip:0.3.1&#x27;</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kube-vip</span><br>    <span class="hljs-attr">resources:</span> &#123;&#125;<br>    <span class="hljs-attr">securityContext:</span><br>      <span class="hljs-attr">capabilities:</span><br>        <span class="hljs-attr">add:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_ADMIN</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">SYS_TIME</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/vip.yaml</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/kube-vip/config.yaml</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br><span class="hljs-attr">status:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sudo docker run <span class="hljs-params">--network</span> host <span class="hljs-params">--rm</span> plndr/kube-vip<span class="hljs-function">:v0.3.7</span> manifest pod \<br><span class="hljs-params">--interface</span> em1.101 \<br><span class="hljs-params">--vip</span> 183.131.145.82 \<br><span class="hljs-params">--controlplane</span> \<br><span class="hljs-params">--services</span> \<br><span class="hljs-params">--arp</span> \<br><span class="hljs-params">--leaderElection</span> | sudo tee <span class="hljs-string">/etc/kubernetes/manifests/kube-vip.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo kubeadm init \<br>    --kubernetes-version=1.18.20 \<br>    --control-plane-endpoint=183.131.145.82 \<br>    --image-repository=registry.aliyuncs.com/google_containers \<br>    --pod-network-cidr=10.218.0.0/16 \<br>    --skip-phases=addon/kube-proxy \<br>    --upload-certs<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">sudo</span> <span class="hljs-comment">kubeadm</span> <span class="hljs-comment">init</span> --<span class="hljs-comment">config</span> <span class="hljs-comment">kubeadm</span><span class="hljs-literal">-</span><span class="hljs-comment">config</span><span class="hljs-string">.</span><span class="hljs-comment">yml</span> --<span class="hljs-comment">upload</span><span class="hljs-literal">-</span><span class="hljs-comment">certs</span> --<span class="hljs-comment">skip</span><span class="hljs-literal">-</span><span class="hljs-comment">phases=addon/kube</span><span class="hljs-literal">-</span><span class="hljs-comment">proxy</span><br></code></pre></td></tr></table></figure><p>SUCCESS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">Your Kubernetes control-plane has initialized successfully!<br><br>To start using your cluster, you need to run the following as a regular user:<br><br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>You should now deploy a pod network to the cluster.<br>Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:<br>  https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>You can now join any number of the control-plane node running the following command on each as root:<br><br>  kubeadm join 183.131.145.82:6443 --token hxduyw.e7pm2u32wcffr652 \<br>    --discovery-token-ca-cert-hash sha256:53aea6bf8eeefca7a672021c80e203da459f1655a43127ab557ed5a7d3275eec \<br>    --control-plane --certificate-key 273b46dcea4ecff30ebed45812b99ecb7d02cc493a88ea60bb547e95c14a4ff8<br><br>Please note that the certificate-key gives access to cluster sensitive data, keep it secret!<br>As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use<br>&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.<br><br>Then you can join any number of worker nodes by running the following on each as root:<br><br>kubeadm join 183.131.145.82:6443 --token hxduyw.e7pm2u32wcffr652 \<br>    --discovery-token-ca-cert-hash sha256:53aea6bf8eeefca7a672021c80e203da459f1655a43127ab557ed5a7d3275eec<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">This node has joined <span class="hljs-keyword">the</span> cluster <span class="hljs-keyword">and</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">new</span> control plane instance was created:<br><br>* Certificate signing request was sent <span class="hljs-built_in">to</span> apiserver <span class="hljs-keyword">and</span> approval was received.<br>* The Kubelet was informed <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">new</span> secure connection details.<br>* Control plane (master) label <span class="hljs-keyword">and</span> taint were applied <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">new</span> node.<br>* The Kubernetes control plane instances scaled up.<br>* A <span class="hljs-built_in">new</span> etcd member was added <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">local</span>/stacked etcd cluster.<br><br>To <span class="hljs-built_in">start</span> administering your cluster <span class="hljs-built_in">from</span> this node, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br><br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>Run <span class="hljs-string">&#x27;kubectl get nodes&#x27;</span> <span class="hljs-built_in">to</span> see this node join <span class="hljs-keyword">the</span> cluster.<br></code></pre></td></tr></table></figure><p>刚才加入集群的 master 节点，不要忘记将 <code>kube-vip</code> 的静态 pod 进行创建，这样才能确保集群拥有了 <code>HA</code> 属性 。执行上面的 kube-vip 部署步骤</p><p>其他节点部署kube-vip static pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run --network host --rm plndr/kube-vip:v0.3.7 manifest pod \<br>--interface bond0.101 \<br>--vip 183.131.145.82 \<br>--controlplane \<br>--services \<br>--arp \<br>--leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml<br></code></pre></td></tr></table></figure><p>ERROR1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">664374</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">764481</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">864582</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">964685</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span>.<span class="hljs-number">064796</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span>.<span class="hljs-number">164907</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span>.<span class="hljs-number">265034</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br></code></pre></td></tr></table></figure><p>ERROR2</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">server</span>: x509: certificate signed <span class="hljs-keyword">by</span> <span class="hljs-type">unknown</span> authority (possibly because <span class="hljs-keyword">of</span> &quot;crypto/rsa: verification error&quot; <span class="hljs-keyword">while</span> trying <span class="hljs-keyword">to</span> verify candidate authority certificate &quot;kubernetes&quot;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>多集群管理Karmada</title>
    <link href="/2021/10/11/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Karmada/"/>
    <url>/2021/10/11/%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86Karmada/</url>
    
    <content type="html"><![CDATA[<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/Karmada_arch.png" alt="Karmada_arch"></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDN容器化改造</title>
    <link href="/2021/10/09/CDN%E5%AE%B9%E5%99%A8%E5%8C%96%E6%94%B9%E9%80%A0/"/>
    <url>/2021/10/09/CDN%E5%AE%B9%E5%99%A8%E5%8C%96%E6%94%B9%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="传统架构"><a href="#传统架构" class="headerlink" title="传统架构"></a>传统架构</h2><h2 id="业务痛点"><a href="#业务痛点" class="headerlink" title="业务痛点"></a>业务痛点</h2><ul><li>稳定性：组件通信，上下线依赖IP渲染（salt模块配置IP），渲染方式生效时间长，维护成本高，新增机器，减少机器成本高</li><li>成本：CPU使用率低（动态加速会高点），带宽峰值，低峰值资源利用率，小流量节点也需要额外管控策略</li><li>研发效率：每个组件需要自己实现容灾，监控，功能不可复用，为适配异构资源存在多套架构</li></ul><p>特点</p><ul><li><p>全球多节点数据中心，每个机房规模较小</p></li><li><p>边缘节点的网络是不可靠的，机房割接、网络异常、网络攻击是常有的事情，网络异常下就面临业务容灾、边缘自治等等的技术挑战</p></li><li></li><li><p>调度</p><ul><li>流量型的调度</li><li>资源编排的调度</li></ul></li></ul><h3 id="CDN相对于中心云所面临的技术挑战"><a href="#CDN相对于中心云所面临的技术挑战" class="headerlink" title="CDN相对于中心云所面临的技术挑战"></a>CDN相对于中心云所面临的技术挑战</h3><ul><li><strong>在机房分布方面，</strong>CDN的机房是全球分布的，这对于机房建设挑战是非常大的，比如是边远地区的机房，维修周期是以周为单位的。</li><li><strong>机房规模方面，</strong>CDN每个机房规模是比较小的，相比云中心机房上万甚至百万机器的规模，边缘机房是非常之少（几十/几百台），这对于业务的容灾保证是比较大考验：如何在有限机器下保证冗余和异常迁移。</li><li><strong>流量调度方面</strong>更不需要说了，调度能力是CDN核心技术，如何保证业务质量、成本和水位，一直都是CDN的技术挑战。</li><li><strong>运维管理方面</strong>，相比于1～3中心，边缘成千上万节点的管理，运维成本是几何倍数增长的。</li><li><strong>弹性方面</strong>，因为单机房资源少，所以在业务弹性的时候往往要弹性到其他节点上，这种扩节点的弹性，对于业务本身也需要提供很多支持，比如跨节点数据同步、服务发现等等。</li><li><strong>网络方面</strong>：边缘节点的网络是不可靠的，机房割接、网络异常、网络攻击是常有的事情，网络异常下就面临业务容灾、边缘自治等等的技术挑战。</li><li><strong>存储方面</strong>：在成本和节点规模的限制下，目前边缘节点其实并没办法提供完全的数据持久化能力，那么边缘节点数据如何和云中心进行同步，就是一个关键问题，哪些数据可以放在边缘，哪些数据需要传回并存储在中心。</li><li><strong>资源异构层面</strong>：CDN导致机型众多，机器能力不一致。另外也提出过CDN on Anywhere的目标，包括MEC节点，合作节点等等，节点环境的差异巨大，对安全和管理都是比较大的挑战。</li></ul><h3 id="推进CDN容器化"><a href="#推进CDN容器化" class="headerlink" title="推进CDN容器化"></a>推进CDN容器化</h3><p><strong>第一步是平台升级</strong></p><p>CDN容器化主要采用的Kubernetes来进行容器编排，ServiceMesh进行组件之间的服务发现，所以需要开发一套PaaS平台，能够管理和发布CDN容器，并同时兼容已经具备的运维能力。</p><p><strong>第二步是组件容器化</strong></p><p>需要针对CDN的组件进行容器化后的功能/性能验证，组件容器化接入Kuberentes后，也针对一些场景进行微服务改造，以支持组件混部后的服务发现。这部分更多的是验证和优化，找出组件容器化需要改造的地方。同时在稳定性层面，因为引入了更多的系统和风险，在可观测性和运维SRE层面需要投入比较多的精力和人力，在体系建设和技能培训上齐头并进。</p><p><strong>第三步是业务迁移</strong></p><p>前2步完成后就是进行CDN业务迁移，正如给飞行中的飞机换引擎，迁移过程需要对现有业务做兼容，保证平滑迁移。</p><h3 id="边缘云原生的区别和挑战"><a href="#边缘云原生的区别和挑战" class="headerlink" title="边缘云原生的区别和挑战"></a>边缘云原生的区别和挑战</h3><ul><li><strong>容器调度：</strong>中心的容器调度一般是不需要考虑业务请求（流量）调度的，中心会在1～3个Region进行部署，然后通过DNS配置请求转发逻辑，这种情况下，容器都是提前调度并且部署好的（主要是资源调度），其实并不需要跟业务请求协同。而边缘很多场景下容器调度是需要和业务请求调度协同，比如业务需要在华南地区部署10个容器，这10个容器会分布在10个边缘节点，那么当容器调度到这些边缘节点后，业务请求也需要调度过来，而且当某个节点故障后，容器迁移到其他节点，业务请求也需要同步调度过去。业务请求调度可以复用CDN强大的流量调度能力，同时容器调度需要和CDN调度深度协同，这是中心不具备的能力，也是边缘场景下需要深入打磨的核心能力。</li><li><strong>Kubernetes：</strong>目前Kuberentes的大部分都是在中心场景下落地，一般来说一个中心会部署完整一套Kuberentes，Kuberentes的Master和Node都在一个私有网络/VPC内，Kuberentes单集群能管理5千～1万的Node数目，其实对于大部分场景下只需要维护1～3个Kuberentes即可。在边缘场景下，目前采用的结构是Kuberentes Master部署在云中心，然后就近管理周边的边缘节点，比如部署在杭州Region的Kuberentes Master，管理整个浙江省的节点，Master和Node之间是通过公网通信；同时因为我们节点和机器比较多，Kuberentes集群数目也比较多，在全球主要的Region都会部署。</li><li><strong>ServiceMesh：</strong>跟Kuberentes类似，ServiceMesh大多是在中心内网内工作，不需要考虑跨机房、跨公网通信能力。ServiceMesh因为涉及到业务数据面，对于数据延时和边缘自治的要求会更高。</li><li><strong>应用/运维管理：</strong>应用/运维管理方面，边缘跟中心大部分是一致的，但是边缘场景下需要考虑多节点的发布灰度、中心和边缘的网络通信等等问题</li></ul><p>第一阶段：兼容原有业务</p><p>富容器</p><p>CoreDNS</p><p>MOSN</p><p>第二阶段： Service Mesh</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Superedge</title>
    <link href="/2021/10/08/Superedge/"/>
    <url>/2021/10/08/Superedge/</url>
    
    <content type="html"><![CDATA[<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/superedge_arch.png" alt="superedge_arch"></p><h2 id="Edge-Health"><a href="#Edge-Health" class="headerlink" title="Edge-Health"></a>Edge-Health</h2><h2 id="Lite-Apiserver"><a href="#Lite-Apiserver" class="headerlink" title="Lite-Apiserver"></a>Lite-Apiserver</h2><h2 id="ServiceGroup"><a href="#ServiceGroup" class="headerlink" title="ServiceGroup"></a>ServiceGroup</h2><h2 id="Tunnel"><a href="#Tunnel" class="headerlink" title="Tunnel"></a>Tunnel</h2>]]></content>
    
    
    
    <tags>
      
      <tag>边缘计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubeedge openyurt superedge</title>
    <link href="/2021/10/08/kubeedge-openyurt-superedge/"/>
    <url>/2021/10/08/kubeedge-openyurt-superedge/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center"></th><th align="center">Kubeedge</th><th align="center">Openyurt</th><th align="center">Superedge</th></tr></thead><tbody><tr><td align="center">CNCF项目</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">开源时间</td><td align="center">2018.11</td><td align="center">2020.5</td><td align="center">2020.12</td></tr><tr><td align="center">侵入式修改</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">和kubernetes无缝转换</td><td align="center">否（侵入式修改）</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">边缘自治能力</td><td align="center">有</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="center">边缘健康检查</td><td align="center">无</td><td align="center">无</td><td align="center">有边缘健康检查，存在东西向安全和流量消耗问题</td></tr><tr><td align="center">单元化管理边缘节点</td><td align="center">不支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">轻量化</td><td align="center">是（修改了kubelet）</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">云原生生态兼容</td><td align="center">部分兼容</td><td align="center">完整兼容</td><td align="center">完整兼容</td></tr><tr><td align="center">设备管理能力</td><td align="center">有</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">架构风险点</td><td align="center">1.边缘节点无法运行Operator<br />2.边缘节点不适合运行需要list/watch云端的应用<br />3.无法跟随社区k8s演进</td><td align="center">大规模节点且云边长时间断网恢复场景会产生大量的全量List请求，从而对kube-apiserver造成比较大的压力</td><td align="center">大规模节点且云边长时间断网恢复场景会产生大量的全量List请求，从而对kube-apiserver造成比较大的压力</td></tr></tbody></table><h2 id="Kubeedge"><a href="#Kubeedge" class="headerlink" title="Kubeedge"></a>Kubeedge</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/kubeedge_arch.png"></p><h3 id="与Kubernetes的架构差异"><a href="#与Kubernetes的架构差异" class="headerlink" title="与Kubernetes的架构差异"></a>与Kubernetes的架构差异</h3><ul><li><p>使用EdgeCore替代原生kubelet，kubeproxy</p></li><li><p>Cloud Hub+EdgeHub模块：抛弃了原生kubernetes 的组件间数据同步list/watch机制，改成基于websocket/quic协议从云端往边缘推送模式</p></li><li><p>节点元数据缓存模块(MetaManager): 把节点维度的数据持久化在本机的SQLite数据库中，当云边网络不稳定时Edged模块将从本地数据库中获取数据用于业务的生命周期管控</p></li><li><p>DeviceController+设备管理模块(DeviceTwin): 把设备管理能力直接集成到EdgeCore中，为用户提供原生的设备管理能力</p></li></ul><h2 id="Openyurt"><a href="#Openyurt" class="headerlink" title="Openyurt"></a>Openyurt</h2><h3 id="架构-1"><a href="#架构-1" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/openyurtarch.png" alt="openyurt_arch"></p><h2 id="Superedge"><a href="#Superedge" class="headerlink" title="Superedge"></a>Superedge</h2><h3 id="架构-2"><a href="#架构-2" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/superedge_arch.png" alt="superedge_arch"></p><p>Ref</p><ul><li><a href="https://mp.weixin.qq.com/s/wl-7ZRUu3l97wpbRAKjQpw">https://mp.weixin.qq.com/s/wl-7ZRUu3l97wpbRAKjQpw</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes集群安装Flink</title>
    <link href="/2019/11/30/kubernetes%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85Flink/"/>
    <url>/2019/11/30/kubernetes%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85Flink/</url>
    
    <content type="html"><![CDATA[<h2 id="1、创建flink-configmap"><a href="#1、创建flink-configmap" class="headerlink" title="1、创建flink configmap"></a>1、创建flink configmap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f flink-configuration-configmap.yaml</span><br></pre></td></tr></table></figure><blockquote><p>flink-configuration-configmap.yaml</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: flink-config</span><br><span class="line">  labels:</span><br><span class="line">    app: flink</span><br><span class="line">data:</span><br><span class="line">  flink-conf.yaml: |+</span><br><span class="line">    jobmanager.rpc.address: flink-jobmanager</span><br><span class="line">    taskmanager.numberOfTaskSlots: 1</span><br><span class="line">    blob.server.port: 6124</span><br><span class="line">    jobmanager.rpc.port: 6123</span><br><span class="line">    taskmanager.rpc.port: 6122</span><br><span class="line">    jobmanager.heap.size: 1024m</span><br><span class="line">    taskmanager.heap.size: 1024m</span><br><span class="line">  log4j.properties: |+</span><br><span class="line">    log4j.rootLogger=INFO, file</span><br><span class="line">    log4j.logger.akka=INFO</span><br><span class="line">    log4j.logger.org.apache.kafka=INFO</span><br><span class="line">    log4j.logger.org.apache.hadoop=INFO</span><br><span class="line">    log4j.logger.org.apache.zookeeper=INFO</span><br><span class="line">    log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line">    log4j.appender.file.file=$&#123;log.file&#125;</span><br><span class="line">    log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">    log4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %-5p %-60c %x - %m%n</span><br><span class="line">    log4j.logger.org.apache.flink.shaded.akka.org.jboss.netty.channel.DefaultChannelPipeline=ERROR, file</span><br></pre></td></tr></table></figure><h2 id="2、创建jobmanager-service"><a href="#2、创建jobmanager-service" class="headerlink" title="2、创建jobmanager service"></a>2、创建jobmanager service</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f jobmanager-service.yaml</span><br></pre></td></tr></table></figure><blockquote><p>jobmanager-service.yaml</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: flink-jobmanager</span><br><span class="line">spec:</span><br><span class="line">  type: ClusterIP</span><br><span class="line">  ports:</span><br><span class="line">  - name: rpc</span><br><span class="line">    port: 6123</span><br><span class="line">  - name: blob</span><br><span class="line">    port: 6124</span><br><span class="line">  - name: ui</span><br><span class="line">    port: 8081</span><br><span class="line">  selector:</span><br><span class="line">    app: flink</span><br><span class="line">    component: jobmanager</span><br></pre></td></tr></table></figure><p>使用NodePort向集群外提供服务：</p><blockquote><p>jobmanager-rest-service.yaml</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: flink-jobmanager-rest</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: rest</span><br><span class="line">    port: 8081</span><br><span class="line">    targetPort: 8081</span><br><span class="line">  selector:</span><br><span class="line">    app: flink</span><br><span class="line">    component: jobmanager</span><br></pre></td></tr></table></figure><h2 id="3、创建jobmanager-deployment"><a href="#3、创建jobmanager-deployment" class="headerlink" title="3、创建jobmanager deployment"></a>3、创建jobmanager deployment</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f jobmanager-deployment.yaml</span><br></pre></td></tr></table></figure><blockquote><p>jobmanager-deployment.yaml</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: flink-jobmanager</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: flink</span><br><span class="line">        component: jobmanager</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: jobmanager</span><br><span class="line">        image: flink:latest</span><br><span class="line">        workingDir: /opt/flink</span><br><span class="line">        command: [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;$FLINK_HOME/bin/jobmanager.sh start;\</span><br><span class="line">          while :;</span><br><span class="line">          do</span><br><span class="line">            if [[ -f $(find log -name &#x27;*jobmanager*.log&#x27; -print -quit) ]];</span><br><span class="line">              then tail -f -n +1 log/*jobmanager*.log;</span><br><span class="line">            fi;</span><br><span class="line">          done&quot;]</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6123</span><br><span class="line">          name: rpc</span><br><span class="line">        - containerPort: 6124</span><br><span class="line">          name: blob</span><br><span class="line">        - containerPort: 8081</span><br><span class="line">          name: ui</span><br><span class="line">        livenessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 6123</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          periodSeconds: 60</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: flink-config-volume</span><br><span class="line">          mountPath: /opt/flink/conf</span><br><span class="line">      volumes:</span><br><span class="line">      - name: flink-config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: flink-config</span><br><span class="line">          items:</span><br><span class="line">          - key: flink-conf.yaml</span><br><span class="line">            path: flink-conf.yaml</span><br><span class="line">          - key: log4j.properties</span><br><span class="line">            path: log4j.properties</span><br></pre></td></tr></table></figure><h2 id="4、创建taskmanager-deployment"><a href="#4、创建taskmanager-deployment" class="headerlink" title="4、创建taskmanager deployment"></a>4、创建taskmanager deployment</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f taskmanager-deployment.yaml</span><br></pre></td></tr></table></figure><blockquote><p>taskmanager-deployment.yaml</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: flink-taskmanager</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: flink</span><br><span class="line">        component: taskmanager</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: taskmanager</span><br><span class="line">        image: flink:latest</span><br><span class="line">        workingDir: /opt/flink</span><br><span class="line">        command: [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;$FLINK_HOME/bin/taskmanager.sh start; \</span><br><span class="line">          while :;</span><br><span class="line">          do</span><br><span class="line">            if [[ -f $(find log -name &#x27;*taskmanager*.log&#x27; -print -quit) ]];</span><br><span class="line">              then tail -f -n +1 log/*taskmanager*.log;</span><br><span class="line">            fi;</span><br><span class="line">          done&quot;]</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 6122</span><br><span class="line">          name: rpc</span><br><span class="line">        livenessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 6122</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          periodSeconds: 60</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: flink-config-volume</span><br><span class="line">          mountPath: /opt/flink/conf/</span><br><span class="line">      volumes:</span><br><span class="line">      - name: flink-config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: flink-config</span><br><span class="line">          items:</span><br><span class="line">          - key: flink-conf.yaml</span><br><span class="line">            path: flink-conf.yaml</span><br><span class="line">          - key: log4j.properties</span><br><span class="line">            path: log4j.properties</span><br></pre></td></tr></table></figure><h2 id="5、访问Flink-Portal管理界面"><a href="#5、访问Flink-Portal管理界面" class="headerlink" title="5、访问Flink Portal管理界面"></a>5、访问Flink Portal管理界面</h2><h4 id="5-1-kubectl-proxy"><a href="#5-1-kubectl-proxy" class="headerlink" title="5.1 kubectl proxy"></a>5.1 kubectl proxy</h4><p>直接使用<code>kubectl proxy </code>，</p><p>然后，通过 <a href="http://localhost:8001/api/v1/namespaces/default/services/flink-jobmanager:ui/proxy">http://localhost:8001/api/v1/namespaces/default/services/flink-jobmanager:ui/proxy</a> 访问</p><h4 id="5-2-kubectl-port-forward"><a href="#5-2-kubectl-port-forward" class="headerlink" title="5.2 kubectl port-forward"></a>5.2 kubectl port-forward</h4><p>通过kubectl转发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward $&#123;flink-jobmanager-pod&#125; 8081:8081</span><br></pre></td></tr></table></figure><p>然后，通过 <a href="http://localhost:8081/">http://localhost:8081</a> 访问</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/kubernetes.html#session-cluster-resource-definitions">https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/kubernetes.html#session-cluster-resource-definitions</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go深入解析goroutine</title>
    <link href="/2019/11/28/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90goroutine/"/>
    <url>/2019/11/28/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90goroutine/</url>
    
    <content type="html"><![CDATA[<p>Goroutine Scheduler</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>调度器是go语言运行时最核心的内容，其基本理论建立在三种基本对象（系统线程对象M，抽象处理器对象P，goroutine对象G）</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081426433.jpeg" alt="our-cast"></p><h2 id="M、P、G关系"><a href="#M、P、G关系" class="headerlink" title="M、P、G关系"></a>M、P、G关系</h2><p>GO运行时存在两种类型队列（queue）：</p><ul><li>全局queue</li><li>每个P维护自己的G的queue</li></ul><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081426321.png" alt="go-sched"></p><h2 id="基本对象数据结构"><a href="#基本对象数据结构" class="headerlink" title="基本对象数据结构"></a>基本对象数据结构</h2><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><ol><li>调用<code>go func()&#123;...&#125;()</code>起一个协程，都会创建一个goroutine对象，代表G并发任务</li><li>所有的G任务都有系统线程M来执行</li><li>每个G对象都有自己的独立栈内存，当M执行任务时，从G用来保存执行现场的字段中恢复相关寄存值。</li></ol><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081426116.jpeg" alt="in-motion"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://morsmachine.dk/go-scheduler">http://morsmachine.dk/go-scheduler</a></li><li><a href="http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf">http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf</a></li><li><a href="https://speakerdeck.com/retervision/go-runtime-scheduler">https://speakerdeck.com/retervision/go-runtime-scheduler</a></li><li><a href="https://colobu.com/2017/05/04/go-scheduler">https://colobu.com/2017/05/04/go-scheduler</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go深入解析channel</title>
    <link href="/2019/11/18/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90channel/"/>
    <url>/2019/11/18/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90channel/</url>
    
    <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>往未初始化的Channel写数据，会发生什么？</p><p>nil channel会永远阻塞对该channel的读写操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  func main() &#123;</span><br><span class="line">  var cc chan int</span><br><span class="line">  cc &lt;- 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line">goroutine 1 [chan send (nil chan)]:</span><br><span class="line">main.main()</span><br></pre></td></tr></table></figure><p>上面的意思是，在main goroutine线，期望从管道中获得一个数据，而这个数据必须是其他goroutine线放入管道的，但是其他goroutine线都已经执行完了(all goroutines are asleep)，那么就永远不会有数据放入管道。所以，main goroutine线在等一个永远不会来的数据，那整个程序就永远等下去了。这显然是没有结果的，所以这个程序就说“算了吧，不坚持了，我自己自杀掉，报一个错给代码作者，我被deadlock了”</p></li><li><p>channel实现等待一段时间超时后，再退出？</p><blockquote><p>time.After定义</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// After waits for the duration to elapse and then sends the current time</span><br><span class="line">// on the returned channel.</span><br><span class="line">// It is equivalent to NewTimer(d).C.</span><br><span class="line">// The underlying Timer is not recovered by the garbage collector</span><br><span class="line">// until the timer fires. If efficiency is a concern, use NewTimer</span><br><span class="line">// instead and call Timer.Stop if the timer is no longer needed.</span><br><span class="line">func After(d Duration) &lt;-chan Time &#123;</span><br><span class="line">return NewTimer(d).C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>select + time.After实现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">c1 := make(chan int)</span><br><span class="line">c2 := make(chan int)</span><br><span class="line">fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class="line">go func() &#123;</span><br><span class="line">time.Sleep(time.Duration(2 * time.Second))</span><br><span class="line">fmt.Println(time.Now().Format(&quot;2006-01-02 15:04:05&quot;))</span><br><span class="line">c1 &lt;- 2</span><br><span class="line">&#125;()</span><br><span class="line">select &#123;</span><br><span class="line">case n := &lt;-c1:</span><br><span class="line">fmt.Println(&quot;receive from c1: &quot;, n)</span><br><span class="line">case n := &lt;-c2:</span><br><span class="line">fmt.Println(&quot;receive from c2: &quot;, n)</span><br><span class="line">case &lt;-time.After(8 * time.Second):</span><br><span class="line">fmt.Println(&quot;timeout,no receive&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>select + for实现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">stop := make(chan bool)</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-stop:</span><br><span class="line">// 收到stop channel，结束goroutine</span><br><span class="line">return</span><br><span class="line">default:</span><br><span class="line">// 不做处理，等待stop channel</span><br><span class="line">time.Sleep(2 * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(10 * time.Second)</span><br><span class="line">// 停止goroutine</span><br><span class="line">stop &lt;- true</span><br><span class="line">time.Sleep(5 * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h2><p>channel主要用于多个goroutine通讯，其内部实现了同步，确保并发安全，默认为同步模式。</p><p>同步方式需要发送和接受配对。否则会被阻塞，直到另一方准备好后被唤醒。</p><p>异步方式通过判断缓冲区来决定是否阻塞，如果缓冲区已满，则发送被阻塞；缓冲区为空，则接收被阻塞</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081423187.png" alt="hchan"></p><p>channel都是以hchan结构体形式存在，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">type hchan struct &#123;</span><br><span class="line">    qcount   uint</span><br><span class="line">    dataqsiz uint</span><br><span class="line">    buf      unsafe.Pointer</span><br><span class="line">    elemsize uint16</span><br><span class="line">    closed   uint32</span><br><span class="line">    elemtype *_type</span><br><span class="line">    sendx    uint  </span><br><span class="line">    recvx    uint</span><br><span class="line">    recvq    waitq</span><br><span class="line">    sendq    waitq</span><br><span class="line"></span><br><span class="line">    lock mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://i6448038.github.io/2019/04/11/go-channel/">https://i6448038.github.io/2019/04/11/go-channel/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go并发控制</title>
    <link href="/2019/10/30/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    <url>/2019/10/30/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>go实现对并发控制的几种方式</p><ul><li>WaitGroup</li><li>Channel + Select</li><li>Context</li></ul><h2 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">wg.Add(2)</span><br><span class="line">go func() &#123;</span><br><span class="line">time.Sleep(3 * time.Second)</span><br><span class="line">fmt.Println(&quot;&lt;groutine 1&gt; done&quot;)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">go func() &#123;</span><br><span class="line">fmt.Println(&quot;&lt;groutine 2&gt; done&quot;)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(&quot;--- All groutine finnish ---&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;groutine 2&gt; done</span><br><span class="line">&lt;groutine 1&gt; done</span><br><span class="line">--- All groutine finnish ---</span><br></pre></td></tr></table></figure><h2 id="Channel-Select"><a href="#Channel-Select" class="headerlink" title="Channel + Select"></a>Channel + Select</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">stop := make(chan bool)</span><br><span class="line">go func() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case &lt;-stop:</span><br><span class="line">// 收到stop channel，结束goroutine</span><br><span class="line">return</span><br><span class="line">default:</span><br><span class="line">// 不做处理，等待stop channel</span><br><span class="line">time.Sleep(2 * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(10 * time.Second)</span><br><span class="line">// 停止goroutine</span><br><span class="line">stop &lt;- true</span><br><span class="line">time.Sleep(5 * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Go 语言中的每一个请求的都是通过一个单独的 Goroutine 进行处理的，HTTP/RPC 请求的处理器往往都会启动新的 Goroutine 访问数据库和 RPC 服务，我们可能会创建多个 Goroutine 来处理一次请求，而 <code>Context</code> 的主要作用就是在不同的 Goroutine 之间同步请求特定的数据、取消信号以及处理请求的截止日期</p><p>Context的调用是链式的，通过<code>WithCancel</code>，<code>WithDeadline</code>，<code>WithTimeout</code>或<code>WithValue</code>派生出新的 Context。当父Context被取消时，其派生的所有Context都将取消</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动了3个goroutine进行不断的循环等待，每一个都使用了Context进行跟踪，当使用<code>cancel</code>函数通知取消时，所有基于这个Context或者衍生的子Context都会收到通知，当Context取消时，得到一个关闭channel（<code>ctx.Done</code>），从关闭的<code>ctx.Done</code>可以读取值，退出select，最终释放goroutine。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">go watch(ctx, &quot;【监控1】&quot;)</span><br><span class="line">go watch(ctx, &quot;【监控2】&quot;)</span><br><span class="line">go watch(ctx, &quot;【监控3】&quot;)</span><br><span class="line"></span><br><span class="line">time.Sleep(10 * time.Second)</span><br><span class="line">fmt.Println(&quot;可以了，通知监控停止&quot;)</span><br><span class="line">cancel()</span><br><span class="line">//为了检测监控过是否停止，如果没有监控输出，就表示停止了</span><br><span class="line">time.Sleep(5 * time.Second)</span><br><span class="line">fmt.Println(&quot;main退出&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func watch(ctx context.Context, name string) &#123;</span><br><span class="line">for &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case d, _ := &lt;-ctx.Done():</span><br><span class="line">fmt.Printf(&quot;%s ctx.Done:&lt;%v&gt; ctx.Err:&lt;%v&gt; 监控退出，停止了...\n&quot;, name, d, ctx.Err())</span><br><span class="line">return</span><br><span class="line">default:</span><br><span class="line">fmt.Println(name, &quot;goroutine监控中...&quot;)</span><br><span class="line">time.Sleep(2 * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">【监控3】 goroutine监控中...</span><br><span class="line">【监控1】 goroutine监控中...</span><br><span class="line">【监控2】 goroutine监控中...</span><br><span class="line">可以了，通知监控停止</span><br><span class="line">【监控3】 ctx.Done:&lt;&#123;&#125;&gt; ctx.Err:&lt;context canceled&gt; 监控退出，停止了...</span><br><span class="line">【监控1】 ctx.Done:&lt;&#123;&#125;&gt; ctx.Err:&lt;context canceled&gt; 监控退出，停止了...</span><br><span class="line">【监控2】 ctx.Done:&lt;&#123;&#125;&gt; ctx.Err:&lt;context canceled&gt; 监控退出，停止了...</span><br><span class="line">main退出</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="核心Context接口"><a href="#核心Context接口" class="headerlink" title="核心Context接口"></a>核心Context接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Context interface &#123;</span><br><span class="line">    Deadline() (deadline time.Time, ok bool)</span><br><span class="line">    Done() &lt;-chan struct&#123;&#125;</span><br><span class="line">    Err() error</span><br><span class="line">    Value(key interface&#123;&#125;) interface&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Deadline：返回当前 <code>Context</code> 被取消的时间，也就是完成工作的截止日期</li><li>Done：返回一个 Channel，这个 Channel 会在当前工作完成或者上下文被取消之后关闭，多次调用 <code>Done</code> 方法会返回同一个 Channel</li><li>Err：返回当前 <code>Context</code> 结束的原因，它只会在 <code>Done</code> 返回的 Channel 被关闭时才会返回非空的值<ul><li>如果当前 <code>Context</code> 被取消就会返回 <code>Canceled</code> 错误；</li><li>如果当前 <code>Context</code> 超时就会返回 <code>DeadlineExceeded</code> 错误</li></ul></li><li>Value：从 <code>Context</code> 中返回键对应的值，对于同一个上下文来说，多次调用 <code>Value</code> 并传入相同的 <code>Key</code> 会返回相同的结果，这个功能可以用来传递请求特定的数据</li></ul><h4 id="根Context"><a href="#根Context" class="headerlink" title="根Context"></a>根Context</h4><p>golang默认的context包已经有emptyCtx实现了Contex接口，具体为<code>Background</code> 和 <code>TODO</code>两个context。其中，<code>context.Background()</code> 是context上下文中最顶层的默认值，所有其他的上下文都应该从 <code>context.Background()</code> 演化出来。（TODO实际基本很少用，只有当不知道该使用什么Context的时候，可以使用这个）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">background = new(emptyCtx)</span><br><span class="line">todo       = new(emptyCtx)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Background() Context &#123;</span><br><span class="line">return background</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TODO() Context &#123;</span><br><span class="line">return todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">type emptyCtx int</span><br><span class="line"></span><br><span class="line">func (*emptyCtx) Deadline() (deadline time.Time, ok bool) &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (*emptyCtx) Done() &lt;-chan struct&#123;&#125; &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (*emptyCtx) Err() error &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (*emptyCtx) Value(key interface&#123;&#125;) interface&#123;&#125; &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Context的继承衍生"><a href="#Context的继承衍生" class="headerlink" title="Context的继承衍生"></a>Context的继承衍生</h4><p>通过以下With函数，可创建一颗Context树，树的每个节点都可以有任意多个子节点，节点层级可以有任意多个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func WithCancel(parent Context) (ctx Context, cancel CancelFunc)</span><br><span class="line"></span><br><span class="line">func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)</span><br><span class="line"></span><br><span class="line">func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</span><br><span class="line"></span><br><span class="line">func WithValue(parent Context, key, val interface&#123;&#125;) Context</span><br></pre></td></tr></table></figure><ul><li><p>WithCancel：传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。</p></li><li><p>WithDeadline：和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。</p></li><li><p>WithTimeout：和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。</p></li><li><p>WithValue：此函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到，这是我们实际用经常要用到的技巧，一般我们想要通过上下文来传递数据时，可以通过这个方法，如我们需要tarce追踪系统调用栈的时候</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://golang.org/pkg/context/">https://golang.org/pkg/context/</a></li><li><a href="https://blog.golang.org/context">https://blog.golang.org/context</a></li><li><a href="https://www.sohamkamani.com/blog/golang/2018-06-17-golang-using-context-cancellation/">https://www.sohamkamani.com/blog/golang/2018-06-17-golang-using-context-cancellation/</a></li><li><a href="https://www.flysnow.org/2017/05/12/go-in-action-go-context.html">https://www.flysnow.org/2017/05/12/go-in-action-go-context.html</a></li><li><a href="https://draveness.me/golang/concurrency/golang-context.html">https://draveness.me/golang/concurrency/golang-context.html</a></li><li><a href="https://juejin.im/post/5a6873fef265da3e317e55b6">https://juejin.im/post/5a6873fef265da3e317e55b6</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Istio安装与实践</title>
    <link href="/2019/09/08/Istio%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <url>/2019/09/08/Istio%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>Ubuntu 16.04</li><li>安装kubernetes集群（kubeadm/minikube），本次使用的是kubeadm搭建的1.15版本k8s集群</li><li><a href="https://istio.io/zh/docs/setup/#downloading-the-release">下载 Istio 发行版本</a>，本次安装的是Istio 1.4.0。</li><li>执行任何必要的 <a href="https://istio.io/zh/docs/setup/platform-setup/">特定于平台的设置</a>。</li><li>检查 <a href="https://istio.io/zh/docs/setup/additional-setup/requirements/">Pods 和 Services 的要求</a>。</li></ul><span id="more"></span><h2 id="安装Istio"><a href="#安装Istio" class="headerlink" title="安装Istio"></a>安装Istio</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/istio/istio/releases/download/1.4.0/istio-1.4.0-linux.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf istio-1.4.0-linux.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dggphicprc11349 ]# cd istio-1.4.0/</span><br><span class="line">[root@dggphicprc11349 istio-1.4.0]# ll</span><br><span class="line">total 40</span><br><span class="line">drwxr-x---  2 root root  4096 11 14 07:13 bin</span><br><span class="line">drwxr-xr-x  6 root root  4096 11 14 07:13 install</span><br><span class="line">-rw-r--r--  1 root root 11348 11 14 07:13 LICENSE</span><br><span class="line">-rw-r-----  1 root root   675 11 14 07:13 manifest.yaml</span><br><span class="line">-rw-r--r--  1 root root  6080 11 14 07:13 README.md</span><br><span class="line">drwxr-xr-x 19 root root  4096 11 14 07:13 samples</span><br><span class="line">drwxr-x---  3 root root  4096 11 14 07:13 tools</span><br></pre></td></tr></table></figure><p>安装istio方式：</p><ul><li><p>使用Istioctl安装（推荐）</p></li><li><p>使用<code>install/kubernetes/</code>文件夹中的<code>istio-demo.yaml</code>进行安装</p></li><li><p><del>使用Helm和Tiller进行安装</del>（Helm 的安装方法已被弃用。 请改用 <a href="https://istio.io/zh/docs/setup/install/istioctl/">使用 istioctl 安装</a>）</p></li><li><p><del>使用Helm template渲染出Istio的YAML安装文件进行安装</del></p></li></ul><p>Istio 1.1起默认的安装配置禁用了部分功能，如果使用Helm安装的话，建议对<code>install/kubernetes/helm/istio/values.yaml</code>中部分参数做修改，启用相关配置</p><table><thead><tr><th>参数</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>grafana.enabled</td><td>true</td><td>安装Grafana插件</td></tr><tr><td>tracing.enabled</td><td>true</td><td>安装Jaeger插件</td></tr><tr><td>kiali.enabled</td><td>true</td><td>安装Kiali插件</td></tr><tr><td>global.disablePolicyChecks</td><td>false</td><td>启用策略检查</td></tr><tr><td>global.proxy.accessLogFile</td><td>“/dev/stdout”</td><td>获取Envoy的访问日志</td></tr></tbody></table><p>使用Istioctl安装方式安装步骤：</p><ol><li><p>将istioctl放到系统PATH目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv bin/istioctl /usr/local/bin</span><br></pre></td></tr></table></figure></li><li><p>使用Istio demo配置文件安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">istioctl manifest apply --set profile=demo</span><br></pre></td></tr></table></figure></li></ol><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>以天气应用为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cloudnativebooks/cloud-native-istio.git</span><br></pre></td></tr></table></figure><ol><li><p>创建weather这个namespace并且给此namespace打上<code>istio-injection=enabled</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns weather</span><br><span class="line">kubectl label namespace weather istio-injection=enabled</span><br></pre></td></tr></table></figure><blockquote><p> 当 Kubernetes 调用 webhook 时，<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#mutatingwebhookconfiguration-v1beta1-admissionregistration-k8s-io"><code>admissionregistration</code></a> 配置被应用。默认配置将 sidecar 注入到所有拥有 <code>istio-injection=enabled</code> 标签的 namespace 下的 pod 中。 <code>istio-sidecar-injector</code> 配置字典指定了注入 sidecar 的配置。如需更改指定哪些 namespace 被注入，你可以使用以下命令编辑 <code>MutatingWebhookConfiguration</code>：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl edit mutatingwebhookconfiguration istio-sidecar-injector</span><br></pre></td></tr></table></figure><p> 修改 <code>MutatingWebhookConfiguration</code> 之后，您应该重启 sidecar 注入器的 pod</p></blockquote></li><li><p>创建应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f install/weather-v1.yaml -n weather</span><br></pre></td></tr></table></figure></li><li><p>确认所有服务和pod均已创建并启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dggphicprc11349 cloud-native-istio]# kubectl get service -n weather</span><br><span class="line">NAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">advertisement   ClusterIP   10.99.241.73    &lt;none&gt;        3003/TCP   2m12s</span><br><span class="line">forecast        ClusterIP   10.100.154.32   &lt;none&gt;        3002/TCP   2m12s</span><br><span class="line">frontend        ClusterIP   10.109.157.96   &lt;none&gt;        3000/TCP   2m12s</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@dggphicprc11349 cloud-native-istio]# kubectl get pod -n weather</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">advertisement-v1-6d69d9cff8-fgfnt   2/2     Running   0          2m59s</span><br><span class="line">forecast-v1-ff98f99f7-5rk5c         2/2     Running   0          2m59s</span><br><span class="line">frontend-v1-68d57cf9d8-kmlnp        2/2     Running   0          2m59s</span><br></pre></td></tr></table></figure></li><li><p>配置Gateway和frontend服务的VirtualService，使应用可以被外部请求访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f install/weather-gateway.yaml</span><br></pre></td></tr></table></figure></li><li><p>通过浏览器访问外部地址</p><p><code>http://xx.xx.xx.xx</code></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kube-apiserver Aggregation Layer</title>
    <link href="/2019/06/08/kube-apiserver-Aggregation-Layer/"/>
    <url>/2019/06/08/kube-apiserver-Aggregation-Layer/</url>
    
    <content type="html"><![CDATA[<p>配置Aggregation Layer允许通过新增一个扩展apiserver服务来扩展非核心api。</p><p>与CRD扩展api的方式不同， Aggregation API需要另一个扩展的apiserver（aggregated apiserver）。扩展apiserver（aggregated apiserver）与kube-apiserver（aggregator）之间需要互相通信。为了保证通信安全，kube-apiserver（aggregator）使用x509证书认证去访问扩展apiserver（aggregated apiserver）</p><span id="more"></span><ol><li>用户发起请求，携带用户凭证到kube-apiserver认证</li><li>kube-apiserver认证请求</li><li>kube-apiserver鉴权请求</li><li>kube-apiserver通过客户端证书和密钥和aggregated apiserver建立连接</li><li>kube-apiserver将包含user info的请求转发给aggregated apiserver</li><li>aggregated apiserver通过auth proxy authrntication method认证发来的请求</li><li>aggregated apiserver</li></ol><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081415488.png"></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/">https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Service Account Token Volume Projection</title>
    <link href="/2019/05/28/Service-Account-Token-Volume-Projection/"/>
    <url>/2019/05/28/Service-Account-Token-Volume-Projection/</url>
    
    <content type="html"><![CDATA[<h4 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h4><p>社区实现的pod 通过 volume 方式引用service account 的 token，支持audience和token有效期设置。在1.11引入（Alpha），在1.12为Beta。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>ServiceAccountTokenVolumeProjection 在 k8s 1.11版本需要手动设置<code> TokenRequestProjection</code> 这个feature gate 为 true 来启用此功能，在1.12版本 <code>TokenRequestProjection</code>  默认为true</p><p>kubelet可以将service account token挂载到pod中。并且可以指定token的一些期望的属性，例如audience 和expirationSeconds。这些属性在default service account token下无法配置。一旦Pod和ServiceAccount被删除，service account token会跟着变成invalid</p><p>可以在pod的yaml中定义使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx</span><br><span class="line">    name: nginx</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /var/run/secrets/tokens</span><br><span class="line">      name: vault-token</span><br><span class="line">  serviceAccountName: acct</span><br><span class="line">  volumes:</span><br><span class="line">  - name: vault-token</span><br><span class="line">    projected:</span><br><span class="line">      sources:</span><br><span class="line">      - serviceAccountToken: #名为serviceAccountToken的一种ProjectedVolume</span><br><span class="line">          path: vault-token       </span><br><span class="line">          expirationSeconds: 7200 #指定token过期时间为2小时</span><br><span class="line">          audience: vault # identifier: vault</span><br></pre></td></tr></table></figure><ul><li><p>audience字段</p><p>包含token的目标受众（audience）。token的接收者必须使用token的audience中指定的标识符(identifier)来标识自己，否则接收者应该拒绝该token。此参数为可选，默认为api server的identifier（api）</p></li><li><p>expirationSeconds字段</p><p>指定service account token的有效时间。默认1小时，最小需要10分钟</p></li><li><p>path字段</p><p>指定projected volume的挂载点的相对路径</p></li></ul><p>创建pod之后，kubelet会替Pod请求和储存这个token，让pod在可配置的文件路径下访问到此token，并且一旦达到配置的到期时间，就会刷新token。</p><p>一旦token达到总TTL的80%，或者token已经超过24小时，kubelet 将主动更新token（rotate token）</p><h4 id="kubelet实现"><a href="#kubelet实现" class="headerlink" title="kubelet实现"></a>kubelet实现</h4><blockquote><p>pkg\kubelet\kubelet.go</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func NewMainKubelet(...)(*Kubelet, error) &#123;</span><br><span class="line">    ...</span><br><span class="line">    tokenManager := token.NewManager(kubeDeps.KubeClient)</span><br><span class="line">    ...</span><br><span class="line">    klet.volumePluginMgr, err =</span><br><span class="line">NewInitializedVolumePluginMgr(klet, secretManager, configMapManager, tokenManager, kubeDeps.VolumePlugins, kubeDeps.DynamicPluginProber)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>pkg\kubelet\volume_host.go</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">func NewInitializedVolumePluginMgr(</span><br><span class="line">kubelet *Kubelet,</span><br><span class="line">secretManager secret.Manager,</span><br><span class="line">configMapManager configmap.Manager,</span><br><span class="line">tokenManager *token.Manager,</span><br><span class="line">plugins []volume.VolumePlugin,</span><br><span class="line">prober volume.DynamicPluginProber) (*volume.VolumePluginMgr, error) &#123;</span><br><span class="line">    ...</span><br><span class="line">    kvh := &amp;kubeletVolumeHost&#123;</span><br><span class="line">kubelet:          kubelet,</span><br><span class="line">volumePluginMgr:  volume.VolumePluginMgr&#123;&#125;,</span><br><span class="line">secretManager:    secretManager,</span><br><span class="line">configMapManager: configMapManager,</span><br><span class="line">tokenManager:     tokenManager,</span><br><span class="line">mountPodManager:  mountPodManager,</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (kvh *kubeletVolumeHost) GetServiceAccountTokenFunc() func(namespace, name string, tr *authenticationv1.TokenRequest) (*authenticationv1.TokenRequest, error) &#123;</span><br><span class="line">return kvh.tokenManager.GetServiceAccountToken</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>pkg\kubelet\token\token_manager.go</p></blockquote><p>GetServiceAccountToken 从 cache 或者 TokenRequest API 里获取service account token</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">func (m *Manager) GetServiceAccountToken(namespace, name string, tr *authenticationv1.TokenRequest) (*authenticationv1.TokenRequest, error) &#123;</span><br><span class="line">    //解析TokenRequest，返回name/namespace/tr.Spec.Audiences/expirationSeconds/boundObjectRef 格式的 key</span><br><span class="line">    key := keyFunc(name, namespace, tr)</span><br><span class="line"></span><br><span class="line">    //从cache中获取tokenRequests</span><br><span class="line">ctr, ok := m.get(key)</span><br><span class="line">    </span><br><span class="line">    //判断token是否需要刷新（一旦token达到总TTL的80%，或者token已经超过24小时），不需要刷新直接返回</span><br><span class="line">    if ok &amp;&amp; !m.requiresRefresh(ctr) &#123;</span><br><span class="line">return ctr, nil</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    //创建新的token</span><br><span class="line">    //getToken: c.CoreV1().ServiceAccounts(namespace).CreateToken(name, tr)</span><br><span class="line">    tr, err := m.getToken(name, namespace, tr)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">switch &#123;</span><br><span class="line">case !ok:</span><br><span class="line">return nil, fmt.Errorf(&quot;failed to fetch token: %v&quot;, err)</span><br><span class="line">case m.expired(ctr):</span><br><span class="line">return nil, fmt.Errorf(&quot;token %s expired and refresh failed: %v&quot;, key, err)</span><br><span class="line">default:</span><br><span class="line">klog.Errorf(&quot;couldn&#x27;t update token %s: %v&quot;, key, err)</span><br><span class="line">return ctr, nil</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.set(key, tr)</span><br><span class="line">return tr, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h4><ul><li><p><a href="https://kubernetes.io/docs/concepts/storage/volumes/#projected">projected</a></p><p>projected volume 映射多个存在的volume 资源到同一目录。</p><p>所有资源要求必须和pod在同一个namespace。</p><p>当前有四种volume资源可以被映射(projected)：</p><ul><li>secret</li><li>downwardAPI</li><li>configMap</li><li>serviceAccountToken</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>default-token</title>
    <link href="/2019/05/08/default-token/"/>
    <url>/2019/05/08/default-token/</url>
    
    <content type="html"><![CDATA[<p>default-token得先从service account说起，Service account是Pod里面的进程调用Kubernetes API或其他外部服务而设计的，每个namespace下有一个名为default的默认的ServiceAccount对象，如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081409513.png" alt="3_4_1_serviceaccount"></p><p>Token controller监测service account的创建，并为它们创建默认token，即每个ServiceAccount都有一个名叫<code>&#123;Service Account name&#125;-token-xxx</code>的default token。在新建pod时，会自动挂载当前namespace的default token到pod的secrets下，用于Pod进程访问API Server。如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081410657.png" alt="3_4_1_svc_token-1"></p><p>default-token实际上就是secret，由于每个namespace下有一个名为default的默认的ServiceAccount对象，因此，每个namespaces下都有一个名为<code>default-token-xxx</code>的secret，如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081410689.png" alt="3_4_1_ns_token"></p><p>default-token自动刷新就是为每个default-token设置一个过期时间（24小时）。到期后，去IAM重新获取新的token更新到default-token中，如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081410936.png" alt="3_4_1_token_refresh"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>马拉车算法</title>
    <link href="/2019/05/03/%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/"/>
    <url>/2019/05/03/%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="Manacher’s-Algorithm-马拉车算法"><a href="#Manacher’s-Algorithm-马拉车算法" class="headerlink" title="Manacher’s Algorithm 马拉车算法"></a>Manacher’s Algorithm 马拉车算法</h3><p>马拉车算法用来查找一个字符串的最长回文子串的线性方法</p><p>传统查找最长回文串方法：以每个字符为中心，向两边寻找回文子串，遍历完整数组后，就可以找到最长回文子串，但是复杂度为O(n*n)</p><span id="more"></span><p>马拉车算法推导过程：</p><ol><li><p><strong>预处理</strong></p><p>在每个字符的左右都加上一个特殊字符，比如“#”</p><p>bob    –&gt;    #b#o#b#</p><p>noon    –&gt;    #n#o#o#n# </p><p>不论原字符串是奇数还是偶数，处理之后得到的字符串个数都是奇数个，就不用分奇偶两种情况讨论。</p></li><li><p><strong>新建一个和预处理后的字符串数组t等长的数组p，p[i]表示以t[i]字符为中心的回文子串的半径</strong></p><p>预处理后的得到字符串数组t。</p><p>在回文子串半径数组Pt中，1表示t[i]本身，即该处无回文子串：</p><table><thead><tr><th>数组下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th></tr></thead><tbody><tr><td>原始字符串s</td><td>a</td><td>b</td><td>b</td><td>a</td><td>b</td><td>b</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>预处理后的数组t</td><td>#</td><td>a</td><td>#</td><td>b</td><td>#</td><td>b</td><td>#</td><td>a</td><td>#</td><td>b</td><td>#</td><td>b</td><td>#</td></tr><tr><td>回文子串半径数组Pt</td><td>1</td><td>2</td><td>1</td><td>2</td><td>5</td><td>2</td><td>1</td><td>6</td><td>1</td><td>2</td><td>3</td><td>2</td><td>1</td></tr></tbody></table><p>预处理后的字符串t中如果存在回文子串的话，存在如下特征：</p><ul><li><p><strong>原始回文子串的长度 = 预处理后回文子串的半径 - 1</strong></p><p>以第2个a为中心的回文串半径为6</p><p>而原始回文子串的长度“abbabb”的回文串长度为5</p></li><li><p><strong>原始回文子串的起始位置 = 预处理后回文子串的中心位置 - 预处理后回文子串的半径</strong></p><p>预处理后回文子串中心位置为第2个a所在的位置：7</p><p>预处理后回文子串的半径：6</p><p>而原始回文子串“bbabb”的位置为第1个b所在的位置：1</p></li></ul></li><li><p><strong>二次处理，数组t[0]插入一个原字符串未出现的字符，防止数组越界</strong></p><table><thead><tr><th>数组下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>原始字符串s</td><td>b</td><td>o</td><td>n</td><td></td><td></td><td></td><td></td></tr><tr><td>预处理后的数组t</td><td>#</td><td>b</td><td>#</td><td>o</td><td>#</td><td>b</td><td>#</td></tr><tr><td>回文子串半径数组Pt</td><td>1</td><td>2</td><td>1</td><td>4</td><td>1</td><td>2</td><td>1</td></tr></tbody></table><p>如果不经过二次处理，在t[0]插入一个原字符串未出现的字符。在上面的这种场景下，会发生预处理后回文子串的中心位置（3） - 预处理后回文子串的半径（4）= -1，产生了数组越界。</p><p>二次处理后得到字符串数组f：</p><table><thead><tr><th>数组下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>原始字符串s</td><td>b</td><td>o</td><td>b</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>预处理后的数组t</td><td>#</td><td>b</td><td>#</td><td>o</td><td>#</td><td>b</td><td>#</td><td></td></tr><tr><td>回文子串半径数组Pt</td><td>1</td><td>2</td><td>1</td><td>4</td><td>1</td><td>2</td><td>1</td><td></td></tr><tr><td>二次处理后的数组f</td><td>$</td><td>#</td><td>b</td><td>#</td><td>o</td><td>#</td><td>b</td><td>#</td></tr><tr><td>回文子串半径数组Pf</td><td>1</td><td>1</td><td>2</td><td>1</td><td>4</td><td>1</td><td>2</td><td>1</td></tr></tbody></table><p>此时原始回文子串的起始位置 = 预处理后回文子串的中心位置（4） - 预处理后回文子串的半径（4）= 0  </p></li><li><p>考虑</p><table><thead><tr><th>数组下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th></tr></thead><tbody><tr><td>原始字符串s</td><td>a</td><td>b</td><td>b</td><td>a</td><td>b</td><td>b</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>预处理后的数组t</td><td>#</td><td>a</td><td>#</td><td>b</td><td>#</td><td>b</td><td>#</td><td>a</td><td>#</td><td>b</td><td>#</td><td>b</td><td>#</td><td></td></tr><tr><td>二次处理后的数组f</td><td>$</td><td>#</td><td>a</td><td>#</td><td>b</td><td>#</td><td>b</td><td>#</td><td>a</td><td>#</td><td>b</td><td>#</td><td>b</td><td>#</td></tr><tr><td>回文子串半径数组Pf</td><td>1</td><td>1</td><td>2</td><td>1</td><td>2</td><td>5</td><td>2</td><td>1</td><td>6</td><td>1</td><td>2</td><td>3</td><td>2</td><td>1</td></tr></tbody></table></li></ol><p>此时原始回文子串的起始位置 = 预处理后回文子串的中心位置（8） - 预处理后回文子串的半径（6）= 2</p><p>   需再除以2。</p><ol start="5"><li>如何求数组P</li></ol><p><strong>上述过程总结为一行代码</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p[i] = mx &gt; i ? min( p[<span class="number">2</span>*id - i], mx - i ) : i </span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes下的DNS</title>
    <link href="/2018/10/03/kubernetes%E4%B8%8B%E7%9A%84DNS/"/>
    <url>/2018/10/03/kubernetes%E4%B8%8B%E7%9A%84DNS/</url>
    
    <content type="html"><![CDATA[<p>Kubernetes中的DNS主要用作服务发现，在集群中调度Pod和Service，并且配置kubelet使得容器可以使用DNS Service的IP解析域名</p><span id="more"></span><p>skyDNS（Kubernetes 1.3）—&gt;kubeDNS（Kubernetes1.3之后）—&gt;CoreDNS（Kubernetes 1.11之后GA）</p><p>stubdomains、upstreamnameservers（1.6增加）、federation</p><p>DNS </p><p>svc</p><p>A记录（域名解析IP的记录）：</p><p>SRV记录：</p><p>Pod：</p><h2 id="kube-DNS"><a href="#kube-DNS" class="headerlink" title="kube-DNS"></a>kube-DNS</h2><h2 id="CoreDNS和kube-DNS主要差异"><a href="#CoreDNS和kube-DNS主要差异" class="headerlink" title="CoreDNS和kube-DNS主要差异"></a>CoreDNS和kube-DNS主要差异</h2><h3 id="实现差异"><a href="#实现差异" class="headerlink" title="实现差异"></a>实现差异</h3><p>kube-dns中一个pod内使用了数个容器：kubedns、dnsmasq 和 sidecar。 kubedns 进程监视 Kubernetes master 对 Service 和 Endpoint 操作的变更，并维护一个内存查询结构去处理 DNS 请求。dnsmasq 容器增加了一个 DNS 缓存来改善性能。为执行对 dnsmasq 和 kubedns 的健康检查，sidecar容器提供了一个单独的健康检查 Endpoint</p><p>dnsmasq中的安全漏洞导致过去需要发布Kubernetes安全补丁。此外，由于dnsmasq处理存根域，但kubedns处理External Services，因此你无法在外部服务中使用存根域</p><h3 id="一体化解决方案"><a href="#一体化解决方案" class="headerlink" title="一体化解决方案"></a>一体化解决方案</h3><p>区别于 kube-dns，CoreDNS 编译出来就是一个单独的二进制可执行文件，内置了 cache，backend storage ，health check 等功能，无需第三方组件来辅助实现其他功能，从而使得部署更方便，内存管理更为安全；</p><h3 id="bug修复和增强功能"><a href="#bug修复和增强功能" class="headerlink" title="bug修复和增强功能"></a>bug修复和增强功能</h3><p>——dns＃55：kube-dns的自定义DNS条目可以通过使用kubernetes插件中的“fallthrough”机制、使用重写插件或者仅使用不同的插件（如文件插件）提供子区域来处理。</p><p>——dns＃116：只有一个A记录集用于具有单个主机名的pod无头服务。此问题已修复，无需任何其他配置。</p><p>——dns＃131： externalName不使用stubDomains设置。此问题已修复，无需任何其他配置。</p><p>——dns＃167：启用skyDNS循环A / AAAA记录。可以使用负载均衡插件配置等效功能。</p><p>——dns＃190：kube-dns无法以非root用户身份运行。现在通过使用非默认镜像解决了此问题，但在将来的版本中它将成为默认的CoreDNS行为。</p><p>——dns＃232：将pod hostname修复为dns srv记录的podname，这是通过下面描述的“endpoint_pod_names”功能支持的增强功能。</p><h2 id="CoreDNS实现原理"><a href="#CoreDNS实现原理" class="headerlink" title="CoreDNS实现原理"></a>CoreDNS实现原理</h2><h3 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h3><p><strong>Kube-dns<strong><strong>三个容器，</strong></strong>CoreDNS****一个容器</strong></p><p><strong>区别于**<strong>kube</strong></strong>-DNS<strong><strong>，</strong></strong>CoreDNS<strong><strong>编译出为一个单独二进制可</strong></strong>执行文件，内置了** <strong>cache<strong><strong>，</strong></strong>backend storage</strong> <strong>，****health check</strong> <strong>等功能，无需第三方组件来辅助实现其他功能，从而使得部署更方便，内存管理更为安全</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">coredns.io:5300 &#123;</span><br><span class="line">  file /etc/coredns/zones/coredns.io.db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">example.io:53 &#123;</span><br><span class="line">  errors</span><br><span class="line">  log</span><br><span class="line">  file /etc/coredns/zones/example.io.db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">example.net:53 &#123;</span><br><span class="line">  file /etc/coredns/zones/example.net.db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.:53 &#123;</span><br><span class="line">  errors</span><br><span class="line">  log</span><br><span class="line">  health</span><br><span class="line">  rewrite name foo.example.com foo.default.svc.cluster.local</span><br><span class="line">  kubernetes cluster.local 10.0.0.0/24</span><br><span class="line">  file /etc/coredns/example.db example.org</span><br><span class="line">  proxy . /etc/resolv.conf</span><br><span class="line">  cache 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从kube-dns迁移到CoreDNS"><a href="#从kube-dns迁移到CoreDNS" class="headerlink" title="从kube-dns迁移到CoreDNS"></a>从kube-dns迁移到CoreDNS</h2><p>在Kubernetes1.10之后，CoreDNS支持将kube-dns的ConfigMap转换成CoreDNS的Corefile。也就是说，当你在kube-dns中已经通过ConfigMap配置了<code>stubdomains</code>、<code>upstreamnameservers</code>、<code>federation</code> 等参数, 在通过<code>kubeadm upgrade</code> 来安装CoreDNS后，将自动转换原来的ConfigMap到CoreDNS下的Corefile。</p><p>kube-dns下的ConfigMap：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  federations: |</span><br><span class="line">    &#123;&quot;foo&quot; : &quot;foo.feddomain.com&quot;&#125;</span><br><span class="line">  stubDomains: |</span><br><span class="line">    &#123;&quot;abc.com&quot; : [&quot;1.2.3.4&quot;], &quot;my.cluster.local&quot; : [&quot;2.3.4.5&quot;]&#125;</span><br><span class="line">  upstreamNameservers: |</span><br><span class="line">    [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: 2018-01-22T20:21:56Z</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><p>转换后的CoreDNS Corefile:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.:53 &#123;</span><br><span class="line">       errors</span><br><span class="line">       health</span><br><span class="line">       kubernetes cluster.local  in-addr.arpa ip6.arpa &#123;</span><br><span class="line">          upstream  8.8.8.8 8.8.4.4</span><br><span class="line">          pods insecure</span><br><span class="line">          fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">       &#125;</span><br><span class="line">       federation cluster.local &#123;</span><br><span class="line">          foo foo.feddomain.com</span><br><span class="line">       &#125;</span><br><span class="line">       prometheus :9153</span><br><span class="line">       proxy .  8.8.8.8 8.8.4.4</span><br><span class="line">       cache 30</span><br><span class="line">   &#125;</span><br><span class="line">   abc.com:53 &#123;</span><br><span class="line">       errors</span><br><span class="line">       cache 30</span><br><span class="line">       proxy . 1.2.3.4</span><br><span class="line">   &#125;</span><br><span class="line">   my.cluster.local:53 &#123;</span><br><span class="line">       errors</span><br><span class="line">       cache 30</span><br><span class="line">       proxy . 2.3.4.5</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>检查可以升级的CoreDNS版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm upgrade plan  --feature-gates CoreDNS=true</span><br></pre></td></tr></table></figure><p>升级成CoreDNS并且设为默认DNS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm upgrade apply &lt;version&gt; --feature-gates CoreDNS=true</span><br></pre></td></tr></table></figure><p>新建集群设置CoreDNS为默认</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --feature-gates CoreDNS=true</span><br></pre></td></tr></table></figure><h3 id="kubeadm-upgrade"><a href="#kubeadm-upgrade" class="headerlink" title="kubeadm upgrade"></a>kubeadm upgrade</h3><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://kubernetes.io/blog/2018/07/10/coredns-ga-for-kubernetes-cluster-dns/">coredns-ga-for-kubernetes-cluster-dns</a></p><p><a href="https://coredns.io/2017/06/08/how-queries-are-processed-in-coredns/">How Queries Are Processed in CoreDNS</a></p><p><a href="https://coredns.io/2018/05/21/migration-from-kube-dns-to-coredns/">migration-from-kube-dns-to-coredns</a></p><p><a href="https://coredns.io/2018/01/29/deploying-kubernetes-with-coredns-using-kubeadm/">deploying-kubernetes-with-coredns-using-kubeadm</a></p><p><a href="https://zhuanlan.zhihu.com/p/39782114"></a></p><p><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/"></a></p><p><a href="https://kubernetes.io/zh/docs/concepts/services-networking/dns-pod-service/#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86"></a></p><p><a href="https://k8smeetup.github.io/docs/tasks/administer-cluster/dns-debugging-resolution/#%E9%A6%96%E5%85%88%E6%A3%80%E6%9F%A5%E6%9C%AC%E5%9C%B0-dns-%E9%85%8D%E7%BD%AE"></a></p><p><a href="https://zhengyinyong.com/coredns-basis.html"></a></p><p><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/"></a></p><p><a href="https://jimmysong.io/kubernetes-handbook/practice/configuring-dns.html"></a></p><p><a href="https://draveness.me/dns-coredns"></a><br><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/dns-custom-nameservers/"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K-NN</title>
    <link href="/2018/09/19/k-NN/"/>
    <url>/2018/09/19/k-NN/</url>
    
    <content type="html"><![CDATA[<p>k近邻法(k-nearest neighbor)在一个训练集中，对于新的实例，从训练数据集中找到与该实例<strong>最邻近</strong>的k个实例，如果这k个实例属于某个类，就把该实例分为这个类。k近邻法没有显式的学习过程</p><span id="more"></span><h2 id="k近邻算法"><a href="#k近邻算法" class="headerlink" title="k近邻算法"></a>k近邻算法</h2><h3 id="1-根据给定的距离度量，在训练集T中找出与x最邻近的k个点，这k个点为x的邻域，记作Nk-x"><a href="#1-根据给定的距离度量，在训练集T中找出与x最邻近的k个点，这k个点为x的邻域，记作Nk-x" class="headerlink" title="1. 根据给定的距离度量，在训练集T中找出与x最邻近的k个点，这k个点为x的邻域，记作Nk(x)"></a>1. 根据给定的距离度量，在训练集T中找出与x最邻近的k个点，这k个点为x的邻域，记作Nk(x)</h3><h3 id="2-在"><a href="#2-在" class="headerlink" title="2. 在"></a>2. 在</h3><h3 id="k值的选择"><a href="#k值的选择" class="headerlink" title="k值的选择"></a>k值的选择</h3><p>k值选择会对k近邻产生重大影响。</p><ol><li><p>选择较小的k值<br>较小的k值容易过拟合。用较小的k值相当于用较小的邻域中的训练实例进行预测，监督学习的**近似误差(approximation error)<strong>会减小，只有与输入实例较接近的训练实例才会对预测结果起作用。但如果邻近的实例点刚好是噪声，预测结果机会出错，即预测结果对近邻的实例点非常敏感，监督学习的</strong>估计误差(estimation error)**就会增大。</p></li><li><p>选择较大的k值<br>较大的k值</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scala</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Objective-C</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Statistical learning</title>
    <link href="/2018/09/01/Statistical-learning/"/>
    <url>/2018/09/01/Statistical-learning/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>输入空间：</strong>输入所有可能取值的集合，每个具体的输入是一个实例(instance)，通常由特征向量(feature vector)表示。<br><strong>特征空间</strong>：所有的特征向量存在的空间成为特征空间(feature space)。特征空间的每一维对应于一个特征，特征空间相当于输入空间的抽象，二者不一定相等。模型实际上都是定义在特征空间上的<br><strong>输出空间：</strong>输出所有可能取值的集合<br>表示：X Y， xi=（xi1,xi2,….）</p><p>机器学习分为：<strong>监督学习，非监督学习，强化学习</strong></p><p><strong>假设空间</strong>(hypothesis space)：输入到输出的映射由模型来表示。模型属于输入空间到输出空间的映射的集合，这个集合就是假设空间</p><p>监督学习利用<strong>训练数据</strong>学习一个模型，再用模型对<strong>测试样本集</strong>进行预测</p><h2 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h2><p>监督学习的前提是假设输入和输出的随机变量X和Y遵循联合概率分布P(X,Y)。按输入输出不同类型划分回归问题，分类问题，标注问题</p><p><strong>回归问题：</strong>输入输出均为连续变量的预测问题，回归模型表示从输入变量到输出变量之间映射的函数，类似于函数拟合，用一条函数曲线去拟合已知的数据，用来预测未知的数据</p><p><strong>分类问题：</strong>输入输出均为有限个离散变量的预测问题，从数据中学习一个分类决策函数或分类模型，称为分类器。分类器对新的输入进行输出预测的过程即为分类</p><p><strong>标注问题：</strong>输入输出均为变量序列的预测问题，标注可看作是分类问题的推广。标注问题的输入是一个观测序列，输出是一个标记序列或状态序列。分类问题输出是一个值。而标注的输出是一个向量，输出向量的每个值属于一种标记类型。<br>标注常用的机器学习方法：隐性马尔可夫模型(HMM)，条件随机场(CRF)</p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSL/TLS概述</title>
    <link href="/2018/08/07/SSL-TLS%E6%A6%82%E8%BF%B0/"/>
    <url>/2018/08/07/SSL-TLS%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>TLS协议分为两层</p><ul><li>底层(Record Layer)</li><li>上层(ChangeCipherSpec Protocol&lt;20&gt;, Alert Protocol&lt;21&gt;, Handshake Protocol&lt;22&gt;, Application Data Protocol&lt;23&gt;)</li></ul><p>Record Layer处于TLS协议最底层，为TLS协议提供安全可靠的连接，为高层协议提供数据封装，压缩，加密等基本功能支持，指定了数据类型，SSL版本以及数据长度(Byte)。由于TLS版本众多，客户端和服务端协商ssl版本时，存在一定的兼容性，具体参照<a href="https://tools.ietf.org/html/rfc5246#appendix-E">TLS 兼容性问题</a>。比如当客户端需要兼容ssl老版本服务端时，会把recordLayer的ssl version设置为{03,XX}(即SSL3.0，TLS 1.0，1.1，1.2)中的任意值，通常是客户端支持的最低版本。<br><img src="https://gitee.com/eightzero/pico/raw/master/RecordLayer.png" alt="RecordLaye"></p><p>Handshake Protocol位于Record Layer之上，为Record Layer的负载，类似TCP层为IP层负载。HandShake Protocol层用于传输加密数据前，客户端与服务端的握手协商<br><img src="https://gitee.com/eightzero/pico/raw/master/handshakelayer.png" alt="handshakelaye"></p><h2 id="协商过程"><a href="#协商过程" class="headerlink" title="协商过程"></a>协商过程</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/15327690442087.jpg" alt="15327690442087"></p><h3 id="1-客户端发出请求（Client-Hello）"><a href="#1-客户端发出请求（Client-Hello）" class="headerlink" title="1. 客户端发出请求（Client Hello）"></a>1. 客户端发出请求（Client Hello）</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/Client%20Hello.png" alt="Client Hello"></p><p>客户端向服务端发送的Client Hello报文中包含以下信息：<br>(1) Version。支持的协议版本，比如TLS 1.2版<br>(2) Random。一个客户端生成的随机数，稍后与服务端产生的随机数生成对话密钥(Master Secret)<br>(3) Cipher Suites。支持的加密方法，比如RSA公钥加密</p><p>Cipher Suite格式：认证算法__密钥协商交换算法__加密算法__摘要算法（TLS, ECDHE_RSA, AES_256_GCM, SHA256）<br><img src="https://gitee.com/eightzero/pico/raw/master/cipherSuites.png" alt="cipherSuites"></p><p>(4) Compression Method。支持的压缩方法，null表示不压缩<br>(5) Session ID。如果之前连过该服务端，可以复用会话，而无需重新进行TLS握手<br>(6) Extension。server_name(请求的服务端域名)，sinature_algorithms等</p><h3 id="2-服务端回应"><a href="#2-服务端回应" class="headerlink" title="2. 服务端回应"></a>2. 服务端回应</h3><p>从Server Hello到Server Hello Done，有些服务端是每条单独发送，有的服务端是合并一起发送。</p><h4 id="2-1-Server-Hello"><a href="#2-1-Server-Hello" class="headerlink" title="2.1 Server Hello"></a>2.1 Server Hello</h4><p><img src="https://gitee.com/eightzero/pico/raw/master/ServerHello.png" alt="ServerHello"></p><p>(1) Version。服务端确认使用的SSL版本，比如TLS 1.2版本。如果浏览器与服务器支持的版本不一致，会进行协商双方都兼容的版本，如果没有则关闭连接。<a href="https://tools.ietf.org/html/rfc5246#appendix-E">TLS 兼容性问题</a><br>(2) Random。一个服务端生成的随机数，稍后用于生成对话密钥<br>(3) Cipher Suite。服务端从client hello提供的Cipher Suites列表中选取要使用的加密套件<br>(4) Compression Method。服务端从client hello提供的Compression Method列表中选取要使用的压缩方法<br>(5) Session ID。若服务端允许客户端在以后通信中重用本次会话，则服务端会为本次会话分配Session ID<br>(6) Extension。</p><h4 id="2-2-Certificate"><a href="#2-2-Certificate" class="headerlink" title="2.2 Certificate"></a>2.2 Certificate</h4><p>服务端在收到客户端的Client Hello之后，将服务端的X.509证书发送给客户端，最下层证书在前（用户证书在前，上级证书在后）。发送的证书是二进制格式，并非base64之后的格式。</p><h4 id="2-3-Server-key-Exchange-可选"><a href="#2-3-Server-key-Exchange-可选" class="headerlink" title="2.3 Server key Exchange(可选)"></a>2.3 Server key Exchange(可选)</h4><p>DHE_DSS,DHE_RSA,DH_anon,<br>对于使用DHE/ECDHE非对称密钥协商算法的SSL握手，将发送该类型握手。<br>RSA算法不会继续该握手流程（DH、ECDH也不会发送server key exchange）<br>客户端在收到Server Key Exchange后，首先使用服务端证书中的公钥对签名进行RSA解密并校验散列值。如果解密校验通过，则基于ECDH参数中的Pubkey，通过一定算法算出<em><strong>Pre-Master Secret</strong></em><br><img src="https://gitee.com/eightzero/pico/raw/master/Ske.png" alt="ServerkeyExchange"></p><h4 id="2-4-Certificate-Request-可选"><a href="#2-4-Certificate-Request-可选" class="headerlink" title="2.4 Certificate Request(可选)"></a>2.4 Certificate Request(可选)</h4><p>对于重要的保密数据，服务端还需要对客户端进行验证，服务端可以向客户端发出Certificate Request消息，要求客户端发送证书进行合法性验证</p><h4 id="2-5-Server-Hello-Done"><a href="#2-5-Server-Hello-Done" class="headerlink" title="2.5 Server Hello Done"></a>2.5 Server Hello Done</h4><p>通知客户端Server Hello消息结束</p><h3 id="3-客户端回应"><a href="#3-客户端回应" class="headerlink" title="3. 客户端回应"></a>3. 客户端回应</h3><p>客户端收到服务端的Server Hello Done后，首先验证服务端证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。</p><p>（1） 一个随机数。该随机数用服务器公钥加密，防止被窃听。</p><p>（2） 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</p><p>（3） 客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。</p><p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。</p><p>至于为什么一定要用三个随机数，来生成”会话密钥”</p><h4 id="3-1-Certificate-可选"><a href="#3-1-Certificate-可选" class="headerlink" title="3.1. Certificate(可选)"></a>3.1. Certificate(可选)</h4><p>将客户端证书发送给服务端做合法性校验</p><h4 id="3-2-Client-Key-Exchange"><a href="#3-2-Client-Key-Exchange" class="headerlink" title="3.2. Client Key Exchange"></a>3.2. Client Key Exchange</h4><p><img src="https://gitee.com/eightzero/pico/raw/master/Cke.png" alt="ClientKeyExchange"></p><p>客户端密钥交换并通过随机数生成Master-Key</p><h4 id="3-3-Certificate-Verify"><a href="#3-3-Certificate-Verify" class="headerlink" title="3.3. Certificate Verify"></a>3.3. Certificate Verify</h4><p>客户端发送这个类型报文需要满足两个条件：</p><ul><li>服务端请求了客户端证书</li><li>客户端发送了非0长度的证书</li></ul><h4 id="3-4-Change-Cipher-Spec"><a href="#3-4-Change-Cipher-Spec" class="headerlink" title="3.4. Change Cipher Spec"></a>3.4. Change Cipher Spec</h4><p>告知服务端，客户端已经切换到协商好的的加密套件（Cipher Suite），表示随后的信息都将用双方商定的加密方法和密钥发送。</p><h4 id="3-5-Encrypted-Handshake-Message"><a href="#3-5-Encrypted-Handshake-Message" class="headerlink" title="3.5 Encrypted Handshake Message"></a>3.5 Encrypted Handshake Message</h4><p>客户端使用协商好的对称密钥进行加密的第一个报文，目的一个是告诉服务端整个握手过程收到了什么数据，发送了什么数据，保证中间没人篡改报文，二是确认密钥的正确性，如果这个报文加解密校验成功，那么对称密钥就是正确的</p><h3 id="4-服务端最后回应"><a href="#4-服务端最后回应" class="headerlink" title="4. 服务端最后回应"></a>4. 服务端最后回应</h3><h4 id="4-1-Change-Cipher-Spec"><a href="#4-1-Change-Cipher-Spec" class="headerlink" title="4.1 Change Cipher Spec"></a>4.1 Change Cipher Spec</h4><p>编码改变通知，告知客户端，服务端已经切换到选定的加密套件（Cipher Suite），表示随后的信息都将用双方商定的加密方法和密钥发送。</p><h4 id="4-2-Encrypted-Handshake-Message"><a href="#4-2-Encrypted-Handshake-Message" class="headerlink" title="4.2 Encrypted Handshake Message"></a>4.2 Encrypted Handshake Message</h4><p>服务端使用协商好的对称密钥进行加密的第一个报文，目的一个是告诉客户端整个握手过程收到了什么数据，发送了什么数据，保证中间没人篡改报文，二是确认密钥的正确性，如果这个报文加解密校验成功，那么对称密钥就是正确的</p><h3 id="5-Application-Data"><a href="#5-Application-Data" class="headerlink" title="5. Application Data"></a>5. Application Data</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/ApplicationData.png" alt="ApplicationData"></p>]]></content>
    
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go http middleware</title>
    <link href="/2017/11/13/go-http-middleware/"/>
    <url>/2017/11/13/go-http-middleware/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func buildHandlerChain(apiHandler http.Handler) http.Handler &#123;</span><br><span class="line">handler := WithAuthorization(apiHandler)</span><br><span class="line">handler = WithAuthentication(handler)</span><br><span class="line">return handler</span><br><span class="line">&#125;</span><br><span class="line">func WithAuthentication(handler http.Handler) http.Handler &#123;</span><br><span class="line">return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Printf(&quot;----handle Authentication-------\n&quot;)</span><br><span class="line">handler.ServeHTTP(w, req)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func WithAuthorization(handler http.Handler) http.Handler &#123;</span><br><span class="line">return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Printf(&quot;----handle Authorization-------\n&quot;)</span><br><span class="line">handler.ServeHTTP(w, req)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func baseHandler(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Println(&quot;----base handler----\n&quot;)</span><br><span class="line">w.Write([]byte(&quot;hello handler!&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">apiHandler := http.HandlerFunc(baseHandler)</span><br><span class="line">http.Handle(&quot;/&quot;, buildHandlerChain(apiHandler))</span><br><span class="line">http.ListenAndServe(&quot;:3000&quot;, nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">----handle Authentication-------</span><br><span class="line">----handle Authorization-------</span><br><span class="line">----base handler----</span><br><span class="line"></span><br><span class="line">----handle Authentication-------</span><br><span class="line">----handle Authorization-------</span><br><span class="line">----base handler----</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://zenlife.tk/go-http-middleware.md">http://zenlife.tk/go-http-middleware.md</a></li><li><a href="https://stackoverflow.com/questions/51311182/how-to-assign-multiple-handlers-to-the-same-uri-in-go">https://stackoverflow.com/questions/51311182/how-to-assign-multiple-handlers-to-the-same-uri-in-go</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pod创建大致流程</title>
    <link href="/2017/11/08/pod%E5%88%9B%E5%BB%BA%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B/"/>
    <url>/2017/11/08/pod%E5%88%9B%E5%BB%BA%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/eightzero/pico/raw/master/pod.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go restful</title>
    <link href="/2017/10/05/go-restful/"/>
    <url>/2017/10/05/go-restful/</url>
    
    <content type="html"><![CDATA[<h4 id="go-http-web"><a href="#go-http-web" class="headerlink" title="go http web"></a>go http web</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//基础 web server</span><br><span class="line">func simpleHttpServer()&#123;</span><br><span class="line">//1. 往serverMux的 map[string]muxEntry 添加路由规则pattern以及封装了handler的muxEntry</span><br><span class="line">//2. 匹配pattern，Handler被调用</span><br><span class="line">http.HandleFunc(&quot;/hello&quot;, SayHello)</span><br><span class="line">//1. 实例化Server</span><br><span class="line">http.ListenAndServe(&quot;:8000&quot;,nil)</span><br><span class="line">&#125;</span><br><span class="line">func SayHello(w http.ResponseWriter, req *http.Request)  &#123;</span><br><span class="line">fmt.Println(req)</span><br><span class="line">w.Write([]byte(&quot;Hello!!!&quot;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="golang-装饰器模式"><a href="#golang-装饰器模式" class="headerlink" title="golang 装饰器模式"></a>golang 装饰器模式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) &#123;</span><br><span class="line">DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="go-restful"><a href="#go-restful" class="headerlink" title="go-restful"></a>go-restful</h4><p>一个 Container 包含多个 WebService，同时container实现了http.handler接口定义的ServeHTTP方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type Container struct &#123;</span><br><span class="line">   webServicesLock        sync.RWMutex</span><br><span class="line">   webServices            []*WebService //一个Container包含多个webservice</span><br><span class="line">   ServeMux               *http.ServeMux</span><br><span class="line">   isRegisteredOnRoot     bool</span><br><span class="line">   containerFilters       []FilterFunction</span><br><span class="line">   doNotRecover           bool // default is true</span><br><span class="line">   recoverHandleFunc      RecoverHandleFunction</span><br><span class="line">   serviceErrorHandleFunc ServiceErrorHandleFunction</span><br><span class="line">   router                 RouteSelector // default is a CurlyRouter (RouterJSR311 is a slower alternative)</span><br><span class="line">   contentEncodingEnabled bool          // default is false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func (c *Container) ServeHTTP(httpwriter http.ResponseWriter, httpRequest *http.Request) &#123;</span><br><span class="line">    c.ServeMux.ServeHTTP(httpwriter, httpRequest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 webservice 包含多个Route，webservice里定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">type WebService struct &#123;</span><br><span class="line">    rootPath       string</span><br><span class="line">    pathExpr       *pathExpression</span><br><span class="line">    routes         []Route //一个webservice包含多个Route</span><br><span class="line">    produces       []string</span><br><span class="line">    consumes       []string</span><br><span class="line">    pathParameters []*Parameter</span><br><span class="line">    filters        []FilterFunction</span><br><span class="line">    documentation  string</span><br><span class="line">    apiVersion     string</span><br><span class="line"></span><br><span class="line">    typeNameHandleFunc TypeNameHandleFunction</span><br><span class="line"></span><br><span class="line">    dynamicRoutes bool</span><br><span class="line"></span><br><span class="line">    // protects &#x27;routes&#x27; if dynamic routes are enabled</span><br><span class="line">    routesLock sync.RWMutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Path specifies the root URL template path of the WebService.</span><br><span class="line">// All Routes will be relative to this path.</span><br><span class="line">func (w *WebService) Path(root string) *WebService &#123;</span><br><span class="line">w.rootPath = root</span><br><span class="line">if len(w.rootPath) == 0 &#123;</span><br><span class="line">w.rootPath = &quot;/&quot;</span><br><span class="line">&#125;</span><br><span class="line">w.compilePathExpression()</span><br><span class="line">return w</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Route creates a new Route using the RouteBuilder and add to the ordered list of Routes.</span><br><span class="line">func (w *WebService) Route(builder *RouteBuilder) *WebService &#123;</span><br><span class="line">w.routesLock.Lock()</span><br><span class="line">defer w.routesLock.Unlock()</span><br><span class="line">builder.copyDefaults(w.produces, w.consumes)</span><br><span class="line">w.routes = append(w.routes, builder.Build())</span><br><span class="line">return w</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 Route 包含HTTP 协议协议相关的HTTP Request 、HTTP Reponse 、方法等处理。由RouteBuilder传递过来的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type Route struct &#123;</span><br><span class="line">    Method   string</span><br><span class="line">    Produces []string</span><br><span class="line">    Consumes []string</span><br><span class="line">    Path     string // webservice root path + described path</span><br><span class="line">    Function RouteFunction//具体处理函数</span><br><span class="line">    Filters  []FilterFunction</span><br><span class="line">    If       []RouteSelectionConditionFunction</span><br><span class="line"></span><br><span class="line">    // cached values for dispatching</span><br><span class="line">    relativePath string</span><br><span class="line">    pathParts    []string</span><br><span class="line">    pathExpr     *pathExpression // cached compilation of relativePath as RegExp</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// RouteFunction declares the signature of a function that can be bound to a Route.</span><br><span class="line">type RouteFunction func(*Request, *Response)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// To bind the route to a function.</span><br><span class="line">// If this route is matched with the incoming Http Request then call this function with the *Request,*Response pair. Required.</span><br><span class="line">func (b *RouteBuilder) To(function RouteFunction) *RouteBuilder &#123;</span><br><span class="line">b.function = function</span><br><span class="line">return b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-ResourceMethod-and-ResourceMethodContainer"><a href="#1-ResourceMethod-and-ResourceMethodContainer" class="headerlink" title="1. ResourceMethod and ResourceMethodContainer"></a>1. ResourceMethod and ResourceMethodContainer</h3><h3 id="2-Apply-Builder-pattern-to-reduce-clutter"><a href="#2-Apply-Builder-pattern-to-reduce-clutter" class="headerlink" title="2: Apply Builder pattern to reduce clutter"></a>2: Apply Builder pattern to reduce clutter</h3><h3 id="3-Introduce-defaults-on-the-Resource-and-override-per-method-if-needed"><a href="#3-Introduce-defaults-on-the-Resource-and-override-per-method-if-needed" class="headerlink" title="3: Introduce defaults on the Resource and override per method if needed"></a>3: Introduce defaults on the Resource and override per method if needed</h3><h3 id="4-Binding-Routes-to-Functions"><a href="#4-Binding-Routes-to-Functions" class="headerlink" title="4:  Binding Routes to Functions"></a>4:  Binding Routes to Functions</h3><h3 id="5-Document-the-API"><a href="#5-Document-the-API" class="headerlink" title="5: Document the API"></a>5: Document the API</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://ernestmicklei.com/2012/11/go-restful-api-design/">http://ernestmicklei.com/2012/11/go-restful-api-design/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go protobuf</title>
    <link href="/2017/10/03/go-protobuf/"/>
    <url>/2017/10/03/go-protobuf/</url>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Protocol buffers通常称为Protobuf，是Google开发的一种协议，允许对结构化数据进行序列化和反序列化。 谷歌开发它的目的是提供一种比XML更好的方式来进行系统间通信。 因此，他们专注于使其比XML更简单，更小，更快，更易于维护。与此同时，该协议甚至超越了JSON，具有更好的性能，更好的可维护性和更小的尺寸。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>下载 <a href="https://github.com/google/protobuf/releases">protoc</a> 放到 GOPATH/bin</p><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --version</span><br></pre></td></tr></table></figure></li><li><p>proto的go插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure></li><li><p>安装goprotobuf库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/golang/protobuf/proto</span><br></pre></td></tr></table></figure></li></ul><h3 id="编写-proto-文件"><a href="#编写-proto-文件" class="headerlink" title="编写*.proto 文件"></a>编写*.proto 文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;  //指定版本，必须要写（proto3、proto2）</span><br><span class="line">package example;</span><br><span class="line"></span><br><span class="line">message MessageInfo&#123;</span><br><span class="line">    string message = 1;   //消息</span><br><span class="line">    int32 length = 2;    //消息大小</span><br><span class="line">    int32 cnt = 3;      //消息计数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果放在 <code>package main</code> 下，运行时会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># command-line-arguments</span><br><span class="line">./main.go:10:11: undefined: UserInfo</span><br><span class="line">./main.go:17:14: undefined: UserInfo</span><br></pre></td></tr></table></figure><h3 id="生成go文件"><a href="#生成go文件" class="headerlink" title="生成go文件"></a>生成go文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out=. *.proto</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">test := &amp;example.MessageInfo&#123;</span><br><span class="line">Message: &quot;hello world&quot;,</span><br><span class="line">Length: 100,</span><br><span class="line">Cnt: 3,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, _ := proto.Marshal(test)</span><br><span class="line">newTest := &amp;example.MessageInfo&#123;&#125;</span><br><span class="line">err := proto.Unmarshal(data, newTest)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(&quot;test :%+v\n&quot;, test)</span><br><span class="line">fmt.Printf(&quot;newTest :%+v\n&quot;,newTest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test :message:&quot;hello world&quot; length:100 cnt:3 </span><br><span class="line">newTest :message:&quot;hello world&quot; length:100 cnt:3</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker抓包方法</title>
    <link href="/2017/08/01/docker%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/"/>
    <url>/2017/08/01/docker%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-确认容器网络模式"><a href="#1-确认容器网络模式" class="headerlink" title="1. 确认容器网络模式"></a>1. 确认容器网络模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect container_name | grep NetworkMode</span><br></pre></td></tr></table></figure><p>回显：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;NetworkMode&quot;: &quot;default&quot;,</span><br></pre></td></tr></table></figure><h3 id="2-host模式抓包"><a href="#2-host模式抓包" class="headerlink" title="2. host模式抓包"></a>2. host模式抓包</h3><h3 id="3-default模式抓包"><a href="#3-default模式抓包" class="headerlink" title="3. default模式抓包"></a>3. default模式抓包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format &#x27;&#123;&#123;.State.Pid&#125;&#125;&#x27; container_name</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">73602</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/run/netns</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /proc/73602/ns/net /var/run/netns/container_name</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip netns exec container_name tcpdump -i eth0 -s0 -w 1.pcap</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos7搭建k8s</title>
    <link href="/2017/08/01/Centos7%E6%90%AD%E5%BB%BAk8s/"/>
    <url>/2017/08/01/Centos7%E6%90%AD%E5%BB%BAk8s/</url>
    
    <content type="html"><![CDATA[<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h2 id="关闭Swap"><a href="#关闭Swap" class="headerlink" title="关闭Swap"></a>关闭Swap</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a </span><br><span class="line">sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br></pre></td></tr></table></figure><h2 id="关闭Selinux"><a href="#关闭Selinux" class="headerlink" title="关闭Selinux"></a>关闭Selinux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setenforce  0 </span><br><span class="line">sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/sysconfig/selinux </span><br><span class="line">sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config </span><br><span class="line">sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/sysconfig/selinux </span><br><span class="line">sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/selinux/config  </span><br><span class="line">modprobe br_netfilter</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br><span class="line"></span><br><span class="line">ls /proc/sys/net/bridge</span><br></pre></td></tr></table></figure><h2 id="设置内核、K8S的yum源"><a href="#设置内核、K8S的yum源" class="headerlink" title="设置内核、K8S的yum源"></a>设置内核、K8S的yum源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="下载kubelet、-kubectl、-kubeadm、-docker、-kubernetes-cni"><a href="#下载kubelet、-kubectl、-kubeadm、-docker、-kubernetes-cni" class="headerlink" title="下载kubelet、 kubectl、 kubeadm、 docker、 kubernetes-cni"></a>下载kubelet、 kubectl、 kubeadm、 docker、 kubernetes-cni</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubeadm kubelet kubectl kubernetes-cni docker</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable kubelet &amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h2 id="设置docker加速器"><a href="#设置docker加速器" class="headerlink" title="设置docker加速器"></a>设置docker加速器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="docker代理设置-amp-cgroupfs设置"><a href="#docker代理设置-amp-cgroupfs设置" class="headerlink" title="docker代理设置 &amp; cgroupfs设置"></a>docker代理设置 &amp; cgroupfs设置</h2><pre><code>vi /usr/lib/systemd/system/docker.service</code></pre><p> 修改cgroup driver：native.cgroupdriver=systemd修改为native.cgroupdriver=cgroupfs</p><p> 启动docker并设置开启自启<br>systemctl enable docker &amp; systemctl daemon-reload &amp; systemctl restart docker</p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2017/01/14/hello-world/"/>
    <url>/2017/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>hello world!</p><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Deep thinking, Don&#39;t repeat</title>
    <link href="/2016/12/06/deepThinking-dontRepeat/"/>
    <url>/2016/12/06/deepThinking-dontRepeat/</url>
    
    <content type="html"><![CDATA[<blockquote><p>脚踏实地，也要仰望星空，更要停下思考，不忘初心，方得始终</p></blockquote><p>天道不一定酬勤，深度思考比勤奋工作更重要。</p><span id="more"></span><p>这是晨星资本刘芹的一篇演讲稿中的观点。雷军给刘芹打了一个电话，跟他说：“我一直认为你做投资是有自己的独到之处，你能告诉我，到底怎么样才能成为一个成功的投资者？你为什么投资能做的非常不错呢？”</p><p>他当时给了雷军一个答案，“我相信我极其的勤奋。我相信天道一定能酬勤!我相信如果勤奋的话，你一定能做一个非常好的投资者。”他本来以为这个答案至少能得到雷军的部分认同，结果他没想到，雷军给了他一个让人惊讶的反馈。这个答案就是天道并非一定酬勤。这个观点当时给了他非常大的刺激。</p><p>后来慢慢明白了，可能勤奋是必要的，但是勤奋是远远不够的。</p><p>需要合适的机遇，机遇通常是难以捕捉的，因此需要根据时代背景市场成熟度，通过深度思考去识别和发现。往往一些伟大的创业灵感来源于一些易于被忽略的细节。刘芹在2007年投资UCWeb不被理解，但他认为UCWeb有价值，因为他在浏览器上放了分类导航目录（网站导航）。当时他的想不出来，为什么在美国，雅虎首先出现，一个人工分类导航列表，而后谷歌的出现将整个雅虎价值打没。在国内，却是先有的百度，而后有的hao123的导航页，为什么？</p><p>这就存在一个非常非常有意思的核心细节。这说明在中国我们有大量的网民，是不知道怎么用拼音的，不知道怎么用键盘的，甚至是不知道怎么用搜索引擎的。拉丁字母打一个字做搜索非常简单，而中国用拼音写汉字输入到搜索框是很困难的。</p><p>这说明，第一，流量在互联网里是很核心；第二，流量的实现不一定纯粹是中国照搬美国。</p><p>2007年，没有安卓，没有iPhone。2007年，是塞班的时代。塞班的特点，是用手机键盘输入汉字，更加痛苦。用手机键盘，要去按住搜索框更加痛苦。所以我们发现我们的答案很简单，UCweb在2007年塞班的无线互联网时代是流量聚合核心。</p><p>这就是他2007年投资UCweb最核心的一个观点。这个决策的核心点，来自于我们对hao123一个不起眼的现象的思考。所以我想在这里讲到，作为一个创业者，当你在规划你的创业愿景的时候，不要去捕捉一些概念，要去理解你的核心市场的那些核心细节。小中见大。很多伟大的创业者的灵感是来自于一些你所忽略的细节，一些蛛丝马迹的细节隐藏了大量的有益的洞察力。</p><p>洞见力是你有一个愿景的源发点。我看到了很多优秀的创业者，无论是周鸿祎，雷军，马化腾，他们所有都有着极强的洞察力。这些洞察力全是来源于被常人所忽略的蛛丝马迹中所捕捉到。</p><p>只有带有深度思考，并勤奋工作，才能让你达成你的生活愿望，反之，则是在重复劳动，浪费生命。</p><p>知识爆炸的时代，决定性的能力是抽象能力，从知识碎片中提出脉络，自成体系，并应用于世界的认识与改造，是你对学习、职场、自我认知的深度思考能力。</p><p>谈到“深度思考”，爱因斯坦说过这么一段话：“如果给我1个小时解答一道决定我生死的问题，我会花55分钟来弄清楚这道题到底是在问什么。一旦清楚了它到底在问什么，剩下的5分钟足够回答这个问题。”</p><p>拼命干很重要，怎么强调都不为过，它是优秀结果的必要非充分条件。那么如何让它变得充分必要？</p><p>拒绝思维懒惰，习惯于深度思考，永远不要用战术上的勤奋掩盖战略上的懒惰。</p><p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_think2.jpeg"></p><h2 id="深度思考需要的几个前提"><a href="#深度思考需要的几个前提" class="headerlink" title="深度思考需要的几个前提"></a>深度思考需要的几个前提</h2><h3 id="1-内心意愿"><a href="#1-内心意愿" class="headerlink" title="1.内心意愿"></a>1.内心意愿</h3><p>再好的事自己不想做也无济于事，内心想有这个意愿才能开启思考之门。</p><h3 id="2-深度思考是自己的事"><a href="#2-深度思考是自己的事" class="headerlink" title="2.深度思考是自己的事"></a>2.深度思考是自己的事</h3><p>上学的时候有这个感觉，觉得学习是给别人学习的。在学校老师逼着学，到家家长逼着学，写完作业了吗?不写完作业不准睡觉，考试不好回到家还得挨揍。 </p><p>长大后才明白学习是自己的，人和人的差距也是在毕业之后发生的。那些把读书当成自己事的人，毕业后更懂得自学的人通常混的都不会太差。深度思考始终是自己的事，虽一开始很难深入时间久了有了自己的方法论也就不难了。</p><h3 id="3-一个自己喜欢的领域"><a href="#3-一个自己喜欢的领域" class="headerlink" title="3. 一个自己喜欢的领域"></a>3. 一个自己喜欢的领域</h3><p>《星际穿越》中，没有那种强烈的使命感和对亲人的爱，库珀是回不到地球的，同样也谈不上拯救人类了。你选择的领域直接影响你日后成就的大小。</p><h3 id="4-决心"><a href="#4-决心" class="headerlink" title="4. 决心"></a>4. 决心</h3><p>光想是远远不够的，没有决心就会给自己找各种借口，我没时间，工作都累个半死还有心思想这个，今天不下定决心深入思考、研究明天迟早是要还的。</p><p>更重要的是想成事一定要早，时间不等人啊。不要自欺欺人，不深刻思考也能成就人生，成为人生赢家，真的是白日梦啊。上帝只做了两件事，一是创造环境，二是建立竞争，羚羊时时刻刻想着怎么跑过狮子，必须有这种决心，否则只会成为狮子的盘中餐。</p><p>找到自己深度思考的土壤，还得拥有一套开垦土壤的工具，即有一套深度思考的方法论。</p><h2 id="深度思考的方法论"><a href="#深度思考的方法论" class="headerlink" title="深度思考的方法论"></a>深度思考的方法论</h2><h3 id="1-可繁殖的知识量"><a href="#1-可繁殖的知识量" class="headerlink" title="1.可繁殖的知识量"></a>1.可繁殖的知识量</h3><p>可繁殖的知识这个概念来源于李笑来，李笑来把知识分为两种，一种是不可繁殖的，一种是可繁殖的，比如秦始皇是哪年统一六国的，这种知识是不可繁殖的，但像深度思考比勤奋更重要就是可繁殖的，它可以让你提高、进步，让你变得更深刻。  </p><p>不能深刻思考的根本原因是见识少，知识积累量不够。现在是信息爆炸的时代，每天都产生大量信息，但并不是每条信息都是有价值的，对充斥的信息首先要做的就是甄别信息有无价值，无价值可以不看，重点是看有价值的。</p><p>真正聪明的人都是下苦功夫的，曾国藩读书的原则是一本不点读完决不读下一本书，真正的好书不能求快，快即是慢，快即是无，理解最重要。</p><h3 id="2-思考频次"><a href="#2-思考频次" class="headerlink" title="2.思考频次"></a>2.思考频次</h3><p>针对问题多思、多想，思、想，思、想不动脑哪来的思想。李小龙曾经也说明过这个问题，他说不怕一个人会100种功夫，只怕一个人把一个招式练100遍。</p><p>好功夫需要速度、力量、技巧，练100种功夫每种都是浅尝辄止，不能实战，把一招练100遍往往可以一招致命。对一个问题若想深刻想个一两遍想不明白了，通常都是很痴迷的状态，除了睡觉不想其他时间都在思索。</p><h3 id="3-多维度思考"><a href="#3-多维度思考" class="headerlink" title="3.多维度思考"></a>3.多维度思考</h3><p>从前，有五个盲人，从来没有见过大象，不知道大象长的什么样，他们就决定去摸摸大象。第一个人摸到了鼻子，他说：“大象像一条弯弯的管子。”第二个人摸到了尾巴，他说：“大象像个细细的棍子。”第三个人摸到了身体，他说：“大象像一堵墙。”第四个人摸到了腿，他说：“大象像一根粗粗的柱子，”。但他们摸到的都是大象的一部分而非全部。</p><p>思考过程就像是盲人摸象的过程，努力从多层次，多角度看待问题。要想多层次思考的跟自己较劲，不能想到一两层就饶了自己，想到一两层以后按照一定的逻辑关系，把所有的问题都想全了。认识大象的过程其实是人类拥有的三种逻辑思维之一的结构思考逻辑，按照结构思考逻辑把各个部分找全。</p><h3 id="4-细节"><a href="#4-细节" class="headerlink" title="4.细节"></a>4.细节</h3><p>笑傲江湖第二季有个表演者叫沈小龙，他把打喷嚏分解开来演，很好玩。有时候我们对问题认识不深，一定程度上是对细节不掌握，仅仅了解个笼统的概念不往深里追求，追的越深认识越深刻。事物的本质都是被一层一层表象包裹着，不追问到底还以为表象呈现的东西是事物本质呢，这就误导自己了。</p><p>深刻是一种态度，事事不求细节，很难想象他能优秀到哪儿去。</p><h3 id="5-金字塔原理"><a href="#5-金字塔原理" class="headerlink" title="5.金字塔原理"></a>5.金字塔原理</h3><p>《金字塔原理》是美国作者芭芭拉·明托写的一本关于思考、表达和解决问题逻辑的书.</p><p>金字塔原理是很好的思考和表达方法。那么在思考、表达的时候为什么要构建金字塔结构呢?</p><p>因为研究表明人类能够记住、理解最多的项目是7个，比如：你写了一遍文章或做个演讲，把下图的论据A、B、C、A1、A2、A3……，一股脑的讲出来、写出来恐怕别人很难理解的，所以需要把多于7个的项目通过演绎推理和归纳推理组合成几组，同组内的内容按照因果逻辑、结构逻辑、程度逻辑展开，然后以此类推。</p><p>人的思考过程都是自下而上的，金字塔原理观点先行，先提出观点，然后通过归纳和演绎思考论据，把论据找充分。</p><p>上层思想是下层思想的总结，下层是上层的解释，这种结构就是疑问\回答式，下层其实是对上层的回答。通过疑问\回答不断深入构成整个金字塔结构，写出一遍文章。</p><h3 id="6-概念清晰"><a href="#6-概念清晰" class="headerlink" title="6.概念清晰"></a>6.概念清晰</h3><p>以前看过一本幼儿教育的书，在婴儿呀呀学语的时候父母说话往往都是把馒头说成馒馒、把虫子说成虫虫、把的凳子说成凳凳，这本书建议别用这种语言和孩子交流，是馒头就说馒头，是虫子就说虫子，是凳子就说凳子，语言基础是文字，文字是思想和逻辑的基础，概念清楚思想才能清晰、深刻。</p><h3 id="7-写作"><a href="#7-写作" class="headerlink" title="7.写作"></a>7.写作</h3><p>写东西是整理思路最好的方法，把所思所想讲出来、写出来与他人分享才能变成自己的。<br>在写东西的时候刚坐下来一点思路都没有，写着写着思路就打开了，写东西是深度思考的过程，它会把存储在大脑中的不同区域零散的知识点调取出来组合成有深度的思想体系。</p><p>当你在学习、职场、自我认知方面掌握了深度思考的能力，就可以游刃有余地掌控自己的生活。</p><p>源自：</p><p><a href="http://blog.sina.com.cn/s/blog_4bdc7dbf0102wirp.html">比勤奋更重要的，是深度思考的能力</a></p><p><a href="http://www.kaoder.com/?m=thread&a=view&fid=53&tid=258264">天道不一定酬勤，深度思考比勤奋工作更重要</a></p><p><a href="http://mp.weixin.qq.com/s/Cb2qLJJjnDa6UQPKjswjBg">远离你身边“勤奋”的人</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Read</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嫌疑人x的献身</title>
    <link href="/2016/11/13/%E5%AB%8C%E7%96%91%E4%BA%BAx%E7%9A%84%E7%8C%AE%E8%BA%AB/"/>
    <url>/2016/11/13/%E5%AB%8C%E7%96%91%E4%BA%BAx%E7%9A%84%E7%8C%AE%E8%BA%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>究竟爱一个人，可以爱到什么地步？ 究竟什么样的邂逅，可以舍命不悔？ 逻辑的尽头，不是理性与秩序的理想国，而是我用生命奉献的爱情</p></blockquote><span id="more"></span><p>作为一本推理小说，此书显得有些“异类”，推理小说通常直到最后才会将凶手告诉读者（参照名侦探柯南的小黑人）。然而，这部小说一开始就将犯案动机、犯案手法、凶手交代的一清二楚。看到这，难免会让读者失去好奇心。但是，这就是本书独特的地方。就在靖子母女俩失手杀死一直死缠烂打的瘟神前夫而手足无措的时候，隔壁的爱慕靖子的数学老师石神闻声出现，声称自己要帮助他们掩盖真相。由此，剧情步入正轨，石神利用自己完美的逻辑架设了一个极致的骗局。</p><p>之后，在旧江户川的堤防发现一具弃置的尸体，脸孔和指纹被破坏，旁边扔了一辆崭新的自行车，两个轮胎都被放了气，附近还有为烧完的衣物。警方通过自行车找到失主，确认案发时间。同时通过彻底调查近期消失的男子，查找到富坚住的旅馆，经过和旅馆的指纹比对，认定该弃尸就是富坚。此时，警方将富坚的前妻靖子列为嫌疑犯。</p><p>令石神没想到的是，物理天才汤川学的出现。作为最了解这位达摩石神的大学同学，石神遇到最不想遇到的对手。20多年后的重逢，虽然各自都有变化，但是汤川还一直对这位挚友印象深刻，一个追求逻辑和真理而不在乎外表形象的人。也正是如此，当阔别重逢后，石神竟然会注意自己头发稀少和长相问题，引起了汤川的怀疑。随后两人来到靖子工作的便当店，碰巧靖子以前的老客户工藤前来找靖子，此时，石神脸上的嫉妒被敏锐的汤川给察觉了。作为数学天才的石神，只要是合乎逻辑的事，他什么都干的出来，可是关于感情，关乎人性，却是他无论如何也不能找到最合乎逻辑的掩饰。</p><p>警方一直想找到证据，证明花岗靖子就是杀人犯，可是无论警方如何努力，靖子总有模糊却确凿的证据，证明3月10那天不在场。此时，汤川率先意识到，这种种有些异常而又合乎逻辑的证据，以及石神对靖子的情感，有可能他的挚友和这个案件有牵扯。在警方一筹莫展的时候，刑警草薙在调查中发现他的好友汤川假借自己的名义让石神监视靖子，于是向汤川求证，可是这次汤川却有些反常，不愿意告诉他。草薙开始怀疑石神，去便当店调查，从店主口中听闻石神可能暗恋靖子，每天都去买便当。</p><p>草薙凭着直觉来找石神调查他的不在场证明，得知石神在十号和十一号早上连续请假。而后，从事务员口中获悉，石神几乎不请假，只是每个月大概会有一次，因致力于数学研究，而彻夜未眠，以至于第二天上午请假休息。这个异常的连续请假引起草薙怀疑。</p><p>当草薙将石神的异常请假，以及石神口中所说的出数学题的思想“自以为是的盲点”告知汤川时，汤川脸色大变，发觉了整个案件的真相。之后，汤川特意在隅田川边，一排“罐男”的塑胶布小屋附近等石神，向石神袒露了自己的推理。石神心想，自己的骗局，终究还是被汤川识破。</p><p>石神自首，坦白自己杀人罪行，并用种种证据将自己设定为变态跟踪狂，警方的作业系统开始走向结案状态，并向石神提起诉讼。然而案件的真相却远非如此简单，随着汤川向靖子袒露石神的真相，本书剧情达到高潮。</p><p>只擅长数学的天才石神，在自我价值得不到实现，动了轻生念头的时候，靖子母女俩的出现，那转动的明眸，让石神发现生活中还有如同解开数学题一样的美感。邂逅了靖子母女后，石神的生活为之一变，他压根没有想到和他们发生关联的欲望，只觉得她们如同崇高的数学一样，只要自己能沾到边就够幸福的了。也正是如此纯粹的感情，对于石神来说，甚至是生命的希望。有时候，一个人只要好好活着，就足以拯救某人。</p><p>这一切的美好由于富坚的死亡而失去光芒。石神为了掩护靖子，同时也为了断了自己的后路，杀害了流浪者“技师”来误导警方对犯案时间的判断，同时给靖子制造足够多不在场证明，打从一开始，得知靖子杀害了前夫富坚时，他就做了最坏的打算，打算献出自己的生命，让靖子母女俩获取幸福。然而，知道真相的靖子，内心承受剧烈的自责，她为自己还心安理得的与工藤交往而自责，也无法承受工藤的求婚，更不知自己为何有这么多人爱，还是得不到幸福，最终，在自己女儿自杀未遂时，她最后一道防线坍塌，于是她前去自首。石神看见自己费尽心机想拯救的人，跑来自首，内心崩溃，像野兽般发出绝望和混乱的哀嚎，嘶吼着，仿佛呕出灵魂。</p><p>p不等于np，自己想出的解答和判断别人说的解答是否正确，何者比较简单。这是石神在自首前向汤川抛出的问题，关于这件命案，石神给出的解答是自己是凶手，所有罪行都是自己犯的，和靖子毫无关系。而汤川无论如何无法找出证明这个解是错误的证据，此时，作为破解者的汤川想到了石神这个命题最大的漏洞，就是靖子，石神的这个无解的解的前提是靖子，因此他对靖子隐瞒了真相，直到汤川告知真相之前，靖子始终认为那具弃尸就是自己杀死的前夫，石神只是帮助他掩藏真相，没想到石神竟然为了帮助自己逃脱干系竟做到这种程度，亲手杀了另一个人。任谁听了这样的真相，都无法逃脱内心的谴责，更何谈能幸福的生活。石神出的题的确无懈可击，但是在人性面前，谁也无法安心接受这样的解，包括靖子。</p><blockquote><p>如果你过得不幸福，我的行为将完全成为徒劳</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS应用签名原理</title>
    <link href="/2016/09/08/iOS%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86/"/>
    <url>/2016/09/08/iOS%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="基本签名原理："><a href="#基本签名原理：" class="headerlink" title="基本签名原理："></a>基本签名原理：</h3><p>App签名使用到了数字签名，通过hash算法提取摘要，使用苹果私钥加密，形成签名，然后将原始数据，加密的的摘要（签名）及相关信息放到一起，形成已签名的数据（数字证书）。</p><span id="more"></span><h3 id="iOS-App-签名机制："><a href="#iOS-App-签名机制：" class="headerlink" title="iOS App 签名机制："></a>iOS App 签名机制：</h3><h3 id="CertificateSigningRequest-certSigningRequest"><a href="#CertificateSigningRequest-certSigningRequest" class="headerlink" title="CertificateSigningRequest.certSigningRequest"></a>CertificateSigningRequest.certSigningRequest</h3><p>在PKI系统中，Certificate siging request（CSR）是用于到Certificate Authority申请证书的，包含申请证书的一些必要信息</p><p>*.certSigningRequest包含了如下信息：</p><ul><li>申请者信息</li><li>申请者公钥</li><li>摘要算法和公钥加密算法</li></ul><h3 id="发布证书"><a href="#发布证书" class="headerlink" title="发布证书"></a>发布证书</h3><p>在苹果服务端上传了*.certSigningRequest后，苹果服务端会取出CertSigningRequest中的公钥，添加账号信息，通过哈希算法生成一个摘要，使用苹果私钥对摘要加密，形成数字签名。发布证书包含如下信息：</p><ul><li>申请者信息</li><li>申请者公钥</li><li>通过苹果私钥加密的摘要—-数字签名</li></ul><h3 id="Provision-Profile"><a href="#Provision-Profile" class="headerlink" title="Provision Profile"></a>Provision Profile</h3><p>签名文件在苹果开发者网站生成，生成时需要关联App ID，发布证书。*.mobileprovision文件主要包含了如下信息：</p><ul><li>APP ID（Bundle ID/application-identifier）</li><li>Entitlements （权限列表）</li><li>DeveloperCertificates（使用的证书）</li><li>ExpirationDate（签名文件过期时间点）</li><li>ProvisionedDevices（可安装的设备列表的UDID，development证书特有，distribution是ProvisionAllDevices）</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[] (<a href="http://www.youdzone.com/signature.html">http://www.youdzone.com/signature.html</a>)</p><p>[] (<a href="https://www.objc.io/issues/17-security/inside-code-signing/">https://www.objc.io/issues/17-security/inside-code-signing/</a>)</p><p>[] (<a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929-CH1-SW3">https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929-CH1-SW3</a>)</p><p>[] (<a href="http://blog.cnbang.net/tech/3386/">http://blog.cnbang.net/tech/3386/</a>)</p><p>[] (<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a>)</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>申请移动设备管理厂商(MDM Vendor)</title>
    <link href="/2016/07/01/MDM-vendor/"/>
    <url>/2016/07/01/MDM-vendor/</url>
    
    <content type="html"><![CDATA[<h2 id="申请移动设备管理厂商-MDM-Vendor"><a href="#申请移动设备管理厂商-MDM-Vendor" class="headerlink" title="申请移动设备管理厂商(MDM Vendor)"></a>申请移动设备管理厂商(MDM Vendor)</h2><p>前提：必须是苹果企业开发者</p><p>前往苹果开发者网站申请成为<a href="https://developer.apple.com/contact/submit/">MDM Vendor</a>，申请成功后在开发者网站可以看到多出一个MDM CSR选项</p><p>![](<a href="https://gitee.com/eightzero/pico/raw/master/MDM">https://gitee.com/eightzero/pico/raw/master/MDM</a> CSR.png)</p><span id="more"></span><h2 id="MDM提供商侧-MDM-vendor"><a href="#MDM提供商侧-MDM-vendor" class="headerlink" title="MDM提供商侧(MDM vendor)"></a>MDM提供商侧(MDM vendor)</h2><h3 id="创建CSR"><a href="#创建CSR" class="headerlink" title="创建CSR"></a>创建CSR</h3><h3 id="生成MDM证书"><a href="#生成MDM证书" class="headerlink" title="生成MDM证书"></a>生成MDM证书</h3><h3 id="下载苹果WWDR和苹果根证书"><a href="#下载苹果WWDR和苹果根证书" class="headerlink" title="下载苹果WWDR和苹果根证书"></a>下载苹果WWDR和苹果根证书</h3><p>地址：</p><p><a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer">WWDR internediate certificate</a>  </p><p><a href="http://www.apple.com/appleca/AppleIncRootCertificate.cer">Apple root certificate</a></p><h3 id="转化成PEM"><a href="#转化成PEM" class="headerlink" title="转化成PEM"></a>转化成PEM</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform der -in mdm_identity.cer -out mdm.pem</span><br><span class="line">openssl x509 -inform der -in AppleWWDRCA.cer -out intermediate.pem</span><br><span class="line">openssl x509 -inform der -in AppleIncRootCertificate.cer -out root.pem</span><br></pre></td></tr></table></figure><h2 id="MDM使用侧-customer"><a href="#MDM使用侧-customer" class="headerlink" title="MDM使用侧(customer)"></a>MDM使用侧(customer)</h2><h3 id="创建CSR-1"><a href="#创建CSR-1" class="headerlink" title="创建CSR"></a>创建CSR</h3><h3 id="CSR签名成encoded-plist"><a href="#CSR签名成encoded-plist" class="headerlink" title="CSR签名成encoded_plist"></a>CSR签名成encoded_plist</h3><p>PYTHON：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line">from plistlib import writePlistToString</span><br><span class="line">import os</span><br><span class="line">import subprocess</span><br><span class="line">from base64 import b64encode</span><br><span class="line">import sys</span><br><span class="line">import urllib2</span><br><span class="line"></span><br><span class="line">def p(s):</span><br><span class="line">sys.stdout.write(s)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">def mdm_vendor_sign():</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">This utility will create a properly encoded certifiate signing request</span><br><span class="line">that you can upload to identity.apple.com/pushcert</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=mdm_vendor_sign.__doc__)</span><br><span class="line">parser.add_argument(&#x27;--key&#x27;, help=&#x27;Private key&#x27;, required=True)</span><br><span class="line">parser.add_argument(&#x27;--csr&#x27;, help=&#x27;Certificate signing request&#x27;, required=True)</span><br><span class="line">parser.add_argument(&#x27;--mdm&#x27;, help=&#x27;MDM vendor certificate&#x27;, required=True)</span><br><span class="line">parser.add_argument(&#x27;--out&#x27;, help=&#x27;Output filename&#x27;, required=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cli_args = vars(parser.parse_args())</span><br><span class="line"></span><br><span class="line"># Verify CSR</span><br><span class="line"># openssl req -text -noout -verify -in CSR.csr</span><br><span class="line">p(&#x27;Verifying %s ... &#x27; % cli_args[&#x27;csr&#x27;])</span><br><span class="line">csr_file = open(cli_args[&#x27;csr&#x27;]).read()</span><br><span class="line">args = [&#x27;openssl&#x27;, &#x27;req&#x27;, &#x27;-noout&#x27;, &#x27;-verify&#x27; ]</span><br><span class="line">command = subprocess.Popen(args, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line">output, error = command.communicate(input = csr_file)</span><br><span class="line">if output.rstrip().split(&#x27;\n&#x27;)[0] == &#x27;verify OK&#x27;:</span><br><span class="line">p(&#x27;OK\n&#x27;)</span><br><span class="line">else:</span><br><span class="line">p(&#x27;FAILED\n&#x27;)</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Verify private key</span><br><span class="line"># openssl rsa -in privateKey.key -check</span><br><span class="line">p(&#x27;Verifying %s ... &#x27; % cli_args[&#x27;key&#x27;])</span><br><span class="line">key_file = open(cli_args[&#x27;key&#x27;]).read()</span><br><span class="line">args = [&#x27;openssl&#x27;, &#x27;rsa&#x27;, &#x27;-check&#x27;, &#x27;-noout&#x27; ]</span><br><span class="line">command = subprocess.Popen(args, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line">output, error = command.communicate(input = key_file)</span><br><span class="line">if output.rstrip().split(&#x27;\n&#x27;)[0] == &#x27;RSA key ok&#x27;:</span><br><span class="line">p(&#x27;OK\n&#x27;)</span><br><span class="line">else:</span><br><span class="line">p(&#x27;FAILED\n\n&#x27;)</span><br><span class="line">print &quot;&quot;&quot;If you don&#x27;t have the plain private key already, you need</span><br><span class="line">to extract it from the pkcs12 file...</span><br><span class="line">First convert to PEM</span><br><span class="line">openssl pkcs12 -in filename.p12 -nocerts -out key.pem</span><br><span class="line">Then export the certificate file from the pfx file</span><br><span class="line">openssl pkcs12 -in filename.pfx -clcerts -nokeys -out cert.pem</span><br><span class="line">Lastly Remove the passphrase from the private key</span><br><span class="line">openssl rsa -in key.pem -out the_private_key.key</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Verify MDM vendor certificate</span><br><span class="line"># openssl x509 -noout -in mdm.cer -inform DER</span><br><span class="line">p(&#x27;Verifying %s ... &#x27; % cli_args[&#x27;mdm&#x27;])</span><br><span class="line">mdm_cert_file = open(cli_args[&#x27;mdm&#x27;],&#x27;rb&#x27;).read()  # Binary read</span><br><span class="line">args = [&#x27;openssl&#x27;, &#x27;x509&#x27;, &#x27;-noout&#x27;, &#x27;-inform&#x27;, &#x27;DER&#x27; ]</span><br><span class="line">command = subprocess.Popen(args, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line">output, error = command.communicate(input = mdm_cert_file)</span><br><span class="line">if len(output) == 0:</span><br><span class="line">p(&#x27;OK\n&#x27;)</span><br><span class="line">else:</span><br><span class="line">p(&#x27;FAILED\n&#x27;)</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Convert CSR to DER format</span><br><span class="line"># openssl req -inform pem -outform der -in customer.csr -out customer.der</span><br><span class="line">p(&#x27;Converting %s to DER format... &#x27; % cli_args[&#x27;csr&#x27;])</span><br><span class="line">args = [&#x27;openssl&#x27;, &#x27;req&#x27;, &#x27;-inform&#x27;, &#x27;pem&#x27;, &#x27;-outform&#x27;, &#x27;der&#x27; ]</span><br><span class="line">command = subprocess.Popen(args, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line">output, error = command.communicate(input = csr_file)</span><br><span class="line">if error:</span><br><span class="line">p(&#x27;FAILED\n&#x27;)</span><br><span class="line">return</span><br><span class="line">p(&#x27;OK\n&#x27;)</span><br><span class="line">csr_der = output</span><br><span class="line">csr_b64 = b64encode(csr_der)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Sign the CSR with the private key </span><br><span class="line"># openssl sha1 -sign private_key.key -out signed_output.rsa data_to_sign.txt</span><br><span class="line">p(&#x27;Signing CSR with private key... &#x27;)</span><br><span class="line">args = [&#x27;openssl&#x27;, &#x27;sha1&#x27;, &#x27;-sign&#x27;, cli_args[&#x27;key&#x27;] ]</span><br><span class="line">command = subprocess.Popen(args, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line">output, error = command.communicate(input = csr_der)</span><br><span class="line">if error:</span><br><span class="line">p(&#x27;FAILED\n&#x27;)</span><br><span class="line">return</span><br><span class="line">p(&#x27;OK\n&#x27;)</span><br><span class="line">signature_bytes = output</span><br><span class="line">signature = b64encode(signature_bytes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cer_to_pem(cer_data):</span><br><span class="line"># openssl x509 -inform der -in mdm.cer -out mdm.pem</span><br><span class="line"># -in and -out flags are handled by STDIN and STDOUT</span><br><span class="line">args = [&#x27;openssl&#x27;, &#x27;x509&#x27;, &#x27;-inform&#x27;, &#x27;der&#x27; ]</span><br><span class="line">command = subprocess.Popen(args, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.STDOUT)</span><br><span class="line">output, error = command.communicate(input = cer_data)</span><br><span class="line">if error:</span><br><span class="line">p(&#x27;Error converting from cer to pem: %s&#x27; % error)</span><br><span class="line">return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># TODO : Probably should verify these too</span><br><span class="line"></span><br><span class="line">p(&#x27;Downloading WWDR intermediate certificate...&#x27;)</span><br><span class="line">intermediate_cer = urllib2.urlopen(&#x27;https://developer.apple.com/certificationauthority/AppleWWDRCA.cer&#x27;).read()</span><br><span class="line">p(&#x27; converting to pem...&#x27;)</span><br><span class="line">intermediate_pem = cer_to_pem(intermediate_cer)</span><br><span class="line">p(&#x27;OK\n&#x27;)</span><br><span class="line"></span><br><span class="line">p(&#x27;Downloading Apple Root Certificate...&#x27;)</span><br><span class="line">root_cer = urllib2.urlopen(&#x27;http://www.apple.com/appleca/AppleIncRootCertificate.cer&#x27;).read()</span><br><span class="line">p(&#x27; converting to pem...&#x27;)</span><br><span class="line">root_pem = cer_to_pem(root_cer)</span><br><span class="line">p(&#x27;OK\n&#x27;)</span><br><span class="line"></span><br><span class="line">mdm_pem = cer_to_pem(mdm_cert_file)</span><br><span class="line"></span><br><span class="line">p(&#x27;Finishing...&#x27;)</span><br><span class="line">plist_dict = dict(</span><br><span class="line">    PushCertRequestCSR = csr_b64,</span><br><span class="line">    PushCertCertificateChain = mdm_pem + intermediate_pem + root_pem,</span><br><span class="line">    PushCertSignature = signature</span><br><span class="line">)</span><br><span class="line">plist_xml = writePlistToString(plist_dict)</span><br><span class="line">plist_b64 = b64encode(plist_xml)</span><br><span class="line"></span><br><span class="line">output_filename =  cli_args[&#x27;out&#x27;] if  cli_args[&#x27;out&#x27;] else &#x27;plist_encoded&#x27;</span><br><span class="line">write_path = os.path.join(os.getcwd(), output_filename)</span><br><span class="line">output = open(write_path, &#x27;wb&#x27;)</span><br><span class="line">output.write(plist_b64)</span><br><span class="line">output.close()</span><br><span class="line">p(&#x27;DONE\n\nGo upload file \&#x27;%s\&#x27; to identity.apple.com/pushcert !\n&#x27; % output_filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">mdm_vendor_sign()</span><br></pre></td></tr></table></figure><h3 id="创建或更新MDM证书"><a href="#创建或更新MDM证书" class="headerlink" title="创建或更新MDM证书"></a>创建或更新MDM证书</h3><p><a href="https://identity.apple.com/pushcert/">iOS Push CERT</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>MDM Vendor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="/2016/06/15/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2016/06/15/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_hexo0.png"></p><span id="more"></span><h3 id="零"><a href="#零" class="headerlink" title="零"></a>零</h3><p>为什么要写博客？备忘，提供持续学习动力，提高语言组织能力（<a href="https://zhuanlan.zhihu.com/p/19743861?columnSlug=cnfeat">为什么你要写博客</a>）。为什么要搭建独立博客？为了获取更大的自由度，不自由，何来独立。同时资料保存在本地，以免丢失。</p><h3 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h3><blockquote><p>mac用户　　　搜索关键词：mac hexo github 博客</p></blockquote><h4 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h4><p><a href="http://www.jianshu.com/p/4eaddcbe4d12">5分钟 搭建免费个人博客</a></p><h4 id="申请个性域名来搭建"><a href="#申请个性域名来搭建" class="headerlink" title="申请个性域名来搭建"></a>申请个性域名来搭建</h4><p><a href="http://www.jianshu.com/p/99665608d295">如何在一天之内搭建以你自己名字为域名且具备cool属性的个人博客</a></p><blockquote><p>windows用户　　　搜索关键词：windows hexo github 博客</p></blockquote><p><a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html">史上最详细“截图”搭建Hexo博客并部署到Github</a></p><p><a href="http://opiece.me/2015/04/09/hexo-guide/">使用Hexo搭建个人博客(基于hexo3.0)</a></p><p><a href="http://www.jianshu.com/p/141abf1700da">如何搭建一个独立博客</a></p><blockquote><p>所有用户　　　搜索关键词：hexo baidu google</p></blockquote><h4 id="hexo提交搜索引擎（百度-谷歌）"><a href="#hexo提交搜索引擎（百度-谷歌）" class="headerlink" title="hexo提交搜索引擎（百度+谷歌）"></a>hexo提交搜索引擎（百度+谷歌）</h4><p><a href="http://www.jianshu.com/p/619dab2d3c08">hexo提交搜索引擎（百度+谷歌）</a></p><h4 id="将hexo博客同时托管到github和coding（可选）"><a href="#将hexo博客同时托管到github和coding（可选）" class="headerlink" title="将hexo博客同时托管到github和coding（可选）"></a>将hexo博客同时托管到github和coding（可选）</h4><p><a href="http://www.jianshu.com/p/7ad9d3cd4d6e">将hexo博客同时托管到github和coding</a></p><h4 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h4><p>关于域名：在阿里云上购买的，快捷方便。关于写作：windows上用的是Markdownpad，Mac上用的是Macdown。图片上传到七牛云，通过外链放在文章里，这样加载快点，也减轻github空间负担。</p><h4 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h4><ol><li>每次hexo d -g，更新博客内容后都无法通过域名访问：在source目录下创建一个CNAME，在CNAME里面添加域名，这样每次更新博客会将域名绑定一起更新</li><li>在百度搜索(site:yourblog)搜不到自己的博客：百度比较慢，可以去站长平台手动提交，多提交几次</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发_7_UITextField</title>
    <link href="/2015/12/03/iOS%E5%BC%80%E5%8F%91-7-UITextField/"/>
    <url>/2015/12/03/iOS%E5%BC%80%E5%8F%91-7-UITextField/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_iOS7.png"></p><span id="more"></span><h3 id="UIResponder"><a href="#UIResponder" class="headerlink" title="UIResponder"></a>UIResponder</h3><p>UIResponder是UIkit框架中的一个抽象类，其定义了一系列方法，用于接收和处理用户事件，例如触摸事件、运动事件（摇晃设备）和功能控制事件（编辑文本或播放音乐）等。UIResponder的子类会覆盖这些方法。</p><p>UIWindow有一个firstResponder属性指向第一响应者。例如，当用户点击UITextField对象时，UITextfield对象就会成为第一响应者。UIWindow会将firstResponder指向该对象，之后，如果应用接收到运动事件和功能控制事件，都会发送给UITextField对象。</p><p>当某个UITextField对象或者UITextView对象成为第一响应者时，屏幕会弹出键盘。除了用户点击外，还可以在代码中向UITextField对象发送becomeFirstResponser消息，使其成为第一响应者。如果要关闭键盘，则可以向UITextField对象发送resignFirstResponder消息。</p><h3 id="设置UITextField的键盘"><a href="#设置UITextField的键盘" class="headerlink" title="设置UITextField的键盘"></a>设置UITextField的键盘</h3><h4 id="UITextField的几个属性"><a href="#UITextField的几个属性" class="headerlink" title="UITextField的几个属性"></a>UITextField的几个属性</h4><ul><li><p>autocapitalizationType：设置UITextField对象的自动大写功能，包括none、words（单词）、sentence、allcharacter（所有字母）</p></li><li><p>autocorrectionType：启用/禁用（设置为YES/NO，下同）UITextField对象的拼写建议功能</p></li><li><p>enablesReturnKeyAutomatically：启用/禁用UITextField对象的换行键自动检测功能，如果将该属性设置为YES，UITextField对象会自动检测用户输入，并根据是否输入文字启用/禁用换行键</p></li><li><p>keyboardType：设置UITextField对象弹出键盘类型，例如ASCII Capble（ASCII标准键盘）、E-Mail Address（电子邮件地址）、Number pad（数字键盘）和URL（网址）</p></li><li><p>secureTextEntry：启用/禁用UITextField对象的安全输入功能，如果将该属性设置为YES、UITextField对象会以原点代替用户输入的文字，常见于密码输入框</p></li></ul><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>UITextField对象具有一个委托属性，通过UITextField对象设置委托，UiTextField对象会在发生事件时向委托发送相应的消息，由委托处理该事件。</p><p>对于编辑UiTextField对象文本内容的事件，有以下两个对应的委托方法：</p><p>-(void) textFieldDidEndEditing: (UITextField *) textField;</p><p>-(void) textFieldDidBeginEditing: (UITextField *) textField;</p><p>还有带返回值的委托方法，用于从委托中查询需要的信息</p><p>-(void) textFieldShouldEndEditing: (UITextField *) textField;</p><p>-(void) textFieldShouldBeginEditing: (UITextField *) textField;</p><p>-(void) textFieldShouldClear: (UITextField *) textField;</p><p>-(void) textFieldShouldReturn: (UITextField *) textField;</p><p>注意，在委托方法中，通常应该将对象自身作为第一个参数。</p><p>多个对象可能具有相同的委托，当委托收到消息时，需要根据该参数判断发送给该消息的对象。例如，某个控制器中包含多个UITextField对象，他们的委托都是该控制器，那么控制器要根据TextField参数获取相应的UITextField对象并执行不同操作。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>凡是支持委托的对象，其背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。被委托对象需要根据这个协议为其“感兴趣”的事件实现相应的方法。如果一个类实现了某个协议中规定的方法，称这个类遵守协议。</p><p>UITextField的协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@protocol UITextFieldDelegate &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">@optional</span><br><span class="line"></span><br><span class="line">- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField;        // return NO to disallow editing.</span><br><span class="line">- (void)textFieldDidBeginEditing:(UITextField *)textField;           // became first responder</span><br><span class="line">- (BOOL)textFieldShouldEndEditing:(UITextField *)textField;          // return YES to allow editing to stop and to resign first responder status. NO to disallow the editing session to end</span><br><span class="line">- (void)textFieldDidEndEditing:(UITextField *)textField;             // may be called if forced even if shouldEndEditing returns NO (e.g. view removed from window) or endEditing:YES called</span><br><span class="line">- (void)textFieldDidEndEditing:(UITextField *)textField reason:(UITextFieldDidEndEditingReason)reason NS_AVAILABLE_IOS(10_0); // if implemented, called in place of textFieldDidEndEditing:</span><br><span class="line"></span><br><span class="line">- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string;   // return NO to not change text</span><br><span class="line"></span><br><span class="line">- (BOOL)textFieldShouldClear:(UITextField *)textField;               // called when clear button pressed. return NO to ignore (no notifications)</span><br><span class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField;              // called when &#x27;return&#x27; key pressed. return NO to ignore.</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector：方法。</p><p>所有objective-c对象都从NSObject继承了respondToSelector：方法，该方法能在运行时检查对象是否实现了指定的方法。</p><p>@selector()指令可以将选择器(selector)转换成数值，以便将其作为参数进行传递。</p><p>例如，UITextField可以实现如下方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)clearButtonTapped</span><br><span class="line">&#123;</span><br><span class="line">//textFieldshouldClear:是可选方法，需要检查委托是否实现了该方法</span><br><span class="line">SEL clearAelector = @selector(textFieldShouldClear);</span><br><span class="line">if([self.delegate respondsToSelector:clearSelector])&#123;</span><br><span class="line">if([self.delegate textFieldShouldClear:self])&#123;</span><br><span class="line">self.text = @&quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iOS SDK很多类都具有委托，几乎所有的委托都是弱引用（weak）；这是为了避免对象及其委托之间产生强引用循环。</p><h3 id="向屏幕中添加UILabel对象"><a href="#向屏幕中添加UILabel对象" class="headerlink" title="向屏幕中添加UILabel对象"></a>向屏幕中添加UILabel对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">- (void)drawHypnoticMessage:(NSString *)message</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">        UILabel *messageLabel = [[UILabel alloc] init];</span><br><span class="line"></span><br><span class="line">        // Configure the label&#x27;s colors and text</span><br><span class="line">        messageLabel.backgroundColor = [UIColor clearColor];</span><br><span class="line">        messageLabel.textColor = [UIColor whiteColor];</span><br><span class="line">        messageLabel.text = message;</span><br><span class="line"></span><br><span class="line">        // This method resizes the label, which will be relative</span><br><span class="line">        // to the text that it is displaying</span><br><span class="line">        [messageLabel sizeToFit];</span><br><span class="line"></span><br><span class="line">        // Get a random x value that fits within the hypnosis view&#x27;s width</span><br><span class="line">        int width = self.view.bounds.size.width - messageLabel.bounds.size.width;</span><br><span class="line">        int x = arc4random_uniform(width);</span><br><span class="line"></span><br><span class="line">        // Get a random y value that fits within the hypnosis view&#x27;s height</span><br><span class="line">        int height = self.view.bounds.size.height - messageLabel.bounds.size.height;</span><br><span class="line">        int y = arc4random_uniform(height);</span><br><span class="line"></span><br><span class="line">        // Update the label&#x27;s frame</span><br><span class="line">        CGRect frame = messageLabel.frame;</span><br><span class="line">        frame.origin = CGPointMake(x, y);</span><br><span class="line">        messageLabel.frame = frame;</span><br><span class="line"></span><br><span class="line">        // Add the label to the hierarchy</span><br><span class="line">        [self.view addSubview:messageLabel];</span><br><span class="line">        //添加视差效果</span><br><span class="line">        UIInterpolatingMotionEffect *motionEffect;</span><br><span class="line">        motionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@&quot;center.x&quot;</span><br><span class="line">                                                                       type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis];</span><br><span class="line">        motionEffect.minimumRelativeValue = @-25;</span><br><span class="line">        motionEffect.maximumRelativeValue = @25;</span><br><span class="line">        [messageLabel addMotionEffect:motionEffect];</span><br><span class="line"></span><br><span class="line">        motionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@&quot;center.y&quot;</span><br><span class="line">                                                                       type:UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis];</span><br><span class="line">        motionEffect.minimumRelativeValue = @-25;</span><br><span class="line">        motionEffect.maximumRelativeValue = @25;</span><br><span class="line">        [messageLabel addMotionEffect:motionEffect];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">//  BNRHypnosisViewController.m</span><br><span class="line"></span><br><span class="line">#import &quot;BNRHypnosisViewController.h&quot;</span><br><span class="line">#import &quot;BNRHypnosisView.h&quot;</span><br><span class="line"></span><br><span class="line">@interface BNRHypnosisViewController () &lt;UITextFieldDelegate&gt;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation BNRHypnosisViewController</span><br><span class="line"></span><br><span class="line">- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil</span><br><span class="line">&#123;</span><br><span class="line">    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</span><br><span class="line">    if (self) &#123;</span><br><span class="line"></span><br><span class="line">        // Set the tab bar item&#x27;s title</span><br><span class="line">        self.tabBarItem.title = @&quot;Hypnotize&quot;;</span><br><span class="line"></span><br><span class="line">        // Create a UIImage from a file</span><br><span class="line">        // This will use Hypno@2x on retina display devices</span><br><span class="line">        UIImage *image = [UIImage imageNamed:@&quot;Hypno.png&quot;];</span><br><span class="line"></span><br><span class="line">        // Put that image on the tab bar item</span><br><span class="line">        self.tabBarItem.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)loadView</span><br><span class="line">&#123;</span><br><span class="line">    // Create a view</span><br><span class="line">    CGRect frame = [UIScreen mainScreen].bounds;</span><br><span class="line">    BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] initWithFrame:frame];</span><br><span class="line"></span><br><span class="line">    CGRect textFieldRect = CGRectMake(40, 70, 240, 30);</span><br><span class="line">    UITextField *textField = [[UITextField alloc] initWithFrame:textFieldRect];</span><br><span class="line"></span><br><span class="line">    // Setting the border style on the text field will allow us to see it easier</span><br><span class="line">    textField.borderStyle = UITextBorderStyleRoundedRect;</span><br><span class="line">    textField.placeholder = @&quot;Hypnotize me&quot;;</span><br><span class="line">    textField.returnKeyType = UIReturnKeyDone;</span><br><span class="line">    [backgroundView addSubview:textField];</span><br><span class="line"></span><br><span class="line">    textField.delegate = self;</span><br><span class="line"></span><br><span class="line">    // Set it as *the* view of this view controller</span><br><span class="line">    self.view = backgroundView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    // Always call the super implementation of viewDidLoad</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;BNRHypnosisViewController loaded its view&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)textFieldShouldReturn:(UITextField *)textField</span><br><span class="line">&#123;</span><br><span class="line">    [self drawHypnoticMessage:textField.text];</span><br><span class="line"></span><br><span class="line">    textField.text = @&quot;&quot;;</span><br><span class="line">    [textField resignFirstResponder];</span><br><span class="line"></span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)drawHypnoticMessage:(NSString *)message</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">        UILabel *messageLabel = [[UILabel alloc] init];</span><br><span class="line"></span><br><span class="line">        // Configure the label&#x27;s colors and text</span><br><span class="line">        messageLabel.backgroundColor = [UIColor clearColor];</span><br><span class="line">        messageLabel.textColor = [UIColor whiteColor];</span><br><span class="line">        messageLabel.text = message;</span><br><span class="line"></span><br><span class="line">        // This method resizes the label, which will be relative</span><br><span class="line">        // to the text that it is displaying</span><br><span class="line">        [messageLabel sizeToFit];</span><br><span class="line"></span><br><span class="line">        // Get a random x value that fits within the hypnosis view&#x27;s width</span><br><span class="line">        int width = self.view.bounds.size.width - messageLabel.bounds.size.width;</span><br><span class="line">        int x = arc4random_uniform(width);</span><br><span class="line"></span><br><span class="line">        // Get a random y value that fits within the hypnosis view&#x27;s height</span><br><span class="line">        int height = self.view.bounds.size.height - messageLabel.bounds.size.height;</span><br><span class="line">        int y = arc4random_uniform(height);</span><br><span class="line"></span><br><span class="line">        // Update the label&#x27;s frame</span><br><span class="line">        CGRect frame = messageLabel.frame;</span><br><span class="line">        frame.origin = CGPointMake(x, y);</span><br><span class="line">        messageLabel.frame = frame;</span><br><span class="line"></span><br><span class="line">        // Add the label to the hierarchy</span><br><span class="line">        [self.view addSubview:messageLabel];</span><br><span class="line"></span><br><span class="line">        UIInterpolatingMotionEffect *motionEffect;</span><br><span class="line">        motionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@&quot;center.x&quot;</span><br><span class="line">                                                                       type:UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis];</span><br><span class="line">        motionEffect.minimumRelativeValue = @-25;</span><br><span class="line">        motionEffect.maximumRelativeValue = @25;</span><br><span class="line">        [messageLabel addMotionEffect:motionEffect];</span><br><span class="line"></span><br><span class="line">        motionEffect = [[UIInterpolatingMotionEffect alloc] initWithKeyPath:@&quot;center.y&quot;</span><br><span class="line">                                                                       type:UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis];</span><br><span class="line">        motionEffect.minimumRelativeValue = @-25;</span><br><span class="line">        motionEffect.maximumRelativeValue = @25;</span><br><span class="line">        [messageLabel addMotionEffect:motionEffect];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TabBar中添加UInavigation</title>
    <link href="/2015/11/30/iOS%E9%82%A3%E4%BA%9B%E5%9D%91-1-tabBar/"/>
    <url>/2015/11/30/iOS%E9%82%A3%E4%BA%9B%E5%9D%91-1-tabBar/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_iOS_nav0.png"></p><span id="more"></span><p>上图是UInavigation view的层次结构。在有tab bar的情况下，给UITabbarController 指定viewcontrollers属性的时候，将需要展示的视图控制器用UINavigationController封装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];</span><br><span class="line">BNRReminderViewController *hvc = [[BNRReminderViewController alloc] init];</span><br><span class="line"></span><br><span class="line">UITabBarController *tabBarController = [[UITabBarController alloc] init];</span><br><span class="line"></span><br><span class="line">UINavigationController *navCtl = [[UINavigationController alloc]initWithRootViewController:hvc];</span><br><span class="line"></span><br><span class="line">tabBarController.viewControllers = @[navCtl, rvc];</span><br><span class="line"></span><br><span class="line">self.window.rootViewController = tabBarController;</span><br></pre></td></tr></table></figure><p>同时，iOS7之后，由于navigation的存在，视图会被半透明的导航栏遮盖，此时可以在控制器加载试图前用self.edgesForExtendedLayout = UIRectEdgeNone;来将视图边界设为当前屏幕</p><p>最后是效果图：</p><p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_iOS_nav.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发教程(6)--viewController</title>
    <link href="/2015/11/25/iOS%E5%BC%80%E5%8F%91-6-viewCtl/"/>
    <url>/2015/11/25/iOS%E5%BC%80%E5%8F%91-6-viewCtl/</url>
    
    <content type="html"><![CDATA[<blockquote><p>视图控制器（viewcontroller）是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图结构，包括创建视图层次结构中的视图并处理相关用户事件，以及将整个视图层次结构添加到应用窗口。</p></blockquote><span id="more"></span><p>创建一个UITabBarController在两个视图层次结构之间(Hypnotize和Reminder)切换，Riminder包含两个子视图，一个UIDatePicker对象和一个UIbutton对象。</p><p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_ios6.png" alt="Hypnotize"></p><p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_ios6-2.png" alt="Riminder"></p><p>视图控制器不会在其被创建出来的那一刻马上创建并载入相应的视图。只有当应用需要将某个视图控制器的视图显示到屏幕上时，相应的控制器才会创建其视图。这种延迟加载（lazy loading）视图的做法能提高内存使用效率。<br>视图控制器可以通过两种方式创建视图层次结构：</p><p>代码方式：覆盖UIViewcontroller中的loadView方法<br>NIB文件方式：使用interface Builder创建一个NIB文件，然后加入所需的视图层次结构，最后视图控制器会在运行时加载由该NIB文件编译而成的XIB文件（应用在运行时，会按需载入XIB文件并激活文件中的视图）。</p><h3 id="1-创建Hypnotize视图"><a href="#1-创建Hypnotize视图" class="headerlink" title="1. 创建Hypnotize视图"></a>1. 创建Hypnotize视图</h3><h4 id="1-1-代码方式创建视图"><a href="#1-1-代码方式创建视图" class="headerlink" title="1.1 代码方式创建视图"></a>1.1 代码方式创建视图</h4><p>BNRHypnosisViewController.m文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@implementation BNRHypnosisViewController</span><br><span class="line"></span><br><span class="line">- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil</span><br><span class="line">&#123;</span><br><span class="line">    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</span><br><span class="line">    if (self) &#123;</span><br><span class="line"></span><br><span class="line">        // Set the tab bar item&#x27;s title</span><br><span class="line">        self.tabBarItem.title = @&quot;Hypnotize&quot;;</span><br><span class="line"></span><br><span class="line">        // Create a UIImage from a file</span><br><span class="line">        // This will use Hypno@2x on retina display devices</span><br><span class="line">        UIImage *image = [UIImage imageNamed:@&quot;Hypno.png&quot;];</span><br><span class="line"></span><br><span class="line">        // Put that image on the tab bar item</span><br><span class="line">        self.tabBarItem.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)loadView</span><br><span class="line">&#123;</span><br><span class="line">    // Create a view</span><br><span class="line">    CGRect frame = [UIScreen mainScreen].bounds;</span><br><span class="line">    BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] initWithFrame:frame];</span><br><span class="line"></span><br><span class="line">    // Set it as *the* view of this view controller</span><br><span class="line">    self.view = backgroundView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    // Always call the super implementation of viewDidLoad</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;BNRHypnosisViewController loaded its view&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="1-2-设置根视图控制器"><a href="#1-2-设置根视图控制器" class="headerlink" title="1.2 设置根视图控制器"></a>1.2 设置根视图控制器</h4><p>为了将视图控制器的视图层次结构加入应用窗口，UIWindow对象提供了一个方法：setRootViewController：。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口，并且还会自动调整view的大小，将其设置为与窗口的大小相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@implementation BNRAppDelegate</span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];</span><br><span class="line">    // Override point for customization after application launch.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    BNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];</span><br><span class="line"></span><br><span class="line">    // Look in the appBundle for the file BNRReminderViewController.xib</span><br><span class="line">    BNRReminderViewController *rvc = [[BNRReminderViewController alloc] init];</span><br><span class="line"></span><br><span class="line">    UITabBarController *tabBarController = [[UITabBarController alloc] init];</span><br><span class="line">    tabBarController.viewControllers = @[hvc, rvc];</span><br><span class="line"></span><br><span class="line">    self.window.rootViewController = tabBarController;</span><br><span class="line"></span><br><span class="line">    self.window.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    [self.window makeKeyAndVisible];</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rootViewController的view在应用启动完毕后就显示，因此，UIWindow对象会在设置完rootViewController后立即加载其view。</p><p>以下是setRootViewController：的实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-(void)setRootViewController:(UIViewController *)viewController</span><br><span class="line">&#123;</span><br><span class="line">//获取根视图控制器的视图</span><br><span class="line">UIView *rootView = viewController.view;</span><br><span class="line"></span><br><span class="line">//根据UIWindow对象的bounds，为视图创建相应的frame</span><br><span class="line">CGRect viewFrame = self.bounds;</span><br><span class="line">rootView.frame = viewFrame;</span><br><span class="line"></span><br><span class="line">//将视图作为子视图加入UIWindow对象</span><br><span class="line">[self addSubview:rootView];</span><br><span class="line"></span><br><span class="line">//将viewController赋给实例变量_rootViewController</span><br><span class="line">_rootViewController = viewController;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建Reminder视图"><a href="#2-创建Reminder视图" class="headerlink" title="2. 创建Reminder视图"></a>2. 创建Reminder视图</h3><p>因为BNRReminderViewController包含两个子视图UIdatePicker和UIbutton，因此需要添加一个dataPicker属性，指向一个UIDatePicker对象。同时，将BNRViewController设置为UIButton对象的目标，还需编写一个addReminder：方法，并设置为UIButton对象的动作。<br>BNRReminderViewController对象的view有两个子视图，当某个视图控制器的view拥有子视图时，使用interface Builder创建视图层次会较方便。</p><h4 id="2-1-Interface-Builder中创建视图"><a href="#2-1-Interface-Builder中创建视图" class="headerlink" title="2.1 Interface Builder中创建视图"></a>2.1 Interface Builder中创建视图</h4><p>创建一个xib文件，在File菜单选择new-file…，选择User interface，再选中Empty。</p><h5 id="2-1-1-创建视图对象"><a href="#2-1-1-创建视图对象" class="headerlink" title="2.1.1 创建视图对象"></a>2.1.1 创建视图对象</h5><p>从xcode右下方对象库拖拽UIview，UIbutton，UIdatePicker至画布。</p><h5 id="2-1-2-加载nib文件"><a href="#2-1-2-加载nib文件" class="headerlink" title="2.1.2 加载nib文件"></a>2.1.2 加载nib文件</h5><p>当视图控制器从NIB文件中创建试图层次结构时，不需要覆盖loadview方法，默认的loadview会自动处理NIB文件包含的视图层次结构。<br>接下来，用以下方法为reminder加载NIB文件</p><p>-(id)initWithNibName:(NSString )nibNameOrNil bundle:(NSBundle )nibBundleOrNil</p><p>上述方法两个参数，分别用于指定NIB文件的文件名及其所在的程序包</p><h5 id="2-1-3-关联Files‘s-Owner"><a href="#2-1-3-关联Files‘s-Owner" class="headerlink" title="2.1.3 关联Files‘s Owner"></a>2.1.3 关联Files‘s Owner</h5><p>Files’s owner对象是一个占位符对象（placeholder），它是XIB文件特意留下的一个“空洞”。当某个视图控制器将XIB文件加载为NIB文件时，首先会创建XIB文件中所有的视图对象，然后会将自己填入相应的File‘s Owner空洞，并建立之前在Interface Builder中设置的关联。<br>因此，如果要在运行时关联加载NIB文件的对象，可在XIB文件中关联File’s Owner。首先，需要设置BNRReminderViewController.xib文件中的File‘s Owner是BNRReminderViewController。<br>接着，在XIB文件中添加所需关联：1，Ctrl+左键点击File‘s owner，在插座变量outlet部分找到view，鼠标连线至右侧视图控制器的View属性；2，同理关联datepicker；3，将UIbutton关联到File’s owner的addReminder方法。</p><p>BNRReminderViewController.m完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;BNRReminderViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@interface BNRReminderViewController ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, weak) IBOutlet UIDatePicker *datePicker;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation BNRReminderViewController</span><br><span class="line"></span><br><span class="line">- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil</span><br><span class="line">&#123;</span><br><span class="line">    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</span><br><span class="line"></span><br><span class="line">    if (self) &#123;</span><br><span class="line">        // Set the tab bar item&#x27;s title</span><br><span class="line">        self.tabBarItem.title = @&quot;Reminder&quot;;</span><br><span class="line">    </span><br><span class="line">        // Create a UIImage from a file</span><br><span class="line">        // This will use Time@2x.png on retina display devices</span><br><span class="line">        UIImage *image = [UIImage imageNamed:@&quot;Time.png&quot;];</span><br><span class="line"></span><br><span class="line">        // Put that image on the tab bar item</span><br><span class="line">        self.tabBarItem.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;BNRReminderViewController loaded its view&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewWillAppear:(BOOL)animated</span><br><span class="line">&#123;</span><br><span class="line">    [super viewWillAppear:animated];</span><br><span class="line"></span><br><span class="line">    self.datePicker.minimumDate = [NSDate dateWithTimeIntervalSinceNow:60];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (IBAction)addReminder:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">    NSDate *date = self.datePicker.date;</span><br><span class="line">    NSLog(@&quot;Setting a reminder for %@&quot;, date);</span><br><span class="line"></span><br><span class="line">    UILocalNotification *note = [[UILocalNotification alloc] init];</span><br><span class="line">    note.alertBody = @&quot;Hypnotize me!&quot;;</span><br><span class="line">    note.fireDate = date;</span><br><span class="line"></span><br><span class="line">    [[UIApplication sharedApplication] scheduleLocalNotification:note];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BNRAppdelegate.m中，创建一个BNRReminderViewCOntroller对象，再将其设置为应用程序</p><h3 id="3-UITabBarController"><a href="#3-UITabBarController" class="headerlink" title="3. UITabBarController"></a>3. UITabBarController</h3><p>UITabBarController对象可以保存一组视图控制器，此外UITabBarController还会在底部显示一个标签栏（tab bar），标签栏会有多个标签项（tab item）</p><h4 id="3-1-设置标签项"><a href="#3-1-设置标签项" class="headerlink" title="3.1 设置标签项"></a>3.1 设置标签项</h4><p>设置tabbaritem的title以及image属性</p><h3 id="4-视图控制器初始化方法"><a href="#4-视图控制器初始化方法" class="headerlink" title="4. 视图控制器初始化方法"></a>4. 视图控制器初始化方法</h3><p>当UIViewController子类和该子类需要加载的NIB文件同名时，即使用在appdelegate调用init初始化，传给vieController两个参数为nil，也能正常调用以下初始化，并正确加载</p><p>-(id)initWithNibName:(NSString )nibNameOrNil bundle:(NSBundle )nibBundleOrNil</p><h3 id="5-添加本地通知"><a href="#5-添加本地通知" class="headerlink" title="5. 添加本地通知"></a>5. 添加本地通知</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (IBAction)addReminder:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">    NSDate *date = self.datePicker.date;</span><br><span class="line">    NSLog(@&quot;Setting a reminder for %@&quot;, date);</span><br><span class="line"></span><br><span class="line">    UILocalNotification *note = [[UILocalNotification alloc] init];</span><br><span class="line">    note.alertBody = @&quot;Hypnotize me!&quot;;</span><br><span class="line">    note.fireDate = date;</span><br><span class="line"></span><br><span class="line">    [[UIApplication sharedApplication] scheduleLocalNotification:note];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-加载和显示视图"><a href="#6-加载和显示视图" class="headerlink" title="6. 加载和显示视图"></a>6. 加载和显示视图</h3><p>为了实现延迟加载，在initWithNibName:bundle 中不应访问view或view的任何子视图，凡是和view或view子视图有关的初始化代码，都放在 viewDidLoad中，避免加载时加载不需要在屏幕上显示的视图。</p><h3 id="7-访问视图"><a href="#7-访问视图" class="headerlink" title="7. 访问视图"></a>7. 访问视图</h3><p>alloc【创建对象，分配空间】—&gt;init (initWithNibName)【初始化对象，初始化数据】—&gt; loadView【从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图】—&gt; viewDidLoad—&gt; viewWillAppear—&gt;viewDidAppear—&gt; viewWillDisappear—&gt; viewDidDisappear—&gt; dealloc</p><p>内存不足时，调用viewDidUnload函数释放views—-&gt;当需要使用view时，又回到loadview如此循环</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>objective-c -- property</title>
    <link href="/2015/10/28/OC-property/"/>
    <url>/2015/10/28/OC-property/</url>
    
    <content type="html"><![CDATA[<blockquote><p>@property、objective-c </p></blockquote><span id="more"></span><h4 id="1、”-”语法可能调setter，也可能调getter"><a href="#1、”-”语法可能调setter，也可能调getter" class="headerlink" title="1、”.”语法可能调setter，也可能调getter"></a>1、”.”语法可能调setter，也可能调getter</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xx.a=1  </span><br><span class="line">NSlog(&quot;%d&quot;,xx.a)</span><br></pre></td></tr></table></figure><h4 id="2、可改变存取器的名字"><a href="#2、可改变存取器的名字" class="headerlink" title="2、可改变存取器的名字"></a>2、可改变存取器的名字</h4><p>getter= 让getter方法使用自定义的名字</p><p>setter = 让setter方法使用自定义名字</p><p><code>@property(getter=isRunning) BOOL running</code></p><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Car *honda = [[Car alloc] init];</span><br><span class="line">honda.running = YES;</span><br><span class="line">NSLog(@&quot;%d&quot;,honda.running);</span><br><span class="line">NSLog(@&quot;%d&quot;,[honda isRunning]);</span><br></pre></td></tr></table></figure><h4 id="3、readonly不合成setter方法"><a href="#3、readonly不合成setter方法" class="headerlink" title="3、readonly不合成setter方法"></a>3、readonly不合成setter方法</h4><h4 id="4、nonatomic属性"><a href="#4、nonatomic属性" class="headerlink" title="4、nonatomic属性"></a>4、nonatomic属性</h4><p>原子性（Atomicity）的作用是属性在多线程的环境中怎么行为。当你不仅仅有一个线程， 那么getter和setter可能会在同一时间去调用，这就意味着getter/setter可能会被另一个方法打扰，很有可能造成数据错误。</p><p>原子的属性会封锁object，防止这种情况发生，确保get或者set操作的操作对象是完整的。没有被损坏。然而，这仅仅是一个线程安全的方面，我们必须要理解这一点。使用原子性并不能确保我们的代码就是线程安全的</p><h4 id="5、strong属性"><a href="#5、strong属性" class="headerlink" title="5、strong属性"></a>5、strong属性</h4><p>无论对象被指定为什么属性，强壮的属性可以创建拥有关系，这对所有对象属性来说是一种内隐行为，它默认是安全的，因为只要它被指定为strong属性，它就会确保对对象的值存在</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line">@property(nonatomic)NSString *name;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>它的实现如下，@property产生的使用的默认存储方法，也重写了NSObject的描述方法，返回一个代表该对象的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">@implementation Person</span><br><span class="line">-(NSString *)description</span><br><span class="line">&#123;</span><br><span class="line">    return self.name;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>然后，添加Person的属性给Car，改变Car.h：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">@interface Car : NSObject</span><br><span class="line">@property (nonatomic) NSString *model;</span><br><span class="line">@property(nonatomic,strong) Person *driver; </span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>接着</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person *john = [[Person alloc] init];</span><br><span class="line">john.name = @&quot;John&quot;;</span><br><span class="line"> </span><br><span class="line">Car *honda = [[Car alloc] init];</span><br><span class="line">honda.model = @&quot;Honda Civic&quot;;</span><br><span class="line">honda.driver = john;</span><br><span class="line">NSLog(@&quot;%@ is driving the %@&quot;,honda.driver,honda.model);</span><br></pre></td></tr></table></figure><p><strong>只要driver是一个strong关联，honda对象就会持有john，这确保只要honda需要它，它就会有效</strong></p><p>6、weak 属性</p><p>在属性和指定value之间创建一个不拥有关系，使用这个防止循环引用。</p><p>大多数情况下，强属性可以直观知道你想要什么对象属性，强引用会暴漏一个问题，例如，我们需要从driver引用他正在开的Car对象，首先，我们需要给Person添加一个car属性：</p><p>Person.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"> </span><br><span class="line">@class Car;</span><br><span class="line"> </span><br><span class="line">@interface Person : NSObject</span><br><span class="line"> </span><br><span class="line">@property(nonatomic)NSString *name;</span><br><span class="line">@property(nonatomic,strong)Car *car;</span><br><span class="line"> </span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>@class Car 是对Car类的前声明，就像它告诉编译器，“相信我，Car类是存在的，所有不要想着去立刻找到它”。我们不用#import这样做，因为Car也导入了Person.h，那样我们会陷入无尽的导入循环</p><p>然后，添加下面的代码，在honda、driver分配后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Person *john = [[Person alloc] init];</span><br><span class="line">john.name = @&quot;John&quot;;</span><br><span class="line">Car *honda = [[Car alloc] init];</span><br><span class="line">honda.model = @&quot;Honda Civic&quot;;</span><br><span class="line">honda.driver = john;</span><br><span class="line">john.car = honda;  //添加这行</span><br><span class="line">NSLog(@&quot;%@ is driving the %@&quot;,honda.driver,honda.model);</span><br></pre></td></tr></table></figure><p>这样我们现在有一个现象，就是john拥有honda,honda拥有john。这就意味着他们相互拥有，所以尽管他们不再有用，内存管理系统也不能够释放他们。</p><p>这叫做 retain cycle（保持循环），是一种内存泄露的形式，内存泄露是很不好的。幸运的是，要想解决这个办法很简单，只需要告诉其中一个属性维持一个weak属性引用另一个对象。在Person.h中，改变car的声明：</p><p><code>@property(nonatomic,weak)Car *car;</code></p><p>这种weak(弱)属性会给car创建一个非拥有关系。它允许john有一个honda的引用，同时避免了保持循环。但是，还有一个可能性就是honda会被销毁，而这个时候john正在引用honda，如果这种情况发生，weak属性会很方便地设置car为nil，去避免悬挂指针。</p><p>7、 copy属性</p><p>它是strong的替代品，不是保持拥有一个存在的对象，而是创建一个引用，无论你指定什么属性，都会持有这个拥有。只有符合NSCopying protocol的对象才能使用这个属性。</p><p>代表值的属性（相对于链接或关系）是一个使用copy的不错选择。例如，开发者通常复制字符串属性，而不是强引用它们</p><p>strong是引用，copy是复制一份，保存当时的值，无论原对象值如何变化</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发教程--学习路线图</title>
    <link href="/2015/08/03/iOS%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <url>/2015/08/03/iOS%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_ios.png"></p><span id="more"></span><br>![](http://o8z0mw8i6.bkt.clouddn.com/iOS%E8%AF%A6.jpg)]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
