<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>buildyourowncniwithbash</title>
    <link href="/2022/02/22/buildyourowncniwithbash/"/>
    <url>/2022/02/22/buildyourowncniwithbash/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.altoros.com/blog/kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash/">https://www.altoros.com/blog/kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>cilium集群中使用metallb BGP模式访问服务</title>
    <link href="/2022/02/21/cilium-bgp-metallb/"/>
    <url>/2022/02/21/cilium-bgp-metallb/</url>
    
    <content type="html"><![CDATA[<h1 id="Cilium安装和配置"><a href="#Cilium安装和配置" class="headerlink" title="Cilium安装和配置"></a>Cilium安装和配置</h1><p>Cilium 原生支持通过 BGP 发布服务的 LoadBalancer IP 和 Kubernetes 节点的 Pod CIDR 范围。它利用 MetalLB 简单有效的 IP 分配实现和最小的 BGP 协议支持来做到这一点。 Cilium 的配置与 MetalLB 的配置相同，</p><p>需要开启以下三个配置项：</p><ul><li>bgp.enabled</li><li>bgp.announce.loadbalancerIP</li><li>bgp.announce.podCIDR</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">helm install cilium cilium/cilium --version 1.11.1 \<br>  --namespace kube-system \<br>  --<span class="hljs-built_in">set</span> kubeProxyReplacement=strict \<br>  --<span class="hljs-built_in">set</span> k8sServiceHost=192.168.92.132 \<br>  --<span class="hljs-built_in">set</span> k8sServicePort=6443 \<br>  --<span class="hljs-built_in">set</span> bgp.enabled=<span class="hljs-literal">true</span> \<br>  --<span class="hljs-built_in">set</span> bgp.announce.loadbalancerIP=<span class="hljs-literal">true</span> \<br>  --<span class="hljs-built_in">set</span> bgp.announce.podCIDR=<span class="hljs-literal">true</span> \<br>  --<span class="hljs-built_in">set</span> hubble.relay.enabled=<span class="hljs-literal">true</span> \<br>  --<span class="hljs-built_in">set</span> hubble.ui.enabled=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cilium</tag>
      
      <tag>bgp</tag>
      
      <tag>metallb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eBPF应用开发</title>
    <link href="/2022/02/18/ebpf-01/"/>
    <url>/2022/02/18/ebpf-01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-eBPF应用开发流程"><a href="#1-eBPF应用开发流程" class="headerlink" title="1. eBPF应用开发流程"></a>1. eBPF应用开发流程</h1><ol><li>使用 C 语言开发一个 eBPF 程序</li><li>借助 LLVM 把 eBPF 程序编译成 BPF bytecode</li><li>通过 bpf 系统调用，把 BPF bytecode提交给内核</li><li>内核验证并运行 BPF bytecode，并把相应的状态保存到 BPF maps中</li><li>用户程序通过 BPF maps查询 BPF bytecode的运行状态</li></ol><p><img src="https://gitee.com/eightzero/pico/raw/master/ebpf-dev-01.png" alt="ebpf-dev-01"></p><h1 id="2-开发实践"><a href="#2-开发实践" class="headerlink" title="2. 开发实践"></a>2. 开发实践</h1><p>BCC 是一个 BPF 编译器集合，包含了用于构建 BPF 程序的编程框架和库，并提供了大量可以直接使用的工具。使用 BCC 的好处是，<strong>它把上述的 eBPF 执行过程通过内置框架抽象了起来，并提供了 Python、C++ 等编程语言接口</strong>。这样，就可以直接通过 Python 语言去跟 eBPF 的各种事件和数据进行交互。</p><p>以跟踪 <a href="https://man7.org/linux/man-pages/man2/open.2.html">openat()</a>（即打开文件）这个系统调用为例，看看如何开发并运行第一个 eBPF 程序。</p><h2 id="2-1-使用-C-开发一个-eBPF-程序"><a href="#2-1-使用-C-开发一个-eBPF-程序" class="headerlink" title="2.1 使用 C 开发一个 eBPF 程序"></a>2.1 使用 C 开发一个 eBPF 程序</h2><p>新建一个 <code>hello.c</code> 文件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hello_world</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ctx)</span></span><br><span class="hljs-function"></span>&#123;<br>    bpf_trace_printk(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>bpf_trace_printk()</code> 是一个最常用的 BPF 辅助函数，它的作用是输出一段字符串。不过，由于 eBPF 运行在内核中，它的输出并不是通常的标准输出（stdout），而是内核调试文件 <code>/sys/kernel/debug/tracing/trace_pipe</code> ，可以直接使用 <code>cat</code> 命令来查看这个文件的内容</p><h2 id="2-2-使用-Python-和-BCC-库开发一个用户态程序"><a href="#2-2-使用-Python-和-BCC-库开发一个用户态程序" class="headerlink" title="2.2 使用 Python 和 BCC 库开发一个用户态程序"></a>2.2 使用 Python 和 BCC 库开发一个用户态程序</h2><p>新建一个 <code>hello.py</code> 文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># 1) 导入了 BCC 库的 BPF 模块，以便接下来调用</span><br><span class="hljs-keyword">from</span> bcc <span class="hljs-keyword">import</span> BPF<br><br><span class="hljs-comment"># 2) 调用 BPF() 加载第一步开发的 BPF 源代码</span><br>b = BPF(src_file=<span class="hljs-string">&quot;hello.c&quot;</span>)<br><span class="hljs-comment"># 3) 将 BPF 程序挂载到内核探针(kprobe)其中 do_sys_openat2() 是系统调用 openat() 在内核中的实现</span><br>b.attach_kprobe(event=<span class="hljs-string">&quot;do_sys_openat2&quot;</span>, fn_name=<span class="hljs-string">&quot;hello_world&quot;</span>)<br><span class="hljs-comment"># 4) 读取内核调试文件 /sys/kernel/debug/tracing/trace_pipe 的内容，并打印到标准输出中</span><br>b.trace_print()<br></code></pre></td></tr></table></figure><h2 id="2-3-执行-eBPF-程序"><a href="#2-3-执行-eBPF-程序" class="headerlink" title="2.3 执行 eBPF 程序"></a>2.3 执行 eBPF 程序</h2><p>用户态程序开发完成之后，最后一步就是执行它了。需要注意的是， eBPF 程序需要以 root 用户来运行，非 root 用户需要加上 sudo 来执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ chmod +x hello.py<br>$ sudo ./hello.py<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ebpf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>libxdp实现原理</title>
    <link href="/2022/02/18/libxdp/"/>
    <url>/2022/02/18/libxdp/</url>
    
    <content type="html"><![CDATA[<p>为了在同一个接口上支持多个 XDP 程序，libxdp 为每个 XDP 程序使用两个元数据：运行优先级和链式调用操作。</p><h3 id="运行优先级"><a href="#运行优先级" class="headerlink" title="运行优先级"></a>运行优先级</h3><p>这是程序的优先级，是一个简单的整数，用于在将多个程序加载到同一界面时对程序进行排序。希望提前运行的程序（如数据包过滤器）应为此设置较低的值，而希望稍后运行的程序（如数据包转发器或计数器）应设置较高的值。请注意，仅当先前的程序以作为其链式调用操作的一部分的返回码结束时，以后的程序才会运行（见下文）。如果未指定，则默认优先级值为 50。</p><h3 id="链式调用动作"><a href="#链式调用动作" class="headerlink" title="链式调用动作"></a>链式调用动作</h3><p>这些是程序为应继续处理的数据包指示的程序返回代码。如果程序返回这些动作之一，调用链中的后续程序将运行，而如果它返回任何其他动作，则处理将被中断，XDP 调度程序将立即返回结果。如果未设置，则默认为 XDP_PASS，这可能是大多数程序应该使用的值。</p><h3 id="指定元数据"><a href="#指定元数据" class="headerlink" title="指定元数据"></a>指定元数据</h3><p>上述元数据被指定为嵌入在包含 XDP 程序的 ELF 文件中的 BTF 信息。<code>xdp_helpers.h</code>附带的文件包含包含此信息的辅助宏，可按如下方式使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bpf/bpf_helpers.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;xdp/xdp_helpers.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>__uint(priority, <span class="hljs-number">10</span>);<br>__uint(XDP_PASS, <span class="hljs-number">1</span>);<br>__uint(XDP_DROP, <span class="hljs-number">1</span>);<br>&#125; XDP_RUN_CONFIG(my_xdp_func);<br></code></pre></td></tr></table></figure><p>这个例子指定 XDP 程序的<code>my_xdp_func</code>优先级应该是 10 并且它的链式调用动作是<code>XDP_PASS</code>and <code>XDP_DROP</code>。在同一个文件中包含多个 XDP 程序的源文件中，可以为每个程序（主要 XDP 函数）包含上述定义。任何未指定任何配置信息的程序都将使用上述默认值。</p><h3 id="检查和修改元数据"><a href="#检查和修改元数据" class="headerlink" title="检查和修改元数据"></a>检查和修改元数据</h3><p><code>libxdp</code>公开了应用程序可用于检查和修改 XDP 程序上的元数据的以下函数。只有在程序附加到接口上之前才能进行修改。这些函数不会修改 BTF 信息本身，但新值将作为程序附件的一部分存储。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">xdp_program__run_prio</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_program *xdp_prog)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">xdp_program__set_run_prio</span><span class="hljs-params">(struct xdp_program *xdp_prog,</span></span><br><span class="hljs-params"><span class="hljs-function">                              <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> run_prio)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">xdp_program__chain_call_enabled</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_program *xdp_prog,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">enum</span> xdp_action action)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">xdp_program__set_chain_call_enabled</span><span class="hljs-params">(struct xdp_program *prog,</span></span><br><span class="hljs-params"><span class="hljs-function">                                        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> action,</span></span><br><span class="hljs-params"><span class="hljs-function">                                        <span class="hljs-keyword">bool</span> enabled)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">xdp_program__print_chain_call_actions</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_program *prog,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> *buf,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">size_t</span> buf_len)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="调度程序"><a href="#调度程序" class="headerlink" title="调度程序"></a>调度程序</h3><p>为了在同一个网络接口上支持多个非卸载程序， <code>libxdp</code>使用一个<strong>调度程序</strong>，它是一个小的包装程序，它将依次调用每个组件程序，期望返回码，然后基于链调用链调用到下一个程序上一个程序的操作。</p><p>虽然使用的应用程序<code>libxdp</code>不需要知道调度程序的详细信息，只需将 XDP 程序加载到接口，<code>libxdp</code>但确实公开了调度程序及其附加的组件程序，可用于列出当前附加到接口的程序。</p><p>用于此的结构是<code>struct xdp_multiprog</code>，它只能由加载在基于 ifindex 的接口上的程序构建。用于获取 multiprog 引用并遍历附加程序的 API 如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">struct xdp_multiprog *<span class="hljs-title">xdp_multiprog__get_from_ifindex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ifindex)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_multiprog__next_prog</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_program *prog,</span></span><br><span class="hljs-params"><span class="hljs-function">     <span class="hljs-keyword">const</span> struct xdp_multiprog *mp)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">xdp_multiprog__close</span><span class="hljs-params">(struct xdp_multiprog *mp)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">xdp_multiprog__detach</span><span class="hljs-params">(struct xdp_multiprog *mp, <span class="hljs-keyword">int</span> ifindex)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">enum</span> xdp_attach_mode <span class="hljs-title">xdp_multiprog__attach_mode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_multiprog *mp)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_multiprog__main_prog</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_multiprog *mp)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_multiprog__hw_prog</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_multiprog *mp)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">xdp_multiprog__is_legacy</span><span class="hljs-params">(<span class="hljs-keyword">const</span> struct xdp_multiprog *mp)</span></span>;<br></code></pre></td></tr></table></figure><p>如果未卸载程序附加到<code>libxdp</code>无法识别为调度程序的接口，<code>xdp_multiprog</code>则仍将返回一个结构，并将<code>xdp_multiprog__is_legacy()</code>对该程序返回 true（请注意，如果仅加载卸载程序，这也适用） . 可以通过 获得对该（常规）XDP 程序的引用 <code>xdp_multiprog__main_prog()</code>。如果附加到接口的程序<strong>是</strong>调度程序，<code>xdp_multiprog__main_prog()</code>将返回对调度程序本身的引用，这主要用于获取有关该程序的其他数据（例如程序ID）。可以使用 获取对已卸载程序的引用<code>xdp_multiprog_hw_prog()</code>。功能 <code>xdp_multiprog__attach_mode()</code>返回非卸载程序的附加模式，是否附加卸载程序应通过<code>xdp_multiprog_hw_prog()</code>.</p>]]></content>
    
    
    
    <tags>
      
      <tag>xdp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>挂载多个XDP</title>
    <link href="/2022/02/09/xdp/"/>
    <url>/2022/02/09/xdp/</url>
    
    <content type="html"><![CDATA[<h2 id="1-为什么需要多个XDP"><a href="#1-为什么需要多个XDP" class="headerlink" title="1. 为什么需要多个XDP"></a>1. 为什么需要多个XDP</h2><p>每个 netdev 只有一个 XDP  hook，因此想要使用 XDP 的应用程序必须拥有 XDP hook。</p><p>但是如果用户想要安装多个这样的应用程序怎么办？</p><p>例如 - 应该可以同时运行所有这些：</p><ul><li>XDP-基于 DDOS 保护*[1]*</li><li>XDP-加速 IDS（例如 Suricata）*[2]*</li><li>自定义 XDP 程序</li></ul><h2 id="2-如何运行多个XDP"><a href="#2-如何运行多个XDP" class="headerlink" title="2. 如何运行多个XDP"></a>2. 如何运行多个XDP</h2><p><code>libxdp</code>使用AF_XDP sockets将XDP程序绑定到网络接口。<code>libxdp</code>相当轻量，依赖于<code>libbpf</code>处理eBPF等对象文件的工作。</p><p>libxdp基于libbpf之上，提供两个主要的功能：</p><ol><li>在单个网络设备上，按顺序加载多个xdp程序的能力（内核本身不支持），这种支持依赖于内核中的<code>freplace</code>功能。这使得绑定一个eBPF程序来代替另一个已经加载的eBPF程序中的全局函数成为可能。</li><li>用于配置AF_XDP sockets以及从这些sockets读写数据包的辅助函数</li></ol><h3 id="2-1-从应用程序使用-libxdp"><a href="#2-1-从应用程序使用-libxdp" class="headerlink" title="2.1 从应用程序使用 libxdp"></a>2.1 从应用程序使用 libxdp</h3><p>应用程序中 libxdp 的基本用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IFINDEX 1</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">xdp_program</span> *<span class="hljs-title">prog</span>;</span><br><span class="hljs-keyword">int</span> err;<br><br>prog = xdp_program__open_file(<span class="hljs-string">&quot;my-program.o&quot;</span>, <span class="hljs-string">&quot;section_name&quot;</span>, <span class="hljs-literal">NULL</span>);<br># 加载XDP程序的接口<br>err = xdp_program__attach(prog, IFINDEX, XDP_MODE_NATIVE, <span class="hljs-number">0</span>);<br><br># 加载失败了<br><span class="hljs-keyword">if</span> (!err)<br>  # 卸载XDP程序的接口<br>    xdp_program__detach(prog, IFINDEX, XDP_MODE_NATIVE, <span class="hljs-number">0</span>);<br><br>xdp_program__close(prog);<br></code></pre></td></tr></table></figure><p>该<code>xdp_program</code>结构是表示单个 XDP 程序结构。</p><p><code>libxdp</code>包含如下三种创建此类结构体的函数：</p><ol><li>从磁盘上的 BPF 对象文件</li><li><code>libbpf</code>的BPF 对象</li><li>已加载到内核中的程序标识符</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_program__from_bpf_obj</span><span class="hljs-params">(struct bpf_object *obj,</span></span><br><span class="hljs-params"><span class="hljs-function">      <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *section_name)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_program__find_file</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *section_name,</span></span><br><span class="hljs-params"><span class="hljs-function">   struct bpf_object_open_opts *opts)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_program__open_file</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *section_name,</span></span><br><span class="hljs-params"><span class="hljs-function">   struct bpf_object_open_opts *opts)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_program__from_fd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_program__from_id</span><span class="hljs-params">(__u32 prog_id)</span></span>;<br><span class="hljs-function">struct xdp_program *<span class="hljs-title">xdp_program__from_pin</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pin_path)</span></span>;<br></code></pre></td></tr></table></figure><p>打开 BPF 对象或文件的函数需要 XDP 程序的函数名以及文件名或对象，因为一个 ELF 文件可以包含多个 XDP 程序。<code>xdp_program__find_file()</code>函数采用不带路径的文件名，并将查找<code>LIBXDP_OBJECT_PATH</code>上定义的对象，默认为<code>/usr/lib/bpf</code>（或<code>/usr/lib64/bpf</code>在使用拆分库路径的系统上）。这对于传送预编译的 eBPF 目标文件的应用程序来说很方便。</p><p>该<code>xdp_program__attach()</code>函数将程序附加到一个接口，构建一个调度程序来执行它。可以一次附加多个程序<code>xdp_program__attach_multi()</code>；它们将按照它们的运行优先级排序，并且从一个程序到下一个程序的执行将根据为每个程序定义的链调用动作进行（请参阅下面的<strong>程序元数据</strong>部分）。由于加载过程涉及修改程序的附加类型，因此附加函数仅适用于<code>struct xdp_program</code>尚未加载到内核中的对象。</p><p>当使用附加函数附加到已经加载了 XDP 程序的接口时，libxdp 将尝试将该程序添加到已加载程序的列表中。但是，这可能会失败，原因可能是缺少内核支持，或者是因为未使用与 libxdp 兼容的调度程序加载已附加的程序。如果缺少对增量附加（在内核 5.10 中合并）的内核支持，那么在单个接口上实际运行多个程序的唯一方法是使用 <code>xdp_program__attach_multi()</code>. 如果现有程序不是 XDP 调度程序，则必须先将该程序与接口分离，然后 libxdp 才能附加新程序。这可以通过调用来完成<code>xdp_program__detach()</code>引用加载的程序；但请注意，这当然会破坏任何依赖于存在的其他 XDP 程序的应用程序。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>[1] <a href="https://blog.cloudflare.com/l4drop-xdp-ebpf-based-ddos-mitigations/">https://blog.cloudflare.com/l4drop-xdp-ebpf-based-ddos-mitigations/</a></li><li>[2] <a href="https://suricata.readthedocs.io/en/latest/capture-hardware/ebpf-xdp.html">https://suricata.readthedocs.io/en/latest/capture-hardware/ebpf-xdp.html</a></li><li>[3] <a href="https://lpc.events/event/4/contributions/460/">https://lpc.events/event/4/contributions/460/</a></li><li>[4] <a href="https://lpc.events/event/7/contributions/671/attachments/561/992/xdp-multiprog.pdf">https://lpc.events/event/7/contributions/671/attachments/561/992/xdp-multiprog.pdf</a></li><li>[5] <a href="https://www.youtube.com/watch?v=Fu4L8ewcO70">https://www.youtube.com/watch?v=Fu4L8ewcO70</a></li><li>[6] <a href="https://cilium.io/blog/2021/05/20/cilium-110">https://cilium.io/blog/2021/05/20/cilium-110</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>eBPF</tag>
      
      <tag>XDP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s多租户</title>
    <link href="/2021/12/01/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7/"/>
    <url>/2021/12/01/k8s%E5%A4%9A%E7%A7%9F%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>企业外部多租需求，为保证安全性和提升资源使用率，需要对每个租户提供一个专用的控制层平面</p><p>而原生k8s基于命名空间（Namespace） 机制的多租户是弱多租，没法做到很好的隔离</p><p>目前硬多租隔离方案有：</p><ul><li>Kubernetes-sig mutil-tenancy的VirtualCluster</li><li>loft-sh的vCluster</li></ul><p>实现原理上大同小异，具体差异可看这里<a href="https://github.com/kubernetes-sigs/multi-tenancy/issues/1486">differences between VirtualCluster and vcluster</a></p><p>综合社区兼容性，和完善性，选择VirtualCluster作为分析对象</p><h1 id="VirtualCluster"><a href="#VirtualCluster" class="headerlink" title="VirtualCluster"></a>VirtualCluster</h1><p>VirtualCluster 代表了一种新架构，可以解决各种 Kubernetes 控制平面隔离挑战。它通过为每个租户提供集群视图来扩展现有的基于命名空间的 Kubernetes 多租户模型。 VirtualCluster 完全利用了 Kubernetes 的可扩展性并保留了完整的 API 兼容性。使用VirtualCluster，每个租户会被分配一个专用的租户控制层，租户可以在租户控制平面中创建集群范围资源，例如命名空间和 CRD，而不会影响其他人，因此，由于共享一个 apiserver 导致的大部分隔离问题都消失了。管理和维护实际物理节点的 Kubernetes 集群称为super cluster，现在成为 Pod 资源提供者，至于数据层的隔离则是用安全沙箱容器，例如kata。</p><p>VirtualCluster由如下组件组成：</p><ul><li><strong>vc-manager：</strong>引入了新的 CRD VirtualCluster 来对租户控制平面进行建模。 vc-manager 管理每个 VirtualCluster 自定义资源的生命周期。根据规范，它要么在本地 K8s 集群中创建控制平面 Pod，要么在提供有效 kubeconfig 的情况下导入现有集群。</li><li><strong>syncer：</strong>一个集中控制器，将 Pod 供应所需的 API 对象，从每个租户控制平面填充到超级集群，并双向同步对象状态。它还定期扫描同步对象，以确保租户控制平面和超级集群之间的状态一致。</li><li><strong>vn-agent：</strong>一个节点守护进程，它将所有租户 kubelet API 请求代理到在节点中运行的 kubelet 进程。它确保每个租户只能访问节点中自己的 Pod。</li></ul><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>理想情况下，租户在大多数情况下不应该知道super cluster的存在。比较租户控制平面和普通 Kubernetes 集群，仍然存在一些明显的差异。</p><ul><li>在租户控制平面中，节点对象只有在租户 Pod 被创建后才会出现。super cluster节点拓扑没有完全暴露在租户控制平面中。这意味着 VirtualCluster 不支持租户控制平面中的类似 DaemonSet 的工作负载。目前，如果新创建的租户 Pod 的<code>nodename</code>已在<code>spec</code>中设置，则syncer controller会拒绝它。</li><li>syncer controller管理租户控制平面中node对象的生命周期，但它不会更新node lease对象以减少网络流量。因此，建议将租户控制平面节点控制器 –node-monitor-grace-period 参数增加到更大的值（&gt;60 秒)</li><li>Coredns 感知不到租户。因此，如果需要 DNS，租户应在租户控制平面中安装 coredns。应该使用名称 kube-dns 在 kube-system 命名空间中创建 DNS 服务。然后syncer controller可以在super cluster中识别 DNS  service的cluster IP ，并将其注入任何 <code>Pod spec.dnsConfig</code>。</li><li>租户service spec中的cluster IP 字段是一个虚假值。如果任何租户控制器需要在super cluster节点中生效实际的cluster IP，则需要进行特殊处理。syncer将使用<code>transparent.tenancy.x-k8s.io/clusterIP</code> 作为key，在租户services对象的annotations中回填super cluster中使用的cluster IP。然后，解决方法通常是在控制器中进行简单的代码更改。本文档显示了 coredns 的示例。</li><li>VirtualCluster 不支持租户 PersistentVolumes。所有的 PV 和 Storageclass 都由super cluster提供。</li></ul><h2 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/202112031923287.png" alt="img_06"></p><p>​                                                                                                    图1</p><h3 id="1-Tenant-Operator"><a href="#1-Tenant-Operator" class="headerlink" title="1. Tenant Operator"></a>1. Tenant Operator</h3><p>VirtualCluster CRD，简称VC， 定义为描述租户控制平面规范 比如apiserver版本，资源配置等。VC对象由Super Cluster管理员管理。这个租户Operator调谐（reconcile） VC 对象的状态，无论何时它们被更改，以处理租户控制平面的生命周期事件。</p><p>请注意，租户控制平面不需要调度器，因为 Pod 调度是在super cluster中完成的。</p><p>VC目前支持本地模式和云模式进行配置租户控制平面。在云模式下，租户operator利用阿里云ACK或AWS EKS等公有云服务 ，用于管理控制平面组件。它还存储了集群访问凭证，super cluster中每个租户控制平面的 kubeconf ig，以便syncer控制器可以从super cluster访问所有租户控制平面。不允许租户访问超级集群。</p><h3 id="2-Syncer-controller"><a href="#2-Syncer-controller" class="headerlink" title="2. Syncer controller"></a>2. Syncer controller</h3><p>syncer只填充在Pod provision中使用的租户对象，例如：命名空间（Namespaces），Pods，Services，Secrets等等。对于super cluster，不包括所有其他控制或扩展对象。</p><p>请注意，所有对同步对象的读请求均由租户apiservers提供服务，从而缓解super cluster的压力，相比所有租户都直接访问super cluster的场景。</p><p>在Kubernetes中，任何命名空间作用域对象的全称，例如namespace/objectname，必须唯一。</p><p>syncer为每一个同步的租户命名空间（Namespace）都会添加一个前缀，避免名称冲突。</p><p>前缀是将VC 的对象所有者名称和对象的 UID 的哈希值，做一个简短的连接<br>。同步器的作用不仅仅是复制对象。</p><h3 id="3-Virtual-Node-agent"><a href="#3-Virtual-Node-agent" class="headerlink" title="3. Virtual Node agent"></a>3. Virtual Node agent</h3><p>在 Kubernetes 中，kubelet 只能将自己注册到一个 apiserver，即 Virtual Cluster 中的Super Cluster。因此，常用的 kubelet API，例如 log 和exec 对租户不起作用，因为租户 apiserver 不能直接访问kubelet。实现了一个虚拟节点代理(vn-agent) 解决这个问题，它运行在每个节点上代理租户的 kubelet API 请求。更具体地说，一旦<br>在super cluster中调度了一个 Pod，syncer将创建租户 apiserver 中的虚拟节点对象。为了拦截kubelet API 请求，虚拟节点指向物理节点中的 vn-agent而不是 kubelet 。当代理请求时，vn-agent 需要从 HTTPS请求 中识别租户，因为租户 Pod 在super cluster中的Namespace与租户控制平面的不同。发送请求的租户可以是通过将其 TLS 证书的哈希值与保存在每个 VC 对象中的哈希值作对比来识别。之后可以计算出它在super cluster中使用的命名空间（Namespace）前缀</p><h3 id="4-增强型kubeproxy"><a href="#4-增强型kubeproxy" class="headerlink" title="4. 增强型kubeproxy"></a>4. 增强型kubeproxy</h3><p>在Kubernetes中，cluster IP类型的Services，定义了集群内访问一组端点的路由策略（即访问Pods），路由策略由一个 kubeproxy 守护进程实施，它会在Service endpoints发生变化时，更新主机的IPtables。当容器连到一个VPC（virtual private cloud）网络时，这个机制就被破坏了。因为网络流量可通过一个vendor-specific network interface绕过主机网络协议栈（network stack）。为了在这样的环境下启用cluster IP类型的Services，通过允许直接注入或者更新每个Kata容器的guest OS中的网络路由规则来增强kubeproxy。更具体的说，允许在guest OS中的Kata agent开启一个与kubeproxy的安全的gRPC连接，通过它可以将服务路由规则应用于guest OS的 IPtable</p><p>kubeproxy 的改动是适度的。它需要监视 Pod 创建事件，并且和 Pod init容器 配合。Pod init容器先于任何工作负载（workload）容器运行，检查 IPtable 更新进度，确保在工作负载（workload）容器启动之前注入路由规则</p><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><p>实验环境：1.18 Kubernetes集群，1 Master + 2 woker Node</p><p>为了测量syncer controller的资源使用，避免其他组件潜在的干扰，在其中一个worker node部署syncer controller，在另一个work node部署租户控制平面（tenant control planes）。每个租户控制平面使用一个专用的etcd。所有的控制平面使用一个高速的virtual switch连到同一个VPC。由于资源限制，我们在super cluster安装了100个virtual kubelets，来模拟一个拥有100个节点，运行大量Pods的集群。请注意注意实验中Pod的创建延迟由于使用了virtual kubelet，并没有把拉取镜像和创建容器的时间包含在内。</p><p>选取Pod端到端创建时间作为主要性能指标主要有如下原因：</p><ul><li>当VirtualCluster在高负载的情况下，syncer引入的队列延迟是主要的性能问题</li><li>Pod对象，作为Kubernetes主要的对象，可能是最复杂的模式，并且还发明很多对象来为它服务。操作pod对象的性能将会有很高的代表性</li><li>Pod创建触发了一个复杂的工作流程，包括其他主要的Kubernetes组件，像scheduler和kubelet。它正处于应用部署的关键路径。因此它的性能经常被强调</li></ul><p>当VirtualCluster部署正常的load，syncer每秒的请求会有1或2毫秒延迟，这在典型的Kubernetes用例中，是不值得一提的。开发了一个可以同时在所有租户控制平面创建大量Pod的负载生成器（load generator）来给系统做压测。在super cluster，每一个virtual kubelet运行一个模拟pod的提供者（mock Pod provider），标记所有Pod调度到virtual kubelet，并且立即设置为running的状态。Pod创建时间通过计算租户pod的创建时间戳，和租户里Pod condition被更新为ready的时间戳之差，包括所有队列延迟和有syncer产生的对象同步的开销。通过负载生成器（load generator）直接发送所有请求到super cluster生成一些基线用例，来做对比。基线中Pod的创建时间通过Pod创建时间戳和Pod的condition状态更新为ready的时间戳来计算。</p><h3 id="1-Syncer-controller对延迟的影响"><a href="#1-Syncer-controller对延迟的影响" class="headerlink" title="1. Syncer controller对延迟的影响"></a>1. Syncer controller对延迟的影响</h3><p>可能影响Syncer延迟方面性能的三个因素。它们是创建的 Pod 数、租户数和下行工作线程数。通过改变每个因素的数量得到了十二个案例，结果如图 2 所示。在每个用例中，每个租户中创建的 Pod 数量是相等的。</p><p>对于基线用例，负载生成器使用与租户数量相同的线程数直接将Pod提交到超级集群。 将 Pod 创建时间直方图与基线案例的直方图进行比较，结果为如图2所示。集中的直方图表示性能稳定，而平坦的直方图表示高性能变化。</p><p>图 2 显示使用 VirtualCluster 不会显着延长 Pod 创建时间。大多数操作的延迟都在基线延迟范围内。</p><p>例如，当使用 100 个租户和 20 个工作线程时，在创建 1250、2500、5000 和 10000 个 Pod 时，TP99（99% 百分位延迟）为 3秒（基线为 1秒）、4秒（基线为 2秒）、8秒（基线为8秒）、14秒（基线为8秒）。</p><p>由基线用例在创建大量 Pod 时表现出明显的性能变化。可以发现super cluster的可扩展性瓶颈是调度器。默认的 Kubernetes 调度器只有一个队列，它按顺序调度 Pod。因此，在实验中看到当每秒几百个 Pod 创建时，调度器吞吐量达到峰值。在高 Pod 流失率下，调度队列延迟会减慢 Pod 创建过程，这也解释了另一个观察结果，即增加下行工作线程的数量根本没有帮助减少延迟。花费在同步器向下调谐循环（reconcile loop）上的时间是微不足道的。使用20个工作线程足以推动super cluster达到调度吞吐量的上限。但是，上行工作线程的数量确实会影响延迟（图中未显示），因为租户控制平面在处理对象状态更新方面没有瓶颈。因此，我们在同步器中设置了较高的默认向上工作线程数为100和较低的默认值为20向下工作线程。在图 2 中，我们还可以观察到租户数量不会影响创建相同数量 Pod 的延迟。</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202112031834417.jpg" alt="experiment"></p><p>​                                                                                            图2</p><h3 id="2-Syncer-controller对吞吐量的影响"><a href="#2-Syncer-controller对吞吐量的影响" class="headerlink" title="2. Syncer controller对吞吐量的影响"></a>2. Syncer controller对吞吐量的影响</h3><p>通过计算每秒创建Pod数量来评估VirtualCluster吞吐量，结果如图3所示。</p><p>从图 3(a) 中，当创建相同数量的 Pod（10000Pods）， 可以看到租户数量不影响吞吐量。 VirtualCluster 引入了约 21% 的恒定吞吐量下降。由于syncer中的一些关键部分（例如工作队列入队或出队）无法并行化，因此预估吞吐量较低。syncer中的锁竞争可能也会降低吞吐量。</p><p>图 3(b) 显示，当租户数固定（100个租户），吞吐量大致为VirtualCluster 的常数，但随着 Pod 数量的增加，基线用例反而会变得更低，最大吞吐量下降约为 34%。请注意，添加更多syncer可能会通过减少每个同步器锁竞争来提高整体吞吐量。但是，由于以下几个原因，它不是可取的：<br>1）无论租户数量和Pod数量如何，使用一个同步器仍然可以实现可持续的吞吐量；<br>2）与控制平面吞吐量相比，从租户的角度来看，操作延迟更为重要。</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202112061458730.jpg" alt="vcluster-3"></p><p>​                                                                                        图3</p><h3 id="3-Syncer-controller的开销"><a href="#3-Syncer-controller的开销" class="headerlink" title="3.Syncer controller的开销"></a>3.Syncer controller的开销</h3><p>Syncer的可用计算资源会在它繁忙时影响其性能。实验中，没有为syncer设置资源限制。图 4 显示了实验中同步器控制器的 CPU 和内存使用情况。正如预期的那样，随着 Pod 数量的增加，资源使用量几乎呈线性增加。可以通过计算累积的 CPU 时间除以进程挂钟时间来估计消耗的 CPU 的平均数量。比如在一万个Pod的情况下，syncer在实验过程中大致消耗了$\frac{138}{23}$个CPU，也就是6个CPU，远远超出了正常情况下的要求。通常建议syncer的 CPU 限制为1到2个 CPU。在一万个 Pod 的情况下，syncer的峰值内存使用量约为 1.2GB。峰值内存增长率大约为每个 Pod 40KB，这是通过计算曲线的比率来估计的。syncer中的主要内存消耗是 Informer 缓存。一个租户对象在syncer中至少有两个副本，一个在租户控制平面的informer缓存中，另一个在超级集群（super cluster）informer缓存中。syncer工作队列在增长时也会消耗内存，但队列的请求的大小通常很小（几个字节），并且队列不会因为重复数据删除而无限增长。 我们还检查了syncer重启性能，当100 个租户控制平面10000个Pods时，它花费少于21秒初始化所有 Informer 缓存，这是相当快的，因为syncer重启很少见。此外，我们还测量了syncer中周期性扫描线程的开销。并行扫描线程数等于租户数，扫描间隔设置为一分钟。发现平均完成扫描 10000 个 Pod 的时间不到两秒钟。</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202112061605974.jpg" alt="vcluster-10"></p><p>​                                                                                        图4</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://docs.google.com/document/d/1EELeVaduYZ65j4AXg9bp3Kyn38GKDU5fAJ5LFcxt2ZU/edit#">阿里云 Kubernetes 团队 Virtual Cluster 提案</a></li><li><a href="https://docs.google.com/document/d/1U8RQQmTUjxgMZY05HG2f7b3KsB94BhK4Ko6aWbLNXcc/edit#heading=h.b2hihvai50vt">Kubernetes Multi-Tenancy Proposal</a></li><li><a href="https://github.com/kubernetes-sigs/multi-tenancy/blob/master/incubator/virtualcluster/doc/vc-icdcs.pdf">github vc-icdcs</a></li><li><a href="https://github.com/kubernetes-sigs/multi-tenancy/issues/1486">https://github.com/kubernetes-sigs/multi-tenancy/issues/1486</a></li><li><a href="https://docs.google.com/document/d/1hpJX5O_siMmNGMvIHvz8Pm7XOjJLz5g57XWrgwWarFw/edit?userstoinvite=vrgf2003@gmail.com#heading=h.c0uts5ftkk58"><strong>Kubernetes Tenant CRD</strong>  Iterative Kubernetes Multi-tenancy WG Worksheet</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>Multi-tenancy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Operator开发</title>
    <link href="/2021/11/17/Operator%E5%BC%80%E5%8F%91/"/>
    <url>/2021/11/17/Operator%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubebuilder和operator-sdk-区别"><a href="#Kubebuilder和operator-sdk-区别" class="headerlink" title="Kubebuilder和operator sdk 区别"></a>Kubebuilder和operator sdk 区别</h2><p>There’s not a huge difference between the Go projects that kubebuilder and operator-sdk scaffold. Both use controller-tools and controller-runtime and both scaffold substantially similar go package structures.</p><p>Where they differ is:</p><ul><li>Operator SDK also has support for Ansible and Helm operators, which make it easy to write operators without having to learn Go and if you already have experience with Ansible or Helm</li><li>Operator SDK includes integrations with the Operator Lifecycle Manager (OLM), which is a key component of the Operator Framework that is important to Day 2 cluster operations, like managing a live upgrade of your operator.</li><li>Operator SDK includes a scorecard subcommand that helps you understand if your operator follows best practices.</li><li>Operator SDK includes an e2e testing framework that simplifies testing your operator against an actual cluster.</li><li>Kubebuilder includes an envtest package that allows operator developers to run simple tests with a standalone etcd and apiserver.</li><li>Kubebuilder scaffolds a Makefile to assist users in operator tasks (build, test, run, code generation, etc.); Operator SDK is currently using built-in subcommands. Each has pros and cons. The SDK team will likely be migrating to a Makefile-based approach in the future.</li><li>Kubebuilder uses Kustomize to build deployment manifests; Operator SDK uses static files with placeholders.</li><li>Kubebuilder has recently improved its support for admission and CRD conversion webhooks, which has not yet made it into SDK.</li></ul><p>The SDK and Kubebuilder teams work closely together, and we’re planning to increase our efforts to help the kubebuilder team maintain controller-tools and controller-runtime so that the entire community has access to the latest features and bug fixes.</p><h2 id="Kubebuilder"><a href="#Kubebuilder" class="headerlink" title="Kubebuilder"></a>Kubebuilder</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubebuilder init --domain test.com</span><br>Writing kustomize manifests for you to edit...<br>Writing scaffold for you to edit...<br>Get controller runtime:<br><span class="hljs-meta">$</span><span class="bash"> go get sigs.k8s.io/controller-runtime@v0.10.0</span><br>Update dependencies:<br><span class="hljs-meta">$</span><span class="bash"> go mod tidy</span><br>Next: define a resource with:<br><span class="hljs-meta">$</span><span class="bash"> kubebuilder create api</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubebuilder edit --multigroup=true<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── Dockerfile<br>├── Makefile<br>├── PROJECT<br>├── config<br>│   ├── default<br>│   │   ├── kustomization.yaml<br>│   │   ├── manager_auth_proxy_patch.yaml<br>│   │   └── manager_config_patch.yaml<br>│   ├── manager<br>│   │   ├── controller_manager_config.yaml<br>│   │   ├── kustomization.yaml<br>│   │   └── manager.yaml<br>│   ├── prometheus<br>│   │   ├── kustomization.yaml<br>│   │   └── monitor.yaml<br>│   └── rbac<br>│       ├── auth_proxy_client_clusterrole.yaml<br>│       ├── auth_proxy_role.yaml<br>│       ├── auth_proxy_role_binding.yaml<br>│       ├── auth_proxy_service.yaml<br>│       ├── kustomization.yaml<br>│       ├── leader_election_role.yaml<br>│       ├── leader_election_role_binding.yaml<br>│       ├── role_binding.yaml<br>│       └── service_account.yaml<br>├── go.mod<br>├── go.sum<br>├── hack<br>│   └── boilerplate.go.txt<br>└── main.go<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubebuilder create api --group devops --version v1 --kind Cluster</span><br>Create Resource [y/n]<br>y<br>Create Controller [y/n]<br>y<br>Writing kustomize manifests for you to edit...<br>Writing scaffold for you to edit...<br>api/v1/cluster_types.go<br>controllers/cluster_controller.go<br>Update dependencies:<br><span class="hljs-meta">$</span><span class="bash"> go mod tidy</span><br>Running make:<br><span class="hljs-meta">$</span><span class="bash"> make generate</span><br>go: creating new go.mod: module tmp<br>Downloading sigs.k8s.io/controller-tools/cmd/controller-gen@v0.7.0<br>go get: installing executables with &#x27;go get&#x27; in module mode is deprecated.<br>To adjust and download dependencies of the current module, use &#x27;go get -d&#x27;.<br>To install using requirements of the current module, use &#x27;go install&#x27;.<br>To install ignoring the current module, use &#x27;go install&#x27; with a version,<br>like &#x27;go install example.com/cmd@latest&#x27;.<br>For more information, see https://golang.org/doc/go-get-install-deprecation<br>or run &#x27;go help get&#x27; or &#x27;go help install&#x27;.<br>go get: added github.com/fatih/color v1.12.0<br>go get: added github.com/go-logr/logr v0.4.0<br>go get: added github.com/gobuffalo/flect v0.2.3<br>go get: added github.com/gogo/protobuf v1.3.2<br>go get: added github.com/google/go-cmp v0.5.6<br>go get: added github.com/google/gofuzz v1.1.0<br>go get: added github.com/inconshreveable/mousetrap v1.0.0<br>go get: added github.com/json-iterator/go v1.1.11<br>go get: added github.com/mattn/go-colorable v0.1.8<br>go get: added github.com/mattn/go-isatty v0.0.12<br>go get: added github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd<br>go get: added github.com/modern-go/reflect2 v1.0.1<br>go get: added github.com/spf13/cobra v1.2.1<br>go get: added github.com/spf13/pflag v1.0.5<br>go get: added golang.org/x/mod v0.4.2<br>go get: added golang.org/x/net v0.0.0-20210520170846-37e1c6afe023<br>go get: added golang.org/x/sys v0.0.0-20210616094352-59db8d763f22<br>go get: added golang.org/x/text v0.3.6<br>go get: added golang.org/x/tools v0.1.5<br>go get: added golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1<br>go get: added gopkg.in/inf.v0 v0.9.1<br>go get: added gopkg.in/yaml.v2 v2.4.0<br>go get: added gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b<br>go get: added k8s.io/api v0.22.2<br>go get: added k8s.io/apiextensions-apiserver v0.22.2<br>go get: added k8s.io/apimachinery v0.22.2<br>go get: added k8s.io/klog/v2 v2.9.0<br>go get: added k8s.io/utils v0.0.0-20210819203725-bdf08cb9a70a<br>go get: added sigs.k8s.io/controller-tools v0.7.0<br>go get: added sigs.k8s.io/structured-merge-diff/v4 v4.1.2<br>go get: added sigs.k8s.io/yaml v1.2.0<br>/Users/flynn/go/src/test.com/cluster-manager/bin/controller-gen object:headerFile=&quot;hack/boilerplate.go.txt&quot; paths=&quot;./...&quot;<br>Next: implement your new API and generate the manifests (e.g. CRDs,CRs) with:<br><span class="hljs-meta">$</span><span class="bash"> make manifests</span><br></code></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── Dockerfile<br>├── Makefile<br>├── PROJECT<br>├── api<br>│   └── v1<br>│       ├── cluster_types.go<br>│       ├── groupversion_info.go<br>│       └── zz_generated.deepcopy.go<br>├── bin<br>│   └── controller-gen<br>├── config<br>│   ├── crd<br>│   │   ├── kustomization.yaml<br>│   │   ├── kustomizeconfig.yaml<br>│   │   └── patches<br>│   │       ├── cainjection_in_clusters.yaml<br>│   │       └── webhook_in_clusters.yaml<br>│   ├── default<br>│   │   ├── kustomization.yaml<br>│   │   ├── manager_auth_proxy_patch.yaml<br>│   │   └── manager_config_patch.yaml<br>│   ├── manager<br>│   │   ├── controller_manager_config.yaml<br>│   │   ├── kustomization.yaml<br>│   │   └── manager.yaml<br>│   ├── prometheus<br>│   │   ├── kustomization.yaml<br>│   │   └── monitor.yaml<br>│   ├── rbac<br>│   │   ├── auth_proxy_client_clusterrole.yaml<br>│   │   ├── auth_proxy_role.yaml<br>│   │   ├── auth_proxy_role_binding.yaml<br>│   │   ├── auth_proxy_service.yaml<br>│   │   ├── cluster_editor_role.yaml<br>│   │   ├── cluster_viewer_role.yaml<br>│   │   ├── kustomization.yaml<br>│   │   ├── leader_election_role.yaml<br>│   │   ├── leader_election_role_binding.yaml<br>│   │   ├── role_binding.yaml<br>│   │   └── service_account.yaml<br>│   └── samples<br>│       └── devops_v1_cluster.yaml<br>├── controllers<br>│   ├── cluster_controller.go<br>│   └── suite_test.go<br>├── go.mod<br>├── go.sum<br>├── hack<br>│   └── boilerplate.go.txt<br>└── main.go<br></code></pre></td></tr></table></figure><p>安装CRD</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>定义yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">devops.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-01</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">xiamen-area</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">osType:</span> <span class="hljs-string">centos</span>                 <span class="hljs-comment"># 操作系统类型</span><br>  <span class="hljs-attr">criType:</span> <span class="hljs-string">containerd</span>            <span class="hljs-comment"># cri 类型， 目前支持 containerd， 废弃 docker 支持</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1.19.6</span>               <span class="hljs-comment"># kubernetes version</span><br>  <span class="hljs-attr">eth:</span> <span class="hljs-string">ens34</span>           <span class="hljs-comment"># 网卡名称， 默认 eth0</span><br>  <span class="hljs-attr">clusterCIDR:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.101</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span>   <span class="hljs-comment"># 集群 pod cidr</span><br>  <span class="hljs-attr">serviceCIDR:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.201</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span>   <span class="hljs-comment"># 集群 service cidr</span><br>  <span class="hljs-attr">localAPIEndpoint:</span><br>    <span class="hljs-attr">advertiseAddress:</span> <span class="hljs-number">183.131</span><span class="hljs-number">.145</span><span class="hljs-number">.84</span><br>    <span class="hljs-attr">bindPort:</span> <span class="hljs-number">6443</span>   <br>  <span class="hljs-attr">network:</span><br>    <span class="hljs-attr">ipvs:</span> <span class="hljs-literal">true</span>                   <span class="hljs-comment"># kube-proxy 类型，支持 ipvs、iptables</span><br>    <span class="hljs-attr">internalLB:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">enableMasterSchedule:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># master 结点是否调度</span><br>    <span class="hljs-attr">ha:</span><br>      <span class="hljs-attr">thirdParty:</span><br>        <span class="hljs-attr">vip:</span> <span class="hljs-string">&quot;172.16.18.243&quot;</span>     <span class="hljs-comment"># 集群 apiserver vip</span><br>        <span class="hljs-attr">vport:</span> <span class="hljs-number">6443</span><br>    <span class="hljs-attr">hooks:</span><br>      <span class="hljs-attr">cniInstall:</span> <span class="hljs-string">flannel</span>         <span class="hljs-comment"># 集群 cni 插件</span><br>  <span class="hljs-attr">masterMachines:</span> <span class="hljs-comment"># 集群 master 结点</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.18</span><span class="hljs-number">.17</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.18</span><span class="hljs-number">.18</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">ip:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.18</span><span class="hljs-number">.19</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">22</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-comment"># 镜像仓库 mirrors</span><br>    <span class="hljs-attr">mirrors:</span><br>      <span class="hljs-attr">&quot;docker.io&quot;:</span><br>        <span class="hljs-attr">endpoints:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://yqdzw3p0.mirror.aliyuncs.com&quot;</span><br>      <span class="hljs-attr">&quot;quay.io&quot;:</span><br>        <span class="hljs-attr">endpoints:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://quay.mirrors.ustc.edu.cn&quot;</span><br>  <span class="hljs-attr">upgrade:</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">Manual</span>                     <span class="hljs-comment"># 集群升级模式，支持 Auto、Manual</span><br>    <span class="hljs-attr">strategy:</span> <span class="hljs-comment"># 集群升级策略</span><br>      <span class="hljs-attr">maxUnready:</span> <span class="hljs-number">0</span>                  <span class="hljs-comment"># 需要增加结点轮转升级</span><br>      <span class="hljs-attr">drainNodeBeforeUpgrade:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 升级结点前 drain 掉</span><br></code></pre></td></tr></table></figure><p>安装Operator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master kok-operator]# helm upgrade --install kok-operator --create-namespace --namespace kok-system --debug ./charts/kok-operator<br>history.go:56: [debug] getting history for release kok-operator<br>Release &quot;kok-operator&quot; does not exist. Installing it now.<br>install.go:178: [debug] Original chart version: &quot;&quot;<br>install.go:199: [debug] CHART PATH: /root/kok-operator/charts/kok-operator<br><br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 1 resource(s)<br>install.go:165: [debug] Clearing discovery cache<br>wait.go:48: [debug] beginning wait for 4 resources with timeout of 1m0s<br>client.go:128: [debug] creating 1 resource(s)<br>client.go:128: [debug] creating 5 resource(s)<br>NAME: kok-operator<br>LAST DEPLOYED: Sun Nov 21 21:38:08 2021<br>NAMESPACE: kok-system<br>STATUS: deployed<br>REVISION: 1<br>TEST SUITE: None<br>USER-SUPPLIED VALUES:<br>&#123;&#125;<br><br>COMPUTED VALUES:<br>affinity: &#123;&#125;<br>args:<br>  imagesPrefix: docker.io/wtxue<br>fullnameOverride: &quot;&quot;<br>image:<br>  pullPolicy: Always<br>  repository: docker.io/wtxue/kok-operator<br>  tag: v0.2.0-dev2<br>imagePullSecrets: []<br>nameOverride: &quot;&quot;<br>nodeSelector: &#123;&#125;<br>podAnnotations: &#123;&#125;<br>podSecurityContext: &#123;&#125;<br>rbac:<br>  create: true<br>  name: &quot;&quot;<br>replicaCount: 1<br>resources: &#123;&#125;<br>securityContext: &#123;&#125;<br>service:<br>  port: 80<br>  type: ClusterIP<br>tolerations: []<br><br>HOOKS:<br>MANIFEST:<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/rbac.yaml</span><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: kok-operator<br>  namespace: kok-system<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/rbac.yaml</span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: kok-operator<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>rules:<br>  - apiGroups:<br>      - &quot;&quot;<br>    resources: [&quot;*&quot;]<br>    verbs: [&quot;*&quot;]<br>  - apiGroups:<br>      - &quot;apps&quot;<br>      - &quot;apiextensions.k8s.io&quot;<br>      - &quot;autoscaling&quot;<br>    resources: [&quot;*&quot;]<br>    verbs: [&quot;*&quot;]<br>  - apiGroups: [&quot;devops.fake.io&quot;,&quot;workload.fake.io&quot;]<br>    resources: [&quot;*&quot;]<br>    verbs: [&quot;*&quot;]<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/rbac.yaml</span><br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: kok-operator<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>subjects:<br>  - kind: ServiceAccount<br>    name: kok-operator<br>    namespace: kok-system<br>roleRef:<br>  kind: ClusterRole<br>  name: kok-operator<br>  apiGroup: rbac.authorization.k8s.io<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/service.yaml</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: kok-operator<br>  namespace: kok-system<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>spec:<br>  type: ClusterIP<br>  ports:<br>    - port: 80<br>      targetPort: http<br>      protocol: TCP<br>      name: http<br>  selector:<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>---<br><span class="hljs-meta">#</span><span class="bash"> Source: kok-operator/templates/deployment.yaml</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: kok-operator<br>  namespace: kok-system<br>  labels:<br>    helm.sh/chart: kok-operator-v0.2.0<br>    app.kubernetes.io/name: kok-operator<br>    app.kubernetes.io/instance: kok-operator<br>    app.kubernetes.io/version: &quot;v0.2.0&quot;<br>    app.kubernetes.io/managed-by: Helm<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app.kubernetes.io/name: kok-operator<br>      app.kubernetes.io/instance: kok-operator<br>  template:<br>    metadata:<br>      labels:<br>        app.kubernetes.io/name: kok-operator<br>        app.kubernetes.io/instance: kok-operator<br>    spec:<br>      serviceAccountName: kok-operator<br>      securityContext:<br>        &#123;&#125;<br>      containers:<br>        - name: kok-operator<br>          securityContext:<br>            &#123;&#125;<br>          image: &quot;docker.io/wtxue/kok-operator:v0.2.0-dev2&quot;<br>          imagePullPolicy: Always<br>          command:<br>            - kok-operator<br>          args:<br>            - ctrl<br>            - -v<br>            - &quot;4&quot;<br>            - --images-prefix=docker.io/wtxue<br>          ports:<br>            - name: http<br>              containerPort: 8090<br>              protocol: TCP<br><span class="hljs-meta">#</span><span class="bash">          livenessProbe:</span><br><span class="hljs-meta">#</span><span class="bash">            httpGet:</span><br><span class="hljs-meta">#</span><span class="bash">              path: /</span><br><span class="hljs-meta">#</span><span class="bash">              port: http</span><br><span class="hljs-meta">#</span><span class="bash">          readinessProbe:</span><br><span class="hljs-meta">#</span><span class="bash">            httpGet:</span><br><span class="hljs-meta">#</span><span class="bash">              path: /</span><br><span class="hljs-meta">#</span><span class="bash">              port: http</span><br>          resources:<br>            &#123;&#125;<br><br>NOTES:<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>operator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes万级规模高可用</title>
    <link href="/2021/10/27/kubernetes%E4%B8%87%E7%BA%A7%E8%A7%84%E6%A8%A1%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <url>/2021/10/27/kubernetes%E4%B8%87%E7%BA%A7%E8%A7%84%E6%A8%A1%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>当集群节点超过5000时</p><p><img src="https://gitee.com/eightzero/pico/raw/master/8cf1d986cfb040998d715ded91f56e2f.png" alt="8cf1d986cfb040998d715ded91f56e2f"></p><p>问题</p><ul><li>etcd 出现大量的读写延迟。</li><li>kube-apiserver 查询 pods/nodes 延时很高，甚至导致 etcd oom。</li><li>控制器无法及时感知数据变化，如出现 watch 数据延迟。</li></ul><p>解决方案：</p><p>100 节点增长到 4 千节点：</p><ul><li>从 apiserver 客户端的角度优先访问本地 cache，在客户端去做负载均衡</li><li>apiserver 服务端主要做了 watch 优化和 cache 索引优化</li><li>在 etcd 内核上利用并发读提升单 etcd 集群读处理能力，基于 hashmap 的 freelist 管理新算法提高 etcd 存储上限，基于 raft learner 技术来提高多备能力</li></ul><p>4 千节点增长到 8 千节点：</p><ul><li>qps 限流管理和容量管理优化</li><li>etcd 单资源对象存储拆分</li><li>组件规范全生命周期落地通过客户端的规范约束降低对 apiserver 的压力和以及穿透到 etcd 的压力等等</li></ul><p> 8 千节点增长到上万节点：</p><ul><li>etcdcompact 算法优化</li><li>etcd 单节点多 multiboltdb 的架构优化</li><li>apiserver 的服务端数据压缩</li><li>通过组件治理降低 etcd 写放大等</li><li>同时开始打造常态化的压测服务能力</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试环境搭建</title>
    <link href="/2021/10/12/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/12/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<ul><li><p>kubernetes master + 2 node （使用cilium替代kube-proxy）</p></li><li><p>helm3</p></li><li><p>cilium+hubble</p></li><li><p>切换superedge</p></li><li><p>安装ISTIO</p></li><li><p>安装Karmada</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init --pod-network-cidr=10.218.0.0/16 --skip-phases=addon/kube-proxy<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init --kubernetes-version=1.18.20  --image-repository registry.aliyuncs.com/google_containers  --service-cidr=10.10.0.0/16 --pod-network-cidr=10.218.0.0/16   --skip-phases=addon/kube-proxy<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm install cilium cilium/cilium --version 1.10.4 \<br>--namespace kube-system \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">kubeProxyReplacement</span>=strict \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServiceHost</span>=192.168.92.132 \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServicePort</span>=6443 \<br>--<span class="hljs-builtin-name">set</span> hubble.relay.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span> \<br>--<span class="hljs-builtin-name">set</span> hubble.ui.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm install cilium cilium/cilium --version 1.10.4 \<br>--namespace kube-system \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">kubeProxyReplacement</span>=strict \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServiceHost</span>=183.131.145.82 \<br>--<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">k8sServicePort</span>=6443 \<br>--<span class="hljs-builtin-name">set</span> hubble.relay.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span> \<br>--<span class="hljs-builtin-name">set</span> hubble.ui.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>将 Hubble UI 改为 NodePort 访问</li></ul><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab">kubectl -n kube-<span class="hljs-built_in">system</span> patch svc hubble-ui -p <span class="hljs-string">&#x27;&#123;&quot;</span>spec<span class="hljs-string">&quot;: &#123;&quot;</span><span class="hljs-built_in">type</span><span class="hljs-string">&quot;: &quot;</span>NodePort<span class="hljs-string">&quot;&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">kubectl</span> -n kube-system <span class="hljs-meta">get</span> <span class="hljs-keyword">svc</span> hubble-ui<br></code></pre></td></tr></table></figure><p>升级内核</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://mirrors.nju.edu.cn/elrepo/kernel/el<span class="hljs-number">7</span>/x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>/RPMS/kernel-lt-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">151</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><br><span class="hljs-attribute">rpm</span> -ivh kernel-lt-<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">151</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>.rpm<br><br><span class="hljs-attribute">cat</span> /boot/grub<span class="hljs-number">2</span>/grub.cfg | grep menuentry<br><br><span class="hljs-attribute">grub2</span>-set-default &#x27;CentOS Linux (<span class="hljs-number">5</span>.<span class="hljs-number">4</span>.<span class="hljs-number">151</span>-<span class="hljs-number">1</span>.el<span class="hljs-number">7</span>.elrepo.x<span class="hljs-number">86</span>_<span class="hljs-number">64</span>) <span class="hljs-number">7</span> (Core)&#x27;<br><br><span class="hljs-attribute">grub2</span>-editenv list<br><br><span class="hljs-attribute">grub2</span>-mkconfig -o /boot/grub<span class="hljs-number">2</span>/grub.cfg<br><br><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><p>遇到问题</p><p><img src="https://gitee.com/eightzero/pico/raw/master/image-20211012155844618.png" alt="image-20211012155844618"></p><ul><li><p>Cilium pod CrashLoopBackOff</p><p>内核最低支持4.8.0</p><p><img src="https://gitee.com/eightzero/pico/raw/master/image-20211012160038293.png" alt="image-20211012160038293"></p></li><li><p>coredns ContainerCreating</p></li></ul><h2 id="多公网集群搭建"><a href="#多公网集群搭建" class="headerlink" title="多公网集群搭建"></a>多公网集群搭建</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm init <span class="hljs-attribute">--kubernetes-version</span>=1.18.20  <span class="hljs-attribute">--apiserver-advertise-address</span>=机器Ip  --image-repository registry.aliyuncs.com/google_containers  <span class="hljs-attribute">--service-cidr</span>=10.10.0.0/16 <span class="hljs-attribute">--pod-network-cidr</span>=10.122.0.0/16<br></code></pre></td></tr></table></figure><p>#在kubeadm-config.yml设置好镜像源，版本，集群网段，–apiserver-advertise-address为外网ip 等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; kubeadm-init.yaml<br>apiVersion: kubeadm.k8s.io/v1beta2<br>bootstrapTokens:<br>- groups:<br>  - system:bootstrappers:kubeadm:default-node-token<br>  token: abcdef.66wcf1rc5wk6637f            ## token 建议重新生成别用默认的<br>  ttl: 24h0m0s<br>  usages:<br>  - signing<br>  - authentication<br>kind: InitConfiguration<br>localAPIEndpoint:<br>  advertiseAddress: &quot;IPADDRESS&quot;     # 公网IP地址<br>  bindPort: 6443            # API 端口<br>nodeRegistration:<br>  criSocket: /var/run/dockershim.sock<br>  name: master001<br>  taints:<br>  - effect: NoSchedule<br>    key: node-role.kubernetes.io/master<br>---<br>apiServer:<br>  extraArgs:<br>    advertise-address: &quot;IPADDRESS&quot;    ## 公网机器互联需要<br>  certSANs:<br>  - &quot;IPADDRESS&quot;<br>  timeoutForControlPlane: 10m0s<br>apiVersion: kubeadm.k8s.io/v1beta2<br>certificatesDir: /etc/kubernetes/pki<br>clusterName: kubernetes<br>controllerManager: &#123;&#125;<br>dns:<br>  type: CoreDNS<br>etcd:<br>  local:<br>    dataDir: /var/lib/etcd<br>imageRepository: registry.aliyuncs.com/google_containers       # image的仓库源<br>kind: ClusterConfiguration<br>kubernetesVersion: v1.16.0<br>networking:<br>  dnsDomain: cluster.local<br>  serviceSubnet: 10.96.0.0/12<br>  podSubnet: 192.168.0.0/16<br>scheduler: &#123;&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>以上配置文件中的IPADDRESS作为占位符,可以通过以下命令替换成<strong>公网IP</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip=$(curl -s -4 ip.sb)<br>sed -i &quot;s/IPADDRESS/$ip/g&quot; kubeadm-init.yaml<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm init phase preflight --config myKubeadmConfig.yaml  --ignore-preflight-errors NumCPU<br>kubeadm init phase certs all --config myKubeadmConfig.yaml<br>kubeadm init phase kubeconfig all --config myKubeadmConfig.yaml<br>kubeadm init phase kubelet-start --config myKubeadmConfig.yaml<br>kubeadm init phase control-plane all --config myKubeadmConfig.yaml<br>kubeadm init phase etcd local --config myKubeadmConfig.yaml<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/manifests/</span>etcd.yaml<br><span class="hljs-comment">#把--listen-client-urls 和 --listen-peer-urls 都改成0.0.0.0:xxx</span><br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">kubeadm</span> <span class="hljs-comment">init</span> --<span class="hljs-comment">skip</span><span class="hljs-literal">-</span><span class="hljs-comment">phases=preflight</span><span class="hljs-string">,</span><span class="hljs-comment">certs</span><span class="hljs-string">,</span><span class="hljs-comment">kubeconfig</span><span class="hljs-string">,</span><span class="hljs-comment">kubelet</span><span class="hljs-literal">-</span><span class="hljs-comment">start</span><span class="hljs-string">,</span><span class="hljs-comment">control</span><span class="hljs-literal">-</span><span class="hljs-comment">plane</span><span class="hljs-string">,</span><span class="hljs-comment">etcd</span><span class="hljs-string">,</span><span class="hljs-comment">addon/kube</span><span class="hljs-literal">-</span><span class="hljs-comment">proxy</span> --<span class="hljs-comment">config</span> <span class="hljs-comment">myKubeadmConfig</span><span class="hljs-string">.</span><span class="hljs-comment">yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubeadm join 172.25.156.55:6443 --token y9ohc0.77zro9ruyyub4t0w \<br>    --discovery-token-ca-cert-hash sha256:b84e69459da3ee0e1c26a4b8ffa4f778040bd93511a0465d83596edef7bcb56a<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">iptables -t nat -<span class="hljs-keyword">A</span> OUTPUT -d <span class="hljs-number">172.25.156.55</span> -j DNAT --to-destination <span class="hljs-number">120.79.141.184</span><br></code></pre></td></tr></table></figure><h2 id="高可用实验环境搭建"><a href="#高可用实验环境搭建" class="headerlink" title="高可用实验环境搭建"></a>高可用实验环境搭建</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">sudo</span> yum install -y yum-utils \<br>  device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> \</span><br>  lvm2<br></code></pre></td></tr></table></figure><p>设置国内仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo yum-config-manager \<br>    --add-repo \<br>    http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br></code></pre></td></tr></table></figure><p>安装最新版本的 Docker Engine-Community 和 containerd</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><p>配置 Docker 守护程序，尤其是使用 systemd 来管理容器的 cgroup。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir /etc/docker<br>cat &lt;&lt;EOF | sudo tee /etc/docker/daemon.json<br>&#123;<br>  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],<br>  &quot;log-driver&quot;: &quot;json-file&quot;,<br>  &quot;log-opts&quot;: &#123;<br>    &quot;max-size&quot;: &quot;100m&quot;<br>  &#125;,<br>  &quot;storage-driver&quot;: &quot;overlay2&quot;<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo systemctl <span class="hljs-keyword">start</span> docker &amp;&amp; systemctl <span class="hljs-keyword">enable</span> docker<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo systemctl <span class="hljs-keyword">start</span> kubelet &amp;&amp; systemctl <span class="hljs-keyword">enable</span> kubelet<br></code></pre></td></tr></table></figure><h3 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h3><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><p>节点之中不可以有重复的主机名、MAC 地址或 product_uuid</p><h4 id="允许-iptables-检查桥接流量"><a href="#允许-iptables-检查桥接流量" class="headerlink" title="允许 iptables 检查桥接流量"></a>允许 iptables 检查桥接流量</h4><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。</p><p>为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br>cat &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sudo sysctl --system<br></code></pre></td></tr></table></figure><h4 id="开启包转发"><a href="#开启包转发" class="headerlink" title="开启包转发"></a>开启包转发</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vi /etc/sysctl<span class="hljs-selector-class">.conf</span><br>添加：<br>net<span class="hljs-selector-class">.ipv4</span><span class="hljs-selector-class">.ip_forward</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="开放指定端口"><a href="#开放指定端口" class="headerlink" title="开放指定端口"></a>开放指定端口</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=6443/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=2379</span><span class="hljs-literal">-</span><span class="hljs-comment">2380/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=10250/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=10251/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=10252/tcp</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=8443/tcp</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart firewalld</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--list-ports</span><br></code></pre></td></tr></table></figure><h3 id="控制平面节点"><a href="#控制平面节点" class="headerlink" title="控制平面节点"></a>控制平面节点</h3><table><thead><tr><th>协议</th><th>方向</th><th>端口范围</th><th>作用</th><th>使用者</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>6443</td><td>Kubernetes API 服务器</td><td>所有组件</td></tr><tr><td>TCP</td><td>入站</td><td>2379-2380</td><td>etcd 服务器客户端 API</td><td>kube-apiserver, etcd</td></tr><tr><td>TCP</td><td>入站</td><td>10250</td><td>Kubelet API</td><td>kubelet 自身、控制平面组件</td></tr><tr><td>TCP</td><td>入站</td><td>10251</td><td>kube-scheduler</td><td>kube-scheduler 自身</td></tr><tr><td>TCP</td><td>入站</td><td>10252</td><td>kube-controller-manager</td><td>kube-controller-manager 自身</td></tr></tbody></table><h3 id="工作节点"><a href="#工作节点" class="headerlink" title="工作节点"></a>工作节点</h3><table><thead><tr><th>协议</th><th>方向</th><th>端口范围</th><th>作用</th><th>使用者</th></tr></thead><tbody><tr><td>TCP</td><td>入站</td><td>10250</td><td>Kubelet API</td><td>kubelet 自身、控制平面组件</td></tr><tr><td>TCP</td><td>入站</td><td>30000-32767</td><td>NodePort 服务†</td><td>所有组件</td></tr></tbody></table><h4 id="设置内核、K8S的yum源"><a href="#设置内核、K8S的yum源" class="headerlink" title="设置内核、K8S的yum源"></a>设置内核、K8S的yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">[kubernetes]</span><br><span class="hljs-string">name=Kubernetes</span><br><span class="hljs-string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">enabled=1</span><br><span class="hljs-string">gpgcheck=1</span><br><span class="hljs-string">repo_gpgcheck=1</span><br><span class="hljs-string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><br>sudo setenforce 0<br>sudo sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config<br><br>sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes<br><br>sudo systemctl <span class="hljs-built_in">enable</span> --now kubelet<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#关闭swap</span><br>swapoff -a <br>sed -i <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></figure><h4 id="查找指定版本"><a href="#查找指定版本" class="headerlink" title="查找指定版本"></a>查找指定版本</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">yum list kubelet  --showduplicates <span class="hljs-string">| sort -r</span><br></code></pre></td></tr></table></figure><h4 id="安装kubernetes1-18-20"><a href="#安装kubernetes1-18-20" class="headerlink" title="安装kubernetes1.18.20"></a>安装kubernetes1.18.20</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> yum install -y kubeadm-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">20</span>-<span class="hljs-number">0</span> kubectl-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">20</span>-<span class="hljs-number">0</span> kubelet-<span class="hljs-number">1</span>.<span class="hljs-number">18</span>.<span class="hljs-number">20</span>-<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h4><p>Master </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">! /etc/keepalived/keepalived.conf<br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>    router_id LVS_DEVEL<br>&#125;<br>vrrp_script check_apiserver &#123;<br>  script <span class="hljs-string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span><br>  interval 3<br>  weight -2<br>  fall 10<br>  rise 2<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    interface em1.101@em1<br>    virtual_router_id 51<br>    priority 100<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass keepalive<br>    &#125;<br>    virtual_ipaddress &#123;<br>        183.131.145.10<br>    &#125;<br>    track_script &#123;<br>        check_apiserver<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>backup</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">! /etc/keepalived/keepalived.conf<br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br>global_defs &#123;<br>    router_id LVS_DEVEL<br>&#125;<br>vrrp_script check_apiserver &#123;<br>  script <span class="hljs-string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span><br>  interval 3<br>  weight -2<br>  fall 10<br>  rise 2<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state BACKUP<br>    interface <span class="hljs-variable">$&#123;INTERFACE&#125;</span><br>    virtual_router_id 51<br>    priority 50<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass keepalive<br>    &#125;<br>    virtual_ipaddress &#123;<br>        183.131.145.10<br>    &#125;<br>    track_script &#123;<br>        check_apiserver<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>/etc/keepalived/check_apiserver.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#!/bin/sh</span><br><br><span class="hljs-function"><span class="hljs-title">errorExit</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*** $*&quot;</span> 1&gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br>curl --silent --max-time 2 --insecure https://localhost:8443/ -o /dev/null || errorExit <span class="hljs-string">&quot;Error GET https://localhost:8443/&quot;</span><br><span class="hljs-keyword">if</span> ip addr | grep -q 183.131.145.10; <span class="hljs-keyword">then</span><br>    curl --silent --max-time 2 --insecure https://183.131.145.10:8443/ -o /dev/null || errorExit <span class="hljs-string">&quot;Error GET https://183.131.145.10:8443/&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>haproxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># /etc/haproxy/haproxy.cfg</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Global settings</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>global<br>    <span class="hljs-built_in">log</span> /dev/<span class="hljs-built_in">log</span> local0<br>    <span class="hljs-built_in">log</span> /dev/<span class="hljs-built_in">log</span> local1 notice<br>    daemon<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span><br><span class="hljs-comment"># use if not designated in their block</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>defaults<br>    mode                    http<br>    <span class="hljs-built_in">log</span>                     global<br>    option                  httplog<br>    option                  dontlognull<br>    option http-server-close<br>    option forwardfor       except 127.0.0.0/8<br>    option                  redispatch<br>    retries                 1<br>    timeout http-request    10s<br>    timeout queue           20s<br>    timeout connect         5s<br>    timeout client          20s<br>    timeout server          20s<br>    timeout http-keep-alive 10s<br>    timeout check           10s<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># apiserver frontend which proxys to the control plane nodes</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>frontend apiserver<br>    <span class="hljs-built_in">bind</span> *:8443<br>    mode tcp<br>    option tcplog<br>    default_backend apiserver<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># round robin balancing for apiserver</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>backend apiserver<br>    option httpchk GET /healthz<br>    http-check expect status 200<br>    mode tcp<br>    option ssl-hello-chk<br>    balance     roundrobin<br>        server master01 183.131.145.85:6443 check<br>        server master02 183.131.145.84:6443 check<br>        server master03 61.153.100.147:6443 check<br>        <span class="hljs-comment"># [...]</span><br></code></pre></td></tr></table></figure><p>keepalive static pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">keepalived</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">osixia/keepalived:2.0.17</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">keepalived</span><br>    <span class="hljs-attr">resources:</span> &#123;&#125;<br>    <span class="hljs-attr">securityContext:</span><br>      <span class="hljs-attr">capabilities:</span><br>        <span class="hljs-attr">add:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_ADMIN</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_BROADCAST</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_RAW</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/etc/keepalived/keepalived.conf</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/keepalived/check_apiserver.sh</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">check</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/keepalived/keepalived.conf</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/keepalived/check_apiserver.sh</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">check</span><br><span class="hljs-attr">status:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>haproxy</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">haproxy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">haproxy:2.1.4</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">haproxy</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">8</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">8443</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/etc/haproxy/haproxy.cfg</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">haproxyconf</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/haproxy/haproxy.cfg</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">FileOrCreate</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">haproxyconf</span><br><span class="hljs-attr">status:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>/etc/kubernetes/manifests/kube-vip.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-vip</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/kube-vip</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">start</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/vip.yaml</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;plndr/kube-vip:0.3.1&#x27;</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kube-vip</span><br>    <span class="hljs-attr">resources:</span> &#123;&#125;<br>    <span class="hljs-attr">securityContext:</span><br>      <span class="hljs-attr">capabilities:</span><br>        <span class="hljs-attr">add:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">NET_ADMIN</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">SYS_TIME</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/vip.yaml</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>  <span class="hljs-attr">hostNetwork:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/etc/kube-vip/config.yaml</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br><span class="hljs-attr">status:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sudo docker run <span class="hljs-params">--network</span> host <span class="hljs-params">--rm</span> plndr/kube-vip<span class="hljs-function">:v0.3.7</span> manifest pod \<br><span class="hljs-params">--interface</span> em1.101 \<br><span class="hljs-params">--vip</span> 183.131.145.82 \<br><span class="hljs-params">--controlplane</span> \<br><span class="hljs-params">--services</span> \<br><span class="hljs-params">--arp</span> \<br><span class="hljs-params">--leaderElection</span> | sudo tee <span class="hljs-string">/etc/kubernetes/manifests/kube-vip.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo kubeadm init \<br>    --kubernetes-version=1.18.20 \<br>    --control-plane-endpoint=183.131.145.82 \<br>    --image-repository=registry.aliyuncs.com/google_containers \<br>    --pod-network-cidr=10.218.0.0/16 \<br>    --skip-phases=addon/kube-proxy \<br>    --upload-certs<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">sudo</span> <span class="hljs-comment">kubeadm</span> <span class="hljs-comment">init</span> --<span class="hljs-comment">config</span> <span class="hljs-comment">kubeadm</span><span class="hljs-literal">-</span><span class="hljs-comment">config</span><span class="hljs-string">.</span><span class="hljs-comment">yml</span> --<span class="hljs-comment">upload</span><span class="hljs-literal">-</span><span class="hljs-comment">certs</span> --<span class="hljs-comment">skip</span><span class="hljs-literal">-</span><span class="hljs-comment">phases=addon/kube</span><span class="hljs-literal">-</span><span class="hljs-comment">proxy</span><br></code></pre></td></tr></table></figure><p>SUCCESS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">Your Kubernetes control-plane has initialized successfully!<br><br>To start using your cluster, you need to run the following as a regular user:<br><br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>You should now deploy a pod network to the cluster.<br>Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:<br>  https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>You can now join any number of the control-plane node running the following command on each as root:<br><br>  kubeadm join 183.131.145.82:6443 --token hxduyw.e7pm2u32wcffr652 \<br>    --discovery-token-ca-cert-hash sha256:53aea6bf8eeefca7a672021c80e203da459f1655a43127ab557ed5a7d3275eec \<br>    --control-plane --certificate-key 273b46dcea4ecff30ebed45812b99ecb7d02cc493a88ea60bb547e95c14a4ff8<br><br>Please note that the certificate-key gives access to cluster sensitive data, keep it secret!<br>As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use<br>&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.<br><br>Then you can join any number of worker nodes by running the following on each as root:<br><br>kubeadm join 183.131.145.82:6443 --token hxduyw.e7pm2u32wcffr652 \<br>    --discovery-token-ca-cert-hash sha256:53aea6bf8eeefca7a672021c80e203da459f1655a43127ab557ed5a7d3275eec<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">This node has joined <span class="hljs-keyword">the</span> cluster <span class="hljs-keyword">and</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">new</span> control plane instance was created:<br><br>* Certificate signing request was sent <span class="hljs-built_in">to</span> apiserver <span class="hljs-keyword">and</span> approval was received.<br>* The Kubelet was informed <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">new</span> secure connection details.<br>* Control plane (master) label <span class="hljs-keyword">and</span> taint were applied <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">new</span> node.<br>* The Kubernetes control plane instances scaled up.<br>* A <span class="hljs-built_in">new</span> etcd member was added <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">local</span>/stacked etcd cluster.<br><br>To <span class="hljs-built_in">start</span> administering your cluster <span class="hljs-built_in">from</span> this node, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br><br>mkdir -p $HOME/.kube<br>sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>Run <span class="hljs-string">&#x27;kubectl get nodes&#x27;</span> <span class="hljs-built_in">to</span> see this node join <span class="hljs-keyword">the</span> cluster.<br></code></pre></td></tr></table></figure><p>刚才加入集群的 master 节点，不要忘记将 <code>kube-vip</code> 的静态 pod 进行创建，这样才能确保集群拥有了 <code>HA</code> 属性 。执行上面的 kube-vip 部署步骤</p><p>其他节点部署kube-vip static pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run --network host --rm plndr/kube-vip:v0.3.7 manifest pod \<br>--interface bond0.101 \<br>--vip 183.131.145.82 \<br>--controlplane \<br>--services \<br>--arp \<br>--leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml<br></code></pre></td></tr></table></figure><p>ERROR1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">664374</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">764481</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">864582</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">01</span>.<span class="hljs-number">964685</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span>.<span class="hljs-number">064796</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span>.<span class="hljs-number">164907</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br><span class="hljs-attribute">Oct</span> <span class="hljs-number">21</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span> master<span class="hljs-number">01</span>-<span class="hljs-number">183</span>-<span class="hljs-number">131</span>-<span class="hljs-number">145</span>-<span class="hljs-number">85</span> kubelet[<span class="hljs-number">23679</span>]: E<span class="hljs-number">1021</span> <span class="hljs-number">10</span>:<span class="hljs-number">44</span>:<span class="hljs-number">02</span>.<span class="hljs-number">265034</span>   <span class="hljs-number">23679</span> kubelet.go:<span class="hljs-number">2292</span>] node <span class="hljs-string">&quot;master01-183-131-145-85&quot;</span> not found<br></code></pre></td></tr></table></figure><p>ERROR2</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">server</span>: x509: certificate signed <span class="hljs-keyword">by</span> <span class="hljs-type">unknown</span> authority (possibly because <span class="hljs-keyword">of</span> &quot;crypto/rsa: verification error&quot; <span class="hljs-keyword">while</span> trying <span class="hljs-keyword">to</span> verify candidate authority certificate &quot;kubernetes&quot;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubeedge openyurt superedge</title>
    <link href="/2021/10/08/kubeedge-openyurt-superedge/"/>
    <url>/2021/10/08/kubeedge-openyurt-superedge/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center"></th><th align="center">Kubeedge</th><th align="center">Openyurt</th><th align="center">Superedge</th></tr></thead><tbody><tr><td align="center">CNCF项目</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">开源时间</td><td align="center">2018.11</td><td align="center">2020.5</td><td align="center">2020.12</td></tr><tr><td align="center">侵入式修改</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">和kubernetes无缝转换</td><td align="center">否（侵入式修改）</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">边缘自治能力</td><td align="center">有</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="center">边缘健康检查</td><td align="center">无</td><td align="center">无</td><td align="center">有边缘健康检查，存在东西向安全和流量消耗问题</td></tr><tr><td align="center">单元化管理边缘节点</td><td align="center">不支持</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">轻量化</td><td align="center">是（修改了kubelet）</td><td align="center">否</td><td align="center">否</td></tr><tr><td align="center">云原生生态兼容</td><td align="center">部分兼容</td><td align="center">完整兼容</td><td align="center">完整兼容</td></tr><tr><td align="center">设备管理能力</td><td align="center">有</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">架构风险点</td><td align="center">1.边缘节点无法运行Operator<br />2.边缘节点不适合运行需要list/watch云端的应用<br />3.无法跟随社区k8s演进</td><td align="center">大规模节点且云边长时间断网恢复场景会产生大量的全量List请求，从而对kube-apiserver造成比较大的压力</td><td align="center">大规模节点且云边长时间断网恢复场景会产生大量的全量List请求，从而对kube-apiserver造成比较大的压力</td></tr></tbody></table><h2 id="Kubeedge"><a href="#Kubeedge" class="headerlink" title="Kubeedge"></a>Kubeedge</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/kubeedge_arch.png"></p><h3 id="与Kubernetes的架构差异"><a href="#与Kubernetes的架构差异" class="headerlink" title="与Kubernetes的架构差异"></a>与Kubernetes的架构差异</h3><ul><li><p>使用EdgeCore替代原生kubelet，kubeproxy</p></li><li><p>Cloud Hub+EdgeHub模块：抛弃了原生kubernetes 的组件间数据同步list/watch机制，改成基于websocket/quic协议从云端往边缘推送模式</p></li><li><p>节点元数据缓存模块(MetaManager): 把节点维度的数据持久化在本机的SQLite数据库中，当云边网络不稳定时Edged模块将从本地数据库中获取数据用于业务的生命周期管控</p></li><li><p>DeviceController+设备管理模块(DeviceTwin): 把设备管理能力直接集成到EdgeCore中，为用户提供原生的设备管理能力</p></li></ul><h2 id="Openyurt"><a href="#Openyurt" class="headerlink" title="Openyurt"></a>Openyurt</h2><h3 id="架构-1"><a href="#架构-1" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/openyurtarch.png" alt="openyurt_arch"></p><h2 id="Superedge"><a href="#Superedge" class="headerlink" title="Superedge"></a>Superedge</h2><h3 id="架构-2"><a href="#架构-2" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/superedge_arch.png" alt="superedge_arch"></p><p>Ref</p><ul><li><a href="https://mp.weixin.qq.com/s/wl-7ZRUu3l97wpbRAKjQpw">https://mp.weixin.qq.com/s/wl-7ZRUu3l97wpbRAKjQpw</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes集群安装Flink</title>
    <link href="/2019/11/30/kubernetes%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85Flink/"/>
    <url>/2019/11/30/kubernetes%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85Flink/</url>
    
    <content type="html"><![CDATA[<h2 id="1、创建flink-configmap"><a href="#1、创建flink-configmap" class="headerlink" title="1、创建flink configmap"></a>1、创建flink configmap</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">create</span> -f flink-<span class="hljs-keyword">configuration</span>-configmap.yaml<br></code></pre></td></tr></table></figure><blockquote><p>flink-configuration-configmap.yaml</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: flink-config<br>  labels:<br>    app: flink<br>data:<br>  flink-conf.yaml: |+<br>    jobmanager.rpc.address: flink-jobmanager<br>    taskmanager.numberOfTaskSlots: 1<br>    blob.server.port: 6124<br>    jobmanager.rpc.port: 6123<br>    taskmanager.rpc.port: 6122<br>    jobmanager.heap.size: 1024m<br>    taskmanager.heap.size: 1024m<br>  log4j.properties: |+<br>    log4j.<span class="hljs-attribute">rootLogger</span>=INFO, file<br>    log4j.logger.<span class="hljs-attribute">akka</span>=INFO<br>    log4j.logger.org.apache.<span class="hljs-attribute">kafka</span>=INFO<br>    log4j.logger.org.apache.<span class="hljs-attribute">hadoop</span>=INFO<br>    log4j.logger.org.apache.<span class="hljs-attribute">zookeeper</span>=INFO<br>    log4j.appender.<span class="hljs-attribute">file</span>=org.apache.log4j.FileAppender<br>    log4j.appender.file.<span class="hljs-attribute">file</span>=<span class="hljs-variable">$&#123;log.file&#125;</span><br>    log4j.appender.file.<span class="hljs-attribute">layout</span>=org.apache.log4j.PatternLayout<br>    log4j.appender.file.layout.<span class="hljs-attribute">ConversionPattern</span>=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %-5p %-60c %x - %m%n<br>    log4j.logger.org.apache.flink.shaded.akka.org.jboss.netty.channel.<span class="hljs-attribute">DefaultChannelPipeline</span>=ERROR, file<br></code></pre></td></tr></table></figure><h2 id="2、创建jobmanager-service"><a href="#2、创建jobmanager-service" class="headerlink" title="2、创建jobmanager service"></a>2、创建jobmanager service</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl <span class="hljs-keyword">create</span> -f jobmanager-service.yaml<br></code></pre></td></tr></table></figure><blockquote><p>jobmanager-service.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flink-jobmanager</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rpc</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6123</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">blob</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6124</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ui</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">flink</span><br>    <span class="hljs-attr">component:</span> <span class="hljs-string">jobmanager</span><br></code></pre></td></tr></table></figure><p>使用NodePort向集群外提供服务：</p><blockquote><p>jobmanager-rest-service.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flink-jobmanager-rest</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">rest</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8081</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">flink</span><br>    <span class="hljs-attr">component:</span> <span class="hljs-string">jobmanager</span><br></code></pre></td></tr></table></figure><h2 id="3、创建jobmanager-deployment"><a href="#3、创建jobmanager-deployment" class="headerlink" title="3、创建jobmanager deployment"></a>3、创建jobmanager deployment</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl <span class="hljs-keyword">create</span> -f jobmanager-deployment.yaml<br></code></pre></td></tr></table></figure><blockquote><p>jobmanager-deployment.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flink-jobmanager</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">flink</span><br>        <span class="hljs-attr">component:</span> <span class="hljs-string">jobmanager</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">jobmanager</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">flink:latest</span><br>        <span class="hljs-attr">workingDir:</span> <span class="hljs-string">/opt/flink</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;$FLINK_HOME/bin/jobmanager.sh start;\</span><br><span class="hljs-string">          while :;</span><br><span class="hljs-string">          do</span><br><span class="hljs-string">            if [[ -f $(find log -name &#x27;*jobmanager*.log&#x27; -print -quit) ]];</span><br><span class="hljs-string">              then tail -f -n +1 log/*jobmanager*.log;</span><br><span class="hljs-string">            fi;</span><br><span class="hljs-string">          done&quot;</span>]<br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6123</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">rpc</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6124</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">blob</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8081</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">ui</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">tcpSocket:</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">6123</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flink-config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/flink/conf</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flink-config-volume</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">flink-config</span><br>          <span class="hljs-attr">items:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">flink-conf.yaml</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">flink-conf.yaml</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">log4j.properties</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">log4j.properties</span><br></code></pre></td></tr></table></figure><h2 id="4、创建taskmanager-deployment"><a href="#4、创建taskmanager-deployment" class="headerlink" title="4、创建taskmanager deployment"></a>4、创建taskmanager deployment</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl <span class="hljs-keyword">create</span> -f taskmanager-deployment.yaml<br></code></pre></td></tr></table></figure><blockquote><p>taskmanager-deployment.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">flink-taskmanager</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">flink</span><br>        <span class="hljs-attr">component:</span> <span class="hljs-string">taskmanager</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">taskmanager</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">flink:latest</span><br>        <span class="hljs-attr">workingDir:</span> <span class="hljs-string">/opt/flink</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;$FLINK_HOME/bin/taskmanager.sh start; \</span><br><span class="hljs-string">          while :;</span><br><span class="hljs-string">          do</span><br><span class="hljs-string">            if [[ -f $(find log -name &#x27;*taskmanager*.log&#x27; -print -quit) ]];</span><br><span class="hljs-string">              then tail -f -n +1 log/*taskmanager*.log;</span><br><span class="hljs-string">            fi;</span><br><span class="hljs-string">          done&quot;</span>]<br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6122</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">rpc</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">tcpSocket:</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">6122</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">30</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">60</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flink-config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/opt/flink/conf/</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">flink-config-volume</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">flink-config</span><br>          <span class="hljs-attr">items:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">flink-conf.yaml</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">flink-conf.yaml</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">log4j.properties</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">log4j.properties</span><br></code></pre></td></tr></table></figure><h2 id="5、访问Flink-Portal管理界面"><a href="#5、访问Flink-Portal管理界面" class="headerlink" title="5、访问Flink Portal管理界面"></a>5、访问Flink Portal管理界面</h2><h4 id="5-1-kubectl-proxy"><a href="#5-1-kubectl-proxy" class="headerlink" title="5.1 kubectl proxy"></a>5.1 kubectl proxy</h4><p>直接使用<code>kubectl proxy </code>，</p><p>然后，通过 <a href="http://localhost:8001/api/v1/namespaces/default/services/flink-jobmanager:ui/proxy">http://localhost:8001/api/v1/namespaces/default/services/flink-jobmanager:ui/proxy</a> 访问</p><h4 id="5-2-kubectl-port-forward"><a href="#5-2-kubectl-port-forward" class="headerlink" title="5.2 kubectl port-forward"></a>5.2 kubectl port-forward</h4><p>通过kubectl转发</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> port-forward <span class="hljs-variable">$&#123;flink-jobmanager-pod&#125;</span> <span class="hljs-number">8081</span>:<span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure><p>然后，通过 <a href="http://localhost:8081/">http://localhost:8081</a> 访问</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/kubernetes.html#session-cluster-resource-definitions">https://ci.apache.org/projects/flink/flink-docs-stable/ops/deployment/kubernetes.html#session-cluster-resource-definitions</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go深入解析goroutine</title>
    <link href="/2019/11/28/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90goroutine/"/>
    <url>/2019/11/28/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90goroutine/</url>
    
    <content type="html"><![CDATA[<p>Goroutine Scheduler</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>调度器是go语言运行时最核心的内容，其基本理论建立在三种基本对象（系统线程对象M，抽象处理器对象P，goroutine对象G）</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081426433.jpeg" alt="our-cast"></p><h2 id="M、P、G关系"><a href="#M、P、G关系" class="headerlink" title="M、P、G关系"></a>M、P、G关系</h2><p>GO运行时存在两种类型队列（queue）：</p><ul><li>全局queue</li><li>每个P维护自己的G的queue</li></ul><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081426321.png" alt="go-sched"></p><h2 id="基本对象数据结构"><a href="#基本对象数据结构" class="headerlink" title="基本对象数据结构"></a>基本对象数据结构</h2><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><ol><li>调用<code>go func()&#123;...&#125;()</code>起一个协程，都会创建一个goroutine对象，代表G并发任务</li><li>所有的G任务都有系统线程M来执行</li><li>每个G对象都有自己的独立栈内存，当M执行任务时，从G用来保存执行现场的字段中恢复相关寄存值。</li></ol><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081426116.jpeg" alt="in-motion"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://morsmachine.dk/go-scheduler">http://morsmachine.dk/go-scheduler</a></li><li><a href="http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf">http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf</a></li><li><a href="https://speakerdeck.com/retervision/go-runtime-scheduler">https://speakerdeck.com/retervision/go-runtime-scheduler</a></li><li><a href="https://colobu.com/2017/05/04/go-scheduler">https://colobu.com/2017/05/04/go-scheduler</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go深入解析channel</title>
    <link href="/2019/11/18/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90channel/"/>
    <url>/2019/11/18/go%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90channel/</url>
    
    <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>往未初始化的Channel写数据，会发生什么？</p><p>nil channel会永远阻塞对该channel的读写操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> cc <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br>  cc &lt;- <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行后，报错：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">fatal</span> <span class="hljs-selector-tag">error</span>: <span class="hljs-keyword">all</span> <span class="hljs-selector-tag">goroutines</span> <span class="hljs-selector-tag">are</span> <span class="hljs-selector-tag">asleep</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">deadlock</span>!<br><span class="hljs-selector-tag">goroutine</span> <span class="hljs-selector-tag">1</span> <span class="hljs-selector-attr">[chan send (nil chan)]</span>:<br><span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.main</span>()<br></code></pre></td></tr></table></figure><p>上面的意思是，在main goroutine线，期望从管道中获得一个数据，而这个数据必须是其他goroutine线放入管道的，但是其他goroutine线都已经执行完了(all goroutines are asleep)，那么就永远不会有数据放入管道。所以，main goroutine线在等一个永远不会来的数据，那整个程序就永远等下去了。这显然是没有结果的，所以这个程序就说“算了吧，不坚持了，我自己自杀掉，报一个错给代码作者，我被deadlock了”</p></li><li><p>channel实现等待一段时间超时后，再退出？</p><blockquote><p>time.After定义</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-keyword">After</span> waits <span class="hljs-keyword">for</span> the duration <span class="hljs-keyword">to</span> elapse <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> sends the <span class="hljs-keyword">current</span> <span class="hljs-type">time</span><br>// <span class="hljs-keyword">on</span> the returned channel.<br>// It <span class="hljs-keyword">is</span> equivalent <span class="hljs-keyword">to</span> NewTimer(d).C.<br>// The underlying Timer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> recovered <span class="hljs-keyword">by</span> the garbage collector<br>// <span class="hljs-keyword">until</span> the timer fires. <span class="hljs-keyword">If</span> efficiency <span class="hljs-keyword">is</span> a concern, use NewTimer<br>// <span class="hljs-keyword">instead</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">call</span> Timer.Stop <span class="hljs-keyword">if</span> the timer <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> longer needed.<br>func <span class="hljs-keyword">After</span>(d Duration) &lt;-chan <span class="hljs-type">Time</span> &#123;<br><span class="hljs-keyword">return</span> NewTimer(d).C<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>select + time.After实现</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br>c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br>fmt.Println(time.Now().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>))<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(time.Duration(<span class="hljs-number">2</span> * time.Second))<br>fmt.Println(time.Now().Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>))<br>c1 &lt;- <span class="hljs-number">2</span><br>&#125;()<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> n := &lt;-c1:<br>fmt.Println(<span class="hljs-string">&quot;receive from c1: &quot;</span>, n)<br><span class="hljs-keyword">case</span> n := &lt;-c2:<br>fmt.Println(<span class="hljs-string">&quot;receive from c2: &quot;</span>, n)<br><span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">8</span> * time.Second):<br>fmt.Println(<span class="hljs-string">&quot;timeout,no receive&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>select + for实现</p></blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sqf">func main() &#123;<br><span class="hljs-built_in">stop</span> := make(chan bool)<br>go func() &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-built_in">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-<span class="hljs-built_in">stop</span>:<br><span class="hljs-comment">// 收到stop channel，结束goroutine</span><br>return<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// 不做处理，等待stop channel</span><br><span class="hljs-built_in">time</span>.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">2</span> * <span class="hljs-built_in">time</span>.Second)<br>&#125;<br>&#125;<br>&#125;()<br><span class="hljs-built_in">time</span>.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">10</span> * <span class="hljs-built_in">time</span>.Second)<br><span class="hljs-comment">// 停止goroutine</span><br><span class="hljs-built_in">stop</span> &lt;- <span class="hljs-literal">true</span><br><span class="hljs-built_in">time</span>.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">5</span> * <span class="hljs-built_in">time</span>.Second)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h2><p>channel主要用于多个goroutine通讯，其内部实现了同步，确保并发安全，默认为同步模式。</p><p>同步方式需要发送和接受配对。否则会被阻塞，直到另一方准备好后被唤醒。</p><p>异步方式通过判断缓冲区来决定是否阻塞，如果缓冲区已满，则发送被阻塞；缓冲区为空，则接收被阻塞</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081423187.png" alt="hchan"></p><p>channel都是以hchan结构体形式存在，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> hchan <span class="hljs-keyword">struct</span> &#123;<br>    qcount   <span class="hljs-keyword">uint</span><br>    dataqsiz <span class="hljs-keyword">uint</span><br>    buf      unsafe.Pointer<br>    elemsize <span class="hljs-keyword">uint16</span><br>    closed   <span class="hljs-keyword">uint32</span><br>    elemtype *_type<br>    sendx    <span class="hljs-keyword">uint</span>  <br>    recvx    <span class="hljs-keyword">uint</span><br>    recvq    waitq<br>    sendq    waitq<br><br>    lock mutex<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://i6448038.github.io/2019/04/11/go-channel/">https://i6448038.github.io/2019/04/11/go-channel/</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go并发控制</title>
    <link href="/2019/10/30/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    <url>/2019/10/30/go%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>go实现对并发控制的几种方式</p><ul><li>WaitGroup</li><li>Channel + Select</li><li>Context</li></ul><h2 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">func</span> <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">wg</span> <span class="hljs-selector-tag">sync</span><span class="hljs-selector-class">.WaitGroup</span><br><span class="hljs-selector-tag">wg</span><span class="hljs-selector-class">.Add</span>(<span class="hljs-number">2</span>)<br><span class="hljs-selector-tag">go</span> <span class="hljs-selector-tag">func</span>() &#123;<br><span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Sleep</span>(<span class="hljs-number">3</span> * time.Second)<br><span class="hljs-selector-tag">fmt</span><span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&lt;groutine 1&gt; done&quot;</span>)<br><span class="hljs-selector-tag">wg</span><span class="hljs-selector-class">.Done</span>()<br>&#125;()<br><span class="hljs-selector-tag">go</span> <span class="hljs-selector-tag">func</span>() &#123;<br><span class="hljs-selector-tag">fmt</span><span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;&lt;groutine 2&gt; done&quot;</span>)<br><span class="hljs-selector-tag">wg</span><span class="hljs-selector-class">.Done</span>()<br>&#125;()<br><span class="hljs-selector-tag">wg</span><span class="hljs-selector-class">.Wait</span>()<br><span class="hljs-selector-tag">fmt</span><span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;--- All groutine finnish ---&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groutine</span> <span class="hljs-attr">2</span>&gt;</span> done<br><span class="hljs-tag">&lt;<span class="hljs-name">groutine</span> <span class="hljs-attr">1</span>&gt;</span> done<br>--- All groutine finnish ---<br></code></pre></td></tr></table></figure><h2 id="Channel-Select"><a href="#Channel-Select" class="headerlink" title="Channel + Select"></a>Channel + Select</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sqf">func main() &#123;<br><span class="hljs-built_in">stop</span> := make(chan bool)<br>go func() &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-built_in">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-<span class="hljs-built_in">stop</span>:<br><span class="hljs-comment">// 收到stop channel，结束goroutine</span><br>return<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// 不做处理，等待stop channel</span><br><span class="hljs-built_in">time</span>.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">2</span> * <span class="hljs-built_in">time</span>.Second)<br>&#125;<br>&#125;<br>&#125;()<br><span class="hljs-built_in">time</span>.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">10</span> * <span class="hljs-built_in">time</span>.Second)<br><span class="hljs-comment">// 停止goroutine</span><br><span class="hljs-built_in">stop</span> &lt;- <span class="hljs-literal">true</span><br><span class="hljs-built_in">time</span>.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">5</span> * <span class="hljs-built_in">time</span>.Second)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Go 语言中的每一个请求的都是通过一个单独的 Goroutine 进行处理的，HTTP/RPC 请求的处理器往往都会启动新的 Goroutine 访问数据库和 RPC 服务，我们可能会创建多个 Goroutine 来处理一次请求，而 <code>Context</code> 的主要作用就是在不同的 Goroutine 之间同步请求特定的数据、取消信号以及处理请求的截止日期</p><p>Context的调用是链式的，通过<code>WithCancel</code>，<code>WithDeadline</code>，<code>WithTimeout</code>或<code>WithValue</code>派生出新的 Context。当父Context被取消时，其派生的所有Context都将取消</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动了3个goroutine进行不断的循环等待，每一个都使用了Context进行跟踪，当使用<code>cancel</code>函数通知取消时，所有基于这个Context或者衍生的子Context都会收到通知，当Context取消时，得到一个关闭channel（<code>ctx.Done</code>），从关闭的<code>ctx.Done</code>可以读取值，退出select，最终释放goroutine。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">func <span class="hljs-selector-tag">main</span>() &#123;<br>ctx, cancel := context.<span class="hljs-built_in">WithCancel</span>(context.<span class="hljs-built_in">Background</span>())<br>go <span class="hljs-built_in">watch</span>(ctx, <span class="hljs-string">&quot;【监控1】&quot;</span>)<br>go <span class="hljs-built_in">watch</span>(ctx, <span class="hljs-string">&quot;【监控2】&quot;</span>)<br>go <span class="hljs-built_in">watch</span>(ctx, <span class="hljs-string">&quot;【监控3】&quot;</span>)<br><br>time.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">10</span> * time.Second)<br>fmt.<span class="hljs-built_in">Println</span>(<span class="hljs-string">&quot;可以了，通知监控停止&quot;</span>)<br><span class="hljs-built_in">cancel</span>()<br>//为了检测监控过是否停止，如果没有监控输出，就表示停止了<br>time.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">5</span> * time.Second)<br>fmt.<span class="hljs-built_in">Println</span>(<span class="hljs-string">&quot;main退出&quot;</span>)<br><br>&#125;<br><br>func watch(ctx context<span class="hljs-selector-class">.Context</span>, name string) &#123;<br>for &#123;<br>select &#123;<br>case d, _ := &lt;-ctx.<span class="hljs-built_in">Done</span>():<br>fmt.<span class="hljs-built_in">Printf</span>(<span class="hljs-string">&quot;%s ctx.Done:&lt;%v&gt; ctx.Err:&lt;%v&gt; 监控退出，停止了...\n&quot;</span>, name, d, ctx.<span class="hljs-built_in">Err</span>())<br>return<br>default:<br>fmt.<span class="hljs-built_in">Println</span>(name, <span class="hljs-string">&quot;goroutine监控中...&quot;</span>)<br>time.<span class="hljs-built_in">Sleep</span>(<span class="hljs-number">2</span> * time.Second)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bnf">【监控3】 goroutine监控中...<br>【监控1】 goroutine监控中...<br>【监控2】 goroutine监控中...<br>可以了，通知监控停止<br>【监控3】 ctx.Done:<span class="hljs-attribute">&lt;&#123;&#125;&gt;</span> ctx.Err:<span class="hljs-attribute">&lt;context canceled&gt;</span> 监控退出，停止了...<br>【监控1】 ctx.Done:<span class="hljs-attribute">&lt;&#123;&#125;&gt;</span> ctx.Err:<span class="hljs-attribute">&lt;context canceled&gt;</span> 监控退出，停止了...<br>【监控2】 ctx.Done:<span class="hljs-attribute">&lt;&#123;&#125;&gt;</span> ctx.Err:<span class="hljs-attribute">&lt;context canceled&gt;</span> 监控退出，停止了...<br>main退出<br></code></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="核心Context接口"><a href="#核心Context接口" class="headerlink" title="核心Context接口"></a>核心Context接口</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">type</span> Context interface &#123;<br>    <span class="hljs-constructor">Deadline()</span> (deadline time.Time, ok <span class="hljs-built_in">bool</span>)<br>    <span class="hljs-constructor">Done()</span> &lt;-chan <span class="hljs-keyword">struct</span>&#123;&#125;<br>    <span class="hljs-constructor">Err()</span> error<br>    <span class="hljs-constructor">Value(<span class="hljs-params">key</span> <span class="hljs-params">interface</span>&#123;&#125;)</span> interface&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Deadline：返回当前 <code>Context</code> 被取消的时间，也就是完成工作的截止日期</li><li>Done：返回一个 Channel，这个 Channel 会在当前工作完成或者上下文被取消之后关闭，多次调用 <code>Done</code> 方法会返回同一个 Channel</li><li>Err：返回当前 <code>Context</code> 结束的原因，它只会在 <code>Done</code> 返回的 Channel 被关闭时才会返回非空的值<ul><li>如果当前 <code>Context</code> 被取消就会返回 <code>Canceled</code> 错误；</li><li>如果当前 <code>Context</code> 超时就会返回 <code>DeadlineExceeded</code> 错误</li></ul></li><li>Value：从 <code>Context</code> 中返回键对应的值，对于同一个上下文来说，多次调用 <code>Value</code> 并传入相同的 <code>Key</code> 会返回相同的结果，这个功能可以用来传递请求特定的数据</li></ul><h4 id="根Context"><a href="#根Context" class="headerlink" title="根Context"></a>根Context</h4><p>golang默认的context包已经有emptyCtx实现了Contex接口，具体为<code>Background</code> 和 <code>TODO</code>两个context。其中，<code>context.Background()</code> 是context上下文中最顶层的默认值，所有其他的上下文都应该从 <code>context.Background()</code> 演化出来。（TODO实际基本很少用，只有当不知道该使用什么Context的时候，可以使用这个）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>background = <span class="hljs-built_in">new</span>(emptyCtx)<br>todo       = <span class="hljs-built_in">new</span>(emptyCtx)<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Background</span><span class="hljs-params">()</span> <span class="hljs-title">Context</span></span> &#123;<br><span class="hljs-keyword">return</span> background<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TODO</span><span class="hljs-params">()</span> <span class="hljs-title">Context</span></span> &#123;<br><span class="hljs-keyword">return</span> todo<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> emptyCtx <span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Deadline</span><span class="hljs-params">()</span> <span class="hljs-params">(deadline time.Time, ok <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Done</span><span class="hljs-params">()</span> &lt;-<span class="hljs-title">chan</span> <span class="hljs-title">struct</span></span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Err</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span> <span class="hljs-title">Value</span><span class="hljs-params">(key <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">interface</span></span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Context的继承衍生"><a href="#Context的继承衍生" class="headerlink" title="Context的继承衍生"></a>Context的继承衍生</h4><p>通过以下With函数，可创建一颗Context树，树的每个节点都可以有任意多个子节点，节点层级可以有任意多个。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">WithCancel(<span class="hljs-params">parent</span> Context)</span> (ctx Context, cancel CancelFunc)<br><br>func <span class="hljs-constructor">WithDeadline(<span class="hljs-params">parent</span> Context, <span class="hljs-params">deadline</span> <span class="hljs-params">time</span>.Time)</span> (Context, CancelFunc)<br><br>func <span class="hljs-constructor">WithTimeout(<span class="hljs-params">parent</span> Context, <span class="hljs-params">timeout</span> <span class="hljs-params">time</span>.Duration)</span> (Context, CancelFunc)<br><br>func <span class="hljs-constructor">WithValue(<span class="hljs-params">parent</span> Context, <span class="hljs-params">key</span>, <span class="hljs-params">val</span> <span class="hljs-params">interface</span>&#123;&#125;)</span> Context<br></code></pre></td></tr></table></figure><ul><li><p>WithCancel：传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。</p></li><li><p>WithDeadline：和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。</p></li><li><p>WithTimeout：和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。</p></li><li><p>WithValue：此函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到，这是我们实际用经常要用到的技巧，一般我们想要通过上下文来传递数据时，可以通过这个方法，如我们需要tarce追踪系统调用栈的时候</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://golang.org/pkg/context/">https://golang.org/pkg/context/</a></li><li><a href="https://blog.golang.org/context">https://blog.golang.org/context</a></li><li><a href="https://www.sohamkamani.com/blog/golang/2018-06-17-golang-using-context-cancellation/">https://www.sohamkamani.com/blog/golang/2018-06-17-golang-using-context-cancellation/</a></li><li><a href="https://www.flysnow.org/2017/05/12/go-in-action-go-context.html">https://www.flysnow.org/2017/05/12/go-in-action-go-context.html</a></li><li><a href="https://draveness.me/golang/concurrency/golang-context.html">https://draveness.me/golang/concurrency/golang-context.html</a></li><li><a href="https://juejin.im/post/5a6873fef265da3e317e55b6">https://juejin.im/post/5a6873fef265da3e317e55b6</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Istio安装与实践</title>
    <link href="/2019/09/08/Istio%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <url>/2019/09/08/Istio%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>Ubuntu 16.04</li><li>安装kubernetes集群（kubeadm/minikube），本次使用的是kubeadm搭建的1.15版本k8s集群</li><li><a href="https://istio.io/zh/docs/setup/#downloading-the-release">下载 Istio 发行版本</a>，本次安装的是Istio 1.4.0。</li><li>执行任何必要的 <a href="https://istio.io/zh/docs/setup/platform-setup/">特定于平台的设置</a>。</li><li>检查 <a href="https://istio.io/zh/docs/setup/additional-setup/requirements/">Pods 和 Services 的要求</a>。</li></ul><span id="more"></span><h2 id="安装Istio"><a href="#安装Istio" class="headerlink" title="安装Istio"></a>安装Istio</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/istio/i</span>stio<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.4.0/i</span>stio-<span class="hljs-number">1.4</span>.<span class="hljs-number">0</span>-linux.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxf istio-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-linux.tar.gz<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@dggphicprc11349 ]<span class="hljs-comment"># cd istio-1.4.0/</span><br>[root@dggphicprc11349 istio-1.4.0]<span class="hljs-comment"># ll</span><br>total 40<br>drwxr-x--- <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>11<span class="hljs-number"> 14 </span>07:13 bin<br>drwxr-xr-x <span class="hljs-number"> 6 </span>root root <span class="hljs-number"> 4096 </span>11<span class="hljs-number"> 14 </span>07:13 install<br>-rw-r--r-- <span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 11348 </span>11<span class="hljs-number"> 14 </span>07:13 LICENSE<br>-rw-r----- <span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 675 </span>11<span class="hljs-number"> 14 </span>07:13 manifest.yaml<br>-rw-r--r-- <span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 6080 </span>11<span class="hljs-number"> 14 </span>07:13 README.md<br>drwxr-xr-x<span class="hljs-number"> 19 </span>root root <span class="hljs-number"> 4096 </span>11<span class="hljs-number"> 14 </span>07:13 samples<br>drwxr-x--- <span class="hljs-number"> 3 </span>root root <span class="hljs-number"> 4096 </span>11<span class="hljs-number"> 14 </span>07:13 tools<br></code></pre></td></tr></table></figure><p>安装istio方式：</p><ul><li><p>使用Istioctl安装（推荐）</p></li><li><p>使用<code>install/kubernetes/</code>文件夹中的<code>istio-demo.yaml</code>进行安装</p></li><li><p><del>使用Helm和Tiller进行安装</del>（Helm 的安装方法已被弃用。 请改用 <a href="https://istio.io/zh/docs/setup/install/istioctl/">使用 istioctl 安装</a>）</p></li><li><p><del>使用Helm template渲染出Istio的YAML安装文件进行安装</del></p></li></ul><p>Istio 1.1起默认的安装配置禁用了部分功能，如果使用Helm安装的话，建议对<code>install/kubernetes/helm/istio/values.yaml</code>中部分参数做修改，启用相关配置</p><table><thead><tr><th>参数</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>grafana.enabled</td><td>true</td><td>安装Grafana插件</td></tr><tr><td>tracing.enabled</td><td>true</td><td>安装Jaeger插件</td></tr><tr><td>kiali.enabled</td><td>true</td><td>安装Kiali插件</td></tr><tr><td>global.disablePolicyChecks</td><td>false</td><td>启用策略检查</td></tr><tr><td>global.proxy.accessLogFile</td><td>“/dev/stdout”</td><td>获取Envoy的访问日志</td></tr></tbody></table><p>使用Istioctl安装方式安装步骤：</p><ol><li><p>将istioctl放到系统PATH目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv bin<span class="hljs-regexp">/istioctl /u</span>sr<span class="hljs-regexp">/local/</span>bin<br></code></pre></td></tr></table></figure></li><li><p>使用Istio demo配置文件安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">istioctl manifest apply --<span class="hljs-builtin-name">set</span> <span class="hljs-attribute">profile</span>=demo<br></code></pre></td></tr></table></figure></li></ol><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>以天气应用为例</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudnativebooks/</span>cloud-native-istio.git<br></code></pre></td></tr></table></figure><ol><li><p>创建weather这个namespace并且给此namespace打上<code>istio-injection=enabled</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">kubectl <span class="hljs-keyword">create</span> ns weather<br>kubectl label <span class="hljs-keyword">namespace</span> weather istio-injection=enabled<br></code></pre></td></tr></table></figure><blockquote><p> 当 Kubernetes 调用 webhook 时，<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#mutatingwebhookconfiguration-v1beta1-admissionregistration-k8s-io"><code>admissionregistration</code></a> 配置被应用。默认配置将 sidecar 注入到所有拥有 <code>istio-injection=enabled</code> 标签的 namespace 下的 pod 中。 <code>istio-sidecar-injector</code> 配置字典指定了注入 sidecar 的配置。如需更改指定哪些 namespace 被注入，你可以使用以下命令编辑 <code>MutatingWebhookConfiguration</code>：</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-builtin-name">edit</span> mutatingwebhookconfiguration istio-sidecar-injector<br></code></pre></td></tr></table></figure><p> 修改 <code>MutatingWebhookConfiguration</code> 之后，您应该重启 sidecar 注入器的 pod</p></blockquote></li><li><p>创建应用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> apply -f install/weather-v<span class="hljs-number">1</span>.yaml -n weather<br></code></pre></td></tr></table></figure></li><li><p>确认所有服务和pod均已创建并启动成功</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@dggphicprc11349 cloud-native-istio]# kubectl <span class="hljs-keyword">get</span> service -n weather<br><span class="hljs-type">NAME</span>            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP      <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)    AGE<br>advertisement   ClusterIP   <span class="hljs-number">10.99</span><span class="hljs-number">.241</span><span class="hljs-number">.73</span>    &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">3003</span>/TCP   <span class="hljs-number">2</span>m12s<br>forecast        ClusterIP   <span class="hljs-number">10.100</span><span class="hljs-number">.154</span><span class="hljs-number">.32</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">3002</span>/TCP   <span class="hljs-number">2</span>m12s<br>frontend        ClusterIP   <span class="hljs-number">10.109</span><span class="hljs-number">.157</span><span class="hljs-number">.96</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">3000</span>/TCP   <span class="hljs-number">2</span>m12s<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@dggphicprc11349</span> cloud<span class="hljs-operator">-</span>native<span class="hljs-operator">-</span>istio]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>n weather<br>NAME                                READY   STATUS    RESTARTS   AGE<br>advertisement<span class="hljs-operator">-</span>v1<span class="hljs-number">-6</span>d69d9cff8<span class="hljs-operator">-</span>fgfnt   <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m59s<br>forecast<span class="hljs-operator">-</span>v1<span class="hljs-operator">-</span>ff98f99f7<span class="hljs-number">-5</span>rk5c         <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m59s<br>frontend<span class="hljs-operator">-</span>v1<span class="hljs-number">-68</span>d57cf9d8<span class="hljs-operator">-</span>kmlnp        <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m59s<br></code></pre></td></tr></table></figure></li><li><p>配置Gateway和frontend服务的VirtualService，使应用可以被外部请求访问</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">kubectl apply -f <span class="hljs-keyword">install</span>/weather-gateway.yaml<br></code></pre></td></tr></table></figure></li><li><p>通过浏览器访问外部地址</p><p><code>http://xx.xx.xx.xx</code></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>Istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kube-apiserver Aggregation Layer</title>
    <link href="/2019/06/08/kube-apiserver-Aggregation-Layer/"/>
    <url>/2019/06/08/kube-apiserver-Aggregation-Layer/</url>
    
    <content type="html"><![CDATA[<p>配置Aggregation Layer允许通过新增一个扩展apiserver服务来扩展非核心api。</p><p>与CRD扩展api的方式不同， Aggregation API需要另一个扩展的apiserver（aggregated apiserver）。扩展apiserver（aggregated apiserver）与kube-apiserver（aggregator）之间需要互相通信。为了保证通信安全，kube-apiserver（aggregator）使用x509证书认证去访问扩展apiserver（aggregated apiserver）</p><span id="more"></span><ol><li>用户发起请求，携带用户凭证到kube-apiserver认证</li><li>kube-apiserver认证请求</li><li>kube-apiserver鉴权请求</li><li>kube-apiserver通过客户端证书和密钥和aggregated apiserver建立连接</li><li>kube-apiserver将包含user info的请求转发给aggregated apiserver</li><li>aggregated apiserver通过auth proxy authrntication method认证发来的请求</li><li>aggregated apiserver</li></ol><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081415488.png"></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/">https://kubernetes.io/docs/tasks/access-kubernetes-api/configure-aggregation-layer/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Service Account Token Volume Projection</title>
    <link href="/2019/05/28/Service-Account-Token-Volume-Projection/"/>
    <url>/2019/05/28/Service-Account-Token-Volume-Projection/</url>
    
    <content type="html"><![CDATA[<h4 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h4><p>社区实现的pod 通过 volume 方式引用service account 的 token，支持audience和token有效期设置。在1.11引入（Alpha），在1.12为Beta。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>ServiceAccountTokenVolumeProjection 在 k8s 1.11版本需要手动设置<code> TokenRequestProjection</code> 这个feature gate 为 true 来启用此功能，在1.12版本 <code>TokenRequestProjection</code>  默认为true</p><p>kubelet可以将service account token挂载到pod中。并且可以指定token的一些期望的属性，例如audience 和expirationSeconds。这些属性在default service account token下无法配置。一旦Pod和ServiceAccount被删除，service account token会跟着变成invalid</p><p>可以在pod的yaml中定义使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/run/secrets/tokens</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">vault-token</span><br>  <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">acct</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vault-token</span><br>    <span class="hljs-attr">projected:</span><br>      <span class="hljs-attr">sources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">serviceAccountToken:</span> <span class="hljs-comment">#名为serviceAccountToken的一种ProjectedVolume</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">vault-token</span>       <br>          <span class="hljs-attr">expirationSeconds:</span> <span class="hljs-number">7200</span> <span class="hljs-comment">#指定token过期时间为2小时</span><br>          <span class="hljs-attr">audience:</span> <span class="hljs-string">vault</span> <span class="hljs-comment"># identifier: vault</span><br></code></pre></td></tr></table></figure><ul><li><p>audience字段</p><p>包含token的目标受众（audience）。token的接收者必须使用token的audience中指定的标识符(identifier)来标识自己，否则接收者应该拒绝该token。此参数为可选，默认为api server的identifier（api）</p></li><li><p>expirationSeconds字段</p><p>指定service account token的有效时间。默认1小时，最小需要10分钟</p></li><li><p>path字段</p><p>指定projected volume的挂载点的相对路径</p></li></ul><p>创建pod之后，kubelet会替Pod请求和储存这个token，让pod在可配置的文件路径下访问到此token，并且一旦达到配置的到期时间，就会刷新token。</p><p>一旦token达到总TTL的80%，或者token已经超过24小时，kubelet 将主动更新token（rotate token）</p><h4 id="kubelet实现"><a href="#kubelet实现" class="headerlink" title="kubelet实现"></a>kubelet实现</h4><blockquote><p>pkg\kubelet\kubelet.go</p></blockquote><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">func NewMainKubelet(...)(*Kubelet, error) &#123;<br>    ...<br>    <span class="hljs-attribute">tokenManager</span> := token<span class="hljs-variable">.NewManager</span>(kubeDeps<span class="hljs-variable">.KubeClient</span>)<br>    ...<br>    klet<span class="hljs-variable">.volumePluginMgr</span>, err =<br>NewInitializedVolumePluginMgr(klet, secretManager, configMapManager, tokenManager, kubeDeps<span class="hljs-variable">.VolumePlugins</span>, kubeDeps<span class="hljs-variable">.DynamicPluginProber</span>)<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>pkg\kubelet\volume_host.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewInitializedVolumePluginMgr</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">kubelet *Kubelet,</span></span><br><span class="hljs-params"><span class="hljs-function">secretManager secret.Manager,</span></span><br><span class="hljs-params"><span class="hljs-function">configMapManager configmap.Manager,</span></span><br><span class="hljs-params"><span class="hljs-function">tokenManager *token.Manager,</span></span><br><span class="hljs-params"><span class="hljs-function">plugins []volume.VolumePlugin,</span></span><br><span class="hljs-params"><span class="hljs-function">prober volume.DynamicPluginProber)</span> <span class="hljs-params">(*volume.VolumePluginMgr, error)</span></span> &#123;<br>    ...<br>    kvh := &amp;kubeletVolumeHost&#123;<br>kubelet:          kubelet,<br>volumePluginMgr:  volume.VolumePluginMgr&#123;&#125;,<br>secretManager:    secretManager,<br>configMapManager: configMapManager,<br>tokenManager:     tokenManager,<br>mountPodManager:  mountPodManager,<br>&#125;<br>    ...<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(kvh *kubeletVolumeHost)</span> <span class="hljs-title">GetServiceAccountTokenFunc</span><span class="hljs-params">()</span> <span class="hljs-title">func</span><span class="hljs-params">(namespace, name <span class="hljs-keyword">string</span>, tr *authenticationv1.TokenRequest)</span> <span class="hljs-params">(*authenticationv1.TokenRequest, error)</span></span> &#123;<br><span class="hljs-keyword">return</span> kvh.tokenManager.GetServiceAccountToken<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>pkg\kubelet\token\token_manager.go</p></blockquote><p>GetServiceAccountToken 从 cache 或者 TokenRequest API 里获取service account token</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Manager)</span> <span class="hljs-title">GetServiceAccountToken</span><span class="hljs-params">(namespace, name <span class="hljs-keyword">string</span>, tr *authenticationv1.TokenRequest)</span> <span class="hljs-params">(*authenticationv1.TokenRequest, error)</span></span> &#123;<br>    <span class="hljs-comment">//解析TokenRequest，返回name/namespace/tr.Spec.Audiences/expirationSeconds/boundObjectRef 格式的 key</span><br>    key := keyFunc(name, namespace, tr)<br><br>    <span class="hljs-comment">//从cache中获取tokenRequests</span><br>ctr, ok := m.get(key)<br>    <br>    <span class="hljs-comment">//判断token是否需要刷新（一旦token达到总TTL的80%，或者token已经超过24小时），不需要刷新直接返回</span><br>    <span class="hljs-keyword">if</span> ok &amp;&amp; !m.requiresRefresh(ctr) &#123;<br><span class="hljs-keyword">return</span> ctr, <span class="hljs-literal">nil</span><br>&#125;<br>    <br>    <span class="hljs-comment">//创建新的token</span><br>    <span class="hljs-comment">//getToken: c.CoreV1().ServiceAccounts(namespace).CreateToken(name, tr)</span><br>    tr, err := m.getToken(name, namespace, tr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> !ok:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to fetch token: %v&quot;</span>, err)<br><span class="hljs-keyword">case</span> m.expired(ctr):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;token %s expired and refresh failed: %v&quot;</span>, key, err)<br><span class="hljs-keyword">default</span>:<br>klog.Errorf(<span class="hljs-string">&quot;couldn&#x27;t update token %s: %v&quot;</span>, key, err)<br><span class="hljs-keyword">return</span> ctr, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br><br>m.set(key, tr)<br><span class="hljs-keyword">return</span> tr, <span class="hljs-literal">nil</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h4><ul><li><p><a href="https://kubernetes.io/docs/concepts/storage/volumes/#projected">projected</a></p><p>projected volume 映射多个存在的volume 资源到同一目录。</p><p>所有资源要求必须和pod在同一个namespace。</p><p>当前有四种volume资源可以被映射(projected)：</p><ul><li>secret</li><li>downwardAPI</li><li>configMap</li><li>serviceAccountToken</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>default-token</title>
    <link href="/2019/05/08/default-token/"/>
    <url>/2019/05/08/default-token/</url>
    
    <content type="html"><![CDATA[<p>default-token得先从service account说起，Service account是Pod里面的进程调用Kubernetes API或其他外部服务而设计的，每个namespace下有一个名为default的默认的ServiceAccount对象，如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081409513.png" alt="3_4_1_serviceaccount"></p><p>Token controller监测service account的创建，并为它们创建默认token，即每个ServiceAccount都有一个名叫<code>&#123;Service Account name&#125;-token-xxx</code>的default token。在新建pod时，会自动挂载当前namespace的default token到pod的secrets下，用于Pod进程访问API Server。如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081410657.png" alt="3_4_1_svc_token-1"></p><p>default-token实际上就是secret，由于每个namespace下有一个名为default的默认的ServiceAccount对象，因此，每个namespaces下都有一个名为<code>default-token-xxx</code>的secret，如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081410689.png" alt="3_4_1_ns_token"></p><p>default-token自动刷新就是为每个default-token设置一个过期时间（24小时）。到期后，去IAM重新获取新的token更新到default-token中，如下图：</p><p><img src="https://gitee.com/eightzero/pico/raw/master/202110081410936.png" alt="3_4_1_token_refresh"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes下的DNS</title>
    <link href="/2018/10/03/kubernetes%E4%B8%8B%E7%9A%84DNS/"/>
    <url>/2018/10/03/kubernetes%E4%B8%8B%E7%9A%84DNS/</url>
    
    <content type="html"><![CDATA[<p>Kubernetes中的DNS主要用作服务发现，在集群中调度Pod和Service，并且配置kubelet使得容器可以使用DNS Service的IP解析域名</p><span id="more"></span><p>skyDNS（Kubernetes 1.3）—&gt;kubeDNS（Kubernetes1.3之后）—&gt;CoreDNS（Kubernetes 1.11之后GA）</p><p>stubdomains、upstreamnameservers（1.6增加）、federation</p><p>DNS </p><p>svc</p><p>A记录（域名解析IP的记录）：</p><p>SRV记录：</p><p>Pod：</p><h2 id="kube-DNS"><a href="#kube-DNS" class="headerlink" title="kube-DNS"></a>kube-DNS</h2><h2 id="CoreDNS和kube-DNS主要差异"><a href="#CoreDNS和kube-DNS主要差异" class="headerlink" title="CoreDNS和kube-DNS主要差异"></a>CoreDNS和kube-DNS主要差异</h2><h3 id="实现差异"><a href="#实现差异" class="headerlink" title="实现差异"></a>实现差异</h3><p>kube-dns中一个pod内使用了数个容器：kubedns、dnsmasq 和 sidecar。 kubedns 进程监视 Kubernetes master 对 Service 和 Endpoint 操作的变更，并维护一个内存查询结构去处理 DNS 请求。dnsmasq 容器增加了一个 DNS 缓存来改善性能。为执行对 dnsmasq 和 kubedns 的健康检查，sidecar容器提供了一个单独的健康检查 Endpoint</p><p>dnsmasq中的安全漏洞导致过去需要发布Kubernetes安全补丁。此外，由于dnsmasq处理存根域，但kubedns处理External Services，因此你无法在外部服务中使用存根域</p><h3 id="一体化解决方案"><a href="#一体化解决方案" class="headerlink" title="一体化解决方案"></a>一体化解决方案</h3><p>区别于 kube-dns，CoreDNS 编译出来就是一个单独的二进制可执行文件，内置了 cache，backend storage ，health check 等功能，无需第三方组件来辅助实现其他功能，从而使得部署更方便，内存管理更为安全；</p><h3 id="bug修复和增强功能"><a href="#bug修复和增强功能" class="headerlink" title="bug修复和增强功能"></a>bug修复和增强功能</h3><p>——dns＃55：kube-dns的自定义DNS条目可以通过使用kubernetes插件中的“fallthrough”机制、使用重写插件或者仅使用不同的插件（如文件插件）提供子区域来处理。</p><p>——dns＃116：只有一个A记录集用于具有单个主机名的pod无头服务。此问题已修复，无需任何其他配置。</p><p>——dns＃131： externalName不使用stubDomains设置。此问题已修复，无需任何其他配置。</p><p>——dns＃167：启用skyDNS循环A / AAAA记录。可以使用负载均衡插件配置等效功能。</p><p>——dns＃190：kube-dns无法以非root用户身份运行。现在通过使用非默认镜像解决了此问题，但在将来的版本中它将成为默认的CoreDNS行为。</p><p>——dns＃232：将pod hostname修复为dns srv记录的podname，这是通过下面描述的“endpoint_pod_names”功能支持的增强功能。</p><h2 id="CoreDNS实现原理"><a href="#CoreDNS实现原理" class="headerlink" title="CoreDNS实现原理"></a>CoreDNS实现原理</h2><h3 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h3><p><strong>Kube-dns<strong><strong>三个容器，</strong></strong>CoreDNS****一个容器</strong></p><p><strong>区别于**<strong>kube</strong></strong>-DNS<strong><strong>，</strong></strong>CoreDNS<strong><strong>编译出为一个单独二进制可</strong></strong>执行文件，内置了** <strong>cache<strong><strong>，</strong></strong>backend storage</strong> <strong>，****health check</strong> <strong>等功能，无需第三方组件来辅助实现其他功能，从而使得部署更方便，内存管理更为安全</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle">coredns.io:<span class="hljs-number">5300</span> &#123;<br>  <span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>coredns<span class="hljs-regexp">/zones/</span>coredns.io.db<br>&#125;<br><br>example.io:<span class="hljs-number">53</span> &#123;<br>  errors<br>  log<br>  <span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>coredns<span class="hljs-regexp">/zones/</span>example.io.db<br>&#125;<br><br>example.net:<span class="hljs-number">53</span> &#123;<br>  <span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>coredns<span class="hljs-regexp">/zones/</span>example.net.db<br>&#125;<br><br>.:<span class="hljs-number">53</span> &#123;<br>  errors<br>  log<br>  health<br>  rewrite name foo.example.com foo.<span class="hljs-keyword">default</span>.svc.cluster.local<br>  kubernetes cluster.local <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span><br>  <span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>coredns/example.db example.org<br>  proxy . <span class="hljs-regexp">/etc/</span>resolv.conf<br>  cache <span class="hljs-number">30</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="从kube-dns迁移到CoreDNS"><a href="#从kube-dns迁移到CoreDNS" class="headerlink" title="从kube-dns迁移到CoreDNS"></a>从kube-dns迁移到CoreDNS</h2><p>在Kubernetes1.10之后，CoreDNS支持将kube-dns的ConfigMap转换成CoreDNS的Corefile。也就是说，当你在kube-dns中已经通过ConfigMap配置了<code>stubdomains</code>、<code>upstreamnameservers</code>、<code>federation</code> 等参数, 在通过<code>kubeadm upgrade</code> 来安装CoreDNS后，将自动转换原来的ConfigMap到CoreDNS下的Corefile。</p><p>kube-dns下的ConfigMap：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  federations:</span> |<br>    &#123;<span class="hljs-string">&quot;foo&quot;</span> : <span class="hljs-string">&quot;foo.feddomain.com&quot;</span>&#125;<br><span class="hljs-symbol">  stubDomains:</span> |<br>    &#123;<span class="hljs-string">&quot;abc.com&quot;</span> : [<span class="hljs-string">&quot;1.2.3.4&quot;</span>], <span class="hljs-string">&quot;my.cluster.local&quot;</span> : [<span class="hljs-string">&quot;2.3.4.5&quot;</span>]&#125;<br><span class="hljs-symbol">  upstreamNameservers:</span> |<br>    [<span class="hljs-string">&quot;8.8.8.8&quot;</span>, <span class="hljs-string">&quot;8.8.4.4&quot;</span>]<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-number">2018</span><span class="hljs-number">-01</span><span class="hljs-number">-22</span>T20:<span class="hljs-number">21</span>:<span class="hljs-number">56</span>Z<br><span class="hljs-symbol">  name:</span> kube-dns<br><span class="hljs-symbol">  namespace:</span> kube-system<br></code></pre></td></tr></table></figure><p>转换后的CoreDNS Corefile:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.:<span class="hljs-number">53</span> &#123;<br>       errors<br>       health<br>       kubernetes cluster<span class="hljs-selector-class">.local</span>  <span class="hljs-keyword">in</span>-addr<span class="hljs-selector-class">.arpa</span> ip6<span class="hljs-selector-class">.arpa</span> &#123;<br>          upstream  <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">4.4</span><br>          pods insecure<br>          fallthrough <span class="hljs-keyword">in</span>-addr<span class="hljs-selector-class">.arpa</span> ip6<span class="hljs-selector-class">.arpa</span><br>       &#125;<br>       federation cluster<span class="hljs-selector-class">.local</span> &#123;<br>          foo foo<span class="hljs-selector-class">.feddomain</span><span class="hljs-selector-class">.com</span><br>       &#125;<br>       prometheus :<span class="hljs-number">9153</span><br>       proxy .  <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">4.4</span><br>       cache <span class="hljs-number">30</span><br>   &#125;<br>   abc<span class="hljs-selector-class">.com</span>:<span class="hljs-number">53</span> &#123;<br>       errors<br>       cache <span class="hljs-number">30</span><br>       proxy . <span class="hljs-number">1.2</span>.<span class="hljs-number">3.4</span><br>   &#125;<br>   my<span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>:<span class="hljs-number">53</span> &#123;<br>       errors<br>       cache <span class="hljs-number">30</span><br>       proxy . <span class="hljs-number">2.3</span>.<span class="hljs-number">4.5</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>检查可以升级的CoreDNS版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">kubeadm upgrade plan  --feature-gates CoreDNS=true<br></code></pre></td></tr></table></figure><p>升级成CoreDNS并且设为默认DNS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reStructuredText">kubeadm upgrade apply &lt;version&gt; --feature-gates CoreDNS=true<br></code></pre></td></tr></table></figure><p>新建集群设置CoreDNS为默认</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">kubeadm init --feature-gates CoreDNS=true<br></code></pre></td></tr></table></figure><h3 id="kubeadm-upgrade"><a href="#kubeadm-upgrade" class="headerlink" title="kubeadm upgrade"></a>kubeadm upgrade</h3><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://kubernetes.io/blog/2018/07/10/coredns-ga-for-kubernetes-cluster-dns/">coredns-ga-for-kubernetes-cluster-dns</a></p><p><a href="https://coredns.io/2017/06/08/how-queries-are-processed-in-coredns/">How Queries Are Processed in CoreDNS</a></p><p><a href="https://coredns.io/2018/05/21/migration-from-kube-dns-to-coredns/">migration-from-kube-dns-to-coredns</a></p><p><a href="https://coredns.io/2018/01/29/deploying-kubernetes-with-coredns-using-kubeadm/">deploying-kubernetes-with-coredns-using-kubeadm</a></p><p><a href="https://zhuanlan.zhihu.com/p/39782114"></a></p><p><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/"></a></p><p><a href="https://kubernetes.io/zh/docs/concepts/services-networking/dns-pod-service/#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86"></a></p><p><a href="https://k8smeetup.github.io/docs/tasks/administer-cluster/dns-debugging-resolution/#%E9%A6%96%E5%85%88%E6%A3%80%E6%9F%A5%E6%9C%AC%E5%9C%B0-dns-%E9%85%8D%E7%BD%AE"></a></p><p><a href="https://zhengyinyong.com/coredns-basis.html"></a></p><p><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/"></a></p><p><a href="https://jimmysong.io/kubernetes-handbook/practice/configuring-dns.html"></a></p><p><a href="https://draveness.me/dns-coredns"></a><br><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/dns-custom-nameservers/"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSL/TLS原理</title>
    <link href="/2018/08/07/SSL-TLS%E5%8E%9F%E7%90%86/"/>
    <url>/2018/08/07/SSL-TLS%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>TLS协议分为两层</p><ul><li>底层(Record Layer)</li><li>上层(ChangeCipherSpec Protocol&lt;20&gt;, Alert Protocol&lt;21&gt;, Handshake Protocol&lt;22&gt;, Application Data Protocol&lt;23&gt;)</li></ul><p>Record Layer处于TLS协议最底层，为TLS协议提供安全可靠的连接，为高层协议提供数据封装，压缩，加密等基本功能支持，指定了数据类型，SSL版本以及数据长度(Byte)。由于TLS版本众多，客户端和服务端协商ssl版本时，存在一定的兼容性，具体参照<a href="https://tools.ietf.org/html/rfc5246#appendix-E">TLS 兼容性问题</a>。比如当客户端需要兼容ssl老版本服务端时，会把recordLayer的ssl version设置为{03,XX}(即SSL3.0，TLS 1.0，1.1，1.2)中的任意值，通常是客户端支持的最低版本。<br><img src="https://gitee.com/eightzero/pico/raw/master/RecordLayer.png" alt="RecordLaye"></p><p>Handshake Protocol位于Record Layer之上，为Record Layer的负载，类似TCP层为IP层负载。HandShake Protocol层用于传输加密数据前，客户端与服务端的握手协商<br><img src="https://gitee.com/eightzero/pico/raw/master/handshakelayer.png" alt="handshakelaye"></p><h2 id="协商过程"><a href="#协商过程" class="headerlink" title="协商过程"></a>协商过程</h2><p><img src="https://gitee.com/eightzero/pico/raw/master/15327690442087.jpg" alt="15327690442087"></p><h3 id="1-客户端发出请求（Client-Hello）"><a href="#1-客户端发出请求（Client-Hello）" class="headerlink" title="1. 客户端发出请求（Client Hello）"></a>1. 客户端发出请求（Client Hello）</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/Client%20Hello.png" alt="Client Hello"></p><p>客户端向服务端发送的Client Hello报文中包含以下信息：<br>(1) Version。支持的协议版本，比如TLS 1.2版<br>(2) Random。一个客户端生成的随机数，稍后与服务端产生的随机数生成对话密钥(Master Secret)<br>(3) Cipher Suites。支持的加密方法，比如RSA公钥加密</p><p>Cipher Suite格式：认证算法__密钥协商交换算法__加密算法__摘要算法（TLS, ECDHE_RSA, AES_256_GCM, SHA256）<br><img src="https://gitee.com/eightzero/pico/raw/master/cipherSuites.png" alt="cipherSuites"></p><p>(4) Compression Method。支持的压缩方法，null表示不压缩<br>(5) Session ID。如果之前连过该服务端，可以复用会话，而无需重新进行TLS握手<br>(6) Extension。server_name(请求的服务端域名)，sinature_algorithms等</p><h3 id="2-服务端回应"><a href="#2-服务端回应" class="headerlink" title="2. 服务端回应"></a>2. 服务端回应</h3><p>从Server Hello到Server Hello Done，有些服务端是每条单独发送，有的服务端是合并一起发送。</p><h4 id="2-1-Server-Hello"><a href="#2-1-Server-Hello" class="headerlink" title="2.1 Server Hello"></a>2.1 Server Hello</h4><p><img src="https://gitee.com/eightzero/pico/raw/master/ServerHello.png" alt="ServerHello"></p><p>(1) Version。服务端确认使用的SSL版本，比如TLS 1.2版本。如果浏览器与服务器支持的版本不一致，会进行协商双方都兼容的版本，如果没有则关闭连接。<a href="https://tools.ietf.org/html/rfc5246#appendix-E">TLS 兼容性问题</a><br>(2) Random。一个服务端生成的随机数，稍后用于生成对话密钥<br>(3) Cipher Suite。服务端从client hello提供的Cipher Suites列表中选取要使用的加密套件<br>(4) Compression Method。服务端从client hello提供的Compression Method列表中选取要使用的压缩方法<br>(5) Session ID。若服务端允许客户端在以后通信中重用本次会话，则服务端会为本次会话分配Session ID<br>(6) Extension。</p><h4 id="2-2-Certificate"><a href="#2-2-Certificate" class="headerlink" title="2.2 Certificate"></a>2.2 Certificate</h4><p>服务端在收到客户端的Client Hello之后，将服务端的X.509证书发送给客户端，最下层证书在前（用户证书在前，上级证书在后）。发送的证书是二进制格式，并非base64之后的格式。</p><h4 id="2-3-Server-key-Exchange-可选"><a href="#2-3-Server-key-Exchange-可选" class="headerlink" title="2.3 Server key Exchange(可选)"></a>2.3 Server key Exchange(可选)</h4><p>DHE_DSS,DHE_RSA,DH_anon,<br>对于使用DHE/ECDHE非对称密钥协商算法的SSL握手，将发送该类型握手。<br>RSA算法不会继续该握手流程（DH、ECDH也不会发送server key exchange）<br>客户端在收到Server Key Exchange后，首先使用服务端证书中的公钥对签名进行RSA解密并校验散列值。如果解密校验通过，则基于ECDH参数中的Pubkey，通过一定算法算出<em><strong>Pre-Master Secret</strong></em><br><img src="https://gitee.com/eightzero/pico/raw/master/Ske.png" alt="ServerkeyExchange"></p><h4 id="2-4-Certificate-Request-可选"><a href="#2-4-Certificate-Request-可选" class="headerlink" title="2.4 Certificate Request(可选)"></a>2.4 Certificate Request(可选)</h4><p>对于重要的保密数据，服务端还需要对客户端进行验证，服务端可以向客户端发出Certificate Request消息，要求客户端发送证书进行合法性验证</p><h4 id="2-5-Server-Hello-Done"><a href="#2-5-Server-Hello-Done" class="headerlink" title="2.5 Server Hello Done"></a>2.5 Server Hello Done</h4><p>通知客户端Server Hello消息结束</p><h3 id="3-客户端回应"><a href="#3-客户端回应" class="headerlink" title="3. 客户端回应"></a>3. 客户端回应</h3><p>客户端收到服务端的Server Hello Done后，首先验证服务端证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。</p><p>（1） 一个随机数。该随机数用服务器公钥加密，防止被窃听。</p><p>（2） 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</p><p>（3） 客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。</p><p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。</p><p>至于为什么一定要用三个随机数，来生成”会话密钥”</p><h4 id="3-1-Certificate-可选"><a href="#3-1-Certificate-可选" class="headerlink" title="3.1. Certificate(可选)"></a>3.1. Certificate(可选)</h4><p>将客户端证书发送给服务端做合法性校验</p><h4 id="3-2-Client-Key-Exchange"><a href="#3-2-Client-Key-Exchange" class="headerlink" title="3.2. Client Key Exchange"></a>3.2. Client Key Exchange</h4><p><img src="https://gitee.com/eightzero/pico/raw/master/Cke.png" alt="ClientKeyExchange"></p><p>客户端密钥交换并通过随机数生成Master-Key</p><h4 id="3-3-Certificate-Verify"><a href="#3-3-Certificate-Verify" class="headerlink" title="3.3. Certificate Verify"></a>3.3. Certificate Verify</h4><p>客户端发送这个类型报文需要满足两个条件：</p><ul><li>服务端请求了客户端证书</li><li>客户端发送了非0长度的证书</li></ul><h4 id="3-4-Change-Cipher-Spec"><a href="#3-4-Change-Cipher-Spec" class="headerlink" title="3.4. Change Cipher Spec"></a>3.4. Change Cipher Spec</h4><p>告知服务端，客户端已经切换到协商好的的加密套件（Cipher Suite），表示随后的信息都将用双方商定的加密方法和密钥发送。</p><h4 id="3-5-Encrypted-Handshake-Message"><a href="#3-5-Encrypted-Handshake-Message" class="headerlink" title="3.5 Encrypted Handshake Message"></a>3.5 Encrypted Handshake Message</h4><p>客户端使用协商好的对称密钥进行加密的第一个报文，目的一个是告诉服务端整个握手过程收到了什么数据，发送了什么数据，保证中间没人篡改报文，二是确认密钥的正确性，如果这个报文加解密校验成功，那么对称密钥就是正确的</p><h3 id="4-服务端最后回应"><a href="#4-服务端最后回应" class="headerlink" title="4. 服务端最后回应"></a>4. 服务端最后回应</h3><h4 id="4-1-Change-Cipher-Spec"><a href="#4-1-Change-Cipher-Spec" class="headerlink" title="4.1 Change Cipher Spec"></a>4.1 Change Cipher Spec</h4><p>编码改变通知，告知客户端，服务端已经切换到选定的加密套件（Cipher Suite），表示随后的信息都将用双方商定的加密方法和密钥发送。</p><h4 id="4-2-Encrypted-Handshake-Message"><a href="#4-2-Encrypted-Handshake-Message" class="headerlink" title="4.2 Encrypted Handshake Message"></a>4.2 Encrypted Handshake Message</h4><p>服务端使用协商好的对称密钥进行加密的第一个报文，目的一个是告诉客户端整个握手过程收到了什么数据，发送了什么数据，保证中间没人篡改报文，二是确认密钥的正确性，如果这个报文加解密校验成功，那么对称密钥就是正确的</p><h3 id="5-Application-Data"><a href="#5-Application-Data" class="headerlink" title="5. Application Data"></a>5. Application Data</h3><p><img src="https://gitee.com/eightzero/pico/raw/master/ApplicationData.png" alt="ApplicationData"></p>]]></content>
    
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go http middleware</title>
    <link href="/2017/11/13/go-http-middleware/"/>
    <url>/2017/11/13/go-http-middleware/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs swift">package main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buildHandlerChain</span>(apiHandler http.<span class="hljs-type">Handler</span>)</span> http.<span class="hljs-type">Handler</span> &#123;<br>handler :<span class="hljs-operator">=</span> <span class="hljs-type">WithAuthorization</span>(apiHandler)<br>handler <span class="hljs-operator">=</span> <span class="hljs-type">WithAuthentication</span>(handler)<br><span class="hljs-keyword">return</span> handler<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithAuthentication</span>(handler http.<span class="hljs-type">Handler</span>)</span> http.<span class="hljs-type">Handler</span> &#123;<br><span class="hljs-keyword">return</span> http.<span class="hljs-type">HandlerFunc</span>(<span class="hljs-keyword">func</span>(w http.<span class="hljs-type">ResponseWriter</span>, req <span class="hljs-operator">*</span>http.<span class="hljs-type">Request</span>) &#123;<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;----handle Authentication-------<span class="hljs-subst">\n</span>&quot;</span>)<br>handler.<span class="hljs-type">ServeHTTP</span>(w, req)<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithAuthorization</span>(handler http.<span class="hljs-type">Handler</span>)</span> http.<span class="hljs-type">Handler</span> &#123;<br><span class="hljs-keyword">return</span> http.<span class="hljs-type">HandlerFunc</span>(<span class="hljs-keyword">func</span>(w http.<span class="hljs-type">ResponseWriter</span>, req <span class="hljs-operator">*</span>http.<span class="hljs-type">Request</span>) &#123;<br>fmt.<span class="hljs-type">Printf</span>(<span class="hljs-string">&quot;----handle Authorization-------<span class="hljs-subst">\n</span>&quot;</span>)<br>handler.<span class="hljs-type">ServeHTTP</span>(w, req)<br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">baseHandler</span>(w http.<span class="hljs-type">ResponseWriter</span>, req <span class="hljs-operator">*</span>http.<span class="hljs-type">Request</span>)</span> &#123;<br>fmt.<span class="hljs-type">Println</span>(<span class="hljs-string">&quot;----base handler----<span class="hljs-subst">\n</span>&quot;</span>)<br>w.<span class="hljs-type">Write</span>([]byte(<span class="hljs-string">&quot;hello handler!&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span>()</span> &#123;<br>apiHandler :<span class="hljs-operator">=</span> http.<span class="hljs-type">HandlerFunc</span>(baseHandler)<br>http.<span class="hljs-type">Handle</span>(<span class="hljs-string">&quot;/&quot;</span>, buildHandlerChain(apiHandler))<br>http.<span class="hljs-type">ListenAndServe</span>(<span class="hljs-string">&quot;:3000&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">handle</span> <span class="hljs-comment">Authentication</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">handle</span> <span class="hljs-comment">Authorization</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">base</span> <span class="hljs-comment">handler</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">handle</span> <span class="hljs-comment">Authentication</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">handle</span> <span class="hljs-comment">Authorization</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">base</span> <span class="hljs-comment">handler</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><br><br></code></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://zenlife.tk/go-http-middleware.md">http://zenlife.tk/go-http-middleware.md</a></li><li><a href="https://stackoverflow.com/questions/51311182/how-to-assign-multiple-handlers-to-the-same-uri-in-go">https://stackoverflow.com/questions/51311182/how-to-assign-multiple-handlers-to-the-same-uri-in-go</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pod创建大致流程</title>
    <link href="/2017/11/08/pod%E5%88%9B%E5%BB%BA%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B/"/>
    <url>/2017/11/08/pod%E5%88%9B%E5%BB%BA%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/eightzero/pico/raw/master/pod.jpg"></p><p><img src="https://gitee.com/eightzero/pico/raw/master/202112241540146.svg" alt="k8s-pod"></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go restful</title>
    <link href="/2017/10/05/go-restful/"/>
    <url>/2017/10/05/go-restful/</url>
    
    <content type="html"><![CDATA[<h4 id="go-http-web"><a href="#go-http-web" class="headerlink" title="go http web"></a>go http web</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//基础 web server</span><br>func simple<span class="hljs-constructor">HttpServer()</span>&#123;<br><span class="hljs-comment">//1. 往serverMux的 map[string]muxEntry 添加路由规则pattern以及封装了handler的muxEntry</span><br><span class="hljs-comment">//2. 匹配pattern，Handler被调用</span><br>http.<span class="hljs-constructor">HandleFunc(<span class="hljs-string">&quot;/hello&quot;</span>, SayHello)</span><br><span class="hljs-comment">//1. 实例化Server</span><br>http.<span class="hljs-constructor">ListenAndServe(<span class="hljs-string">&quot;:8000&quot;</span>,<span class="hljs-params">nil</span>)</span><br>&#125;<br>func <span class="hljs-constructor">SayHello(<span class="hljs-params">w</span> <span class="hljs-params">http</span>.ResponseWriter, <span class="hljs-params">req</span> <span class="hljs-operator">*</span><span class="hljs-params">http</span>.Request)</span>  &#123;<br>fmt.<span class="hljs-constructor">Println(<span class="hljs-params">req</span>)</span><br>w.<span class="hljs-constructor">Write([]<span class="hljs-params">byte</span>(<span class="hljs-string">&quot;Hello!!!&quot;</span>)</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="golang-装饰器模式"><a href="#golang-装饰器模式" class="headerlink" title="golang 装饰器模式"></a>golang 装饰器模式</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">HandleFunc(<span class="hljs-params">pattern</span> <span class="hljs-params">string</span>, <span class="hljs-params">handler</span> <span class="hljs-params">func</span>(ResponseWriter, <span class="hljs-operator">*</span>Request)</span>) &#123;<br>DefaultServeMux.<span class="hljs-constructor">HandleFunc(<span class="hljs-params">pattern</span>, <span class="hljs-params">handler</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="go-restful"><a href="#go-restful" class="headerlink" title="go-restful"></a>go-restful</h4><p>一个 Container 包含多个 WebService，同时container实现了http.handler接口定义的ServeHTTP方法</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Container</span> struct &#123;<br>   webServicesLock        sync.<span class="hljs-type">RWMutex</span><br>   webServices            []*<span class="hljs-type">WebService</span> //一个<span class="hljs-type">Container</span>包含多个webservice<br>   <span class="hljs-type">ServeMux</span>               *http.<span class="hljs-type">ServeMux</span><br>   isRegisteredOnRoot     bool<br>   containerFilters       []<span class="hljs-type">FilterFunction</span><br>   doNotRecover           bool // default is true<br>   recoverHandleFunc      <span class="hljs-type">RecoverHandleFunction</span><br>   serviceErrorHandleFunc <span class="hljs-type">ServiceErrorHandleFunction</span><br>   router                 <span class="hljs-type">RouteSelector</span> // default is a <span class="hljs-type">CurlyRouter</span> (<span class="hljs-type">RouterJSR311</span> is a slower alternative)<br>   contentEncodingEnabled bool          // default is false<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func (c *Container) <span class="hljs-constructor">ServeHTTP(<span class="hljs-params">httpwriter</span> <span class="hljs-params">http</span>.ResponseWriter, <span class="hljs-params">httpRequest</span> <span class="hljs-operator">*</span><span class="hljs-params">http</span>.Request)</span> &#123;<br>    c.ServeMux.<span class="hljs-constructor">ServeHTTP(<span class="hljs-params">httpwriter</span>, <span class="hljs-params">httpRequest</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>一个 webservice 包含多个Route，webservice里定义</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">type</span> WebService <span class="hljs-keyword">struct</span> &#123;<br>    rootPath       <span class="hljs-keyword">string</span><br>    pathExpr       *pathExpression<br>    routes         []Route <span class="hljs-comment">//一个webservice包含多个Route</span><br>    produces       []<span class="hljs-keyword">string</span><br>    consumes       []<span class="hljs-keyword">string</span><br>    pathParameters []*Parameter<br>    filters        []FilterFunction<br>    documentation  <span class="hljs-keyword">string</span><br>    apiVersion     <span class="hljs-keyword">string</span><br><br>    typeNameHandleFunc TypeNameHandleFunction<br><br>    dynamicRoutes <span class="hljs-keyword">bool</span><br><br>    <span class="hljs-comment">// protects &#x27;routes&#x27; if dynamic routes are enabled</span><br>    routesLock sync.RWMutex<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Path specifies the root URL template path of the WebService.</span><br><span class="hljs-comment">// All Routes will be relative to this path.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *WebService)</span> <span class="hljs-title">Path</span><span class="hljs-params">(root <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">WebService</span></span> &#123;<br>w.rootPath = root<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(w.rootPath) == <span class="hljs-number">0</span> &#123;<br>w.rootPath = <span class="hljs-string">&quot;/&quot;</span><br>&#125;<br>w.compilePathExpression()<br><span class="hljs-keyword">return</span> w<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// Route creates a new Route using the RouteBuilder and add to the ordered list of Routes.</span><br>func (w *WebService) <span class="hljs-constructor">Route(<span class="hljs-params">builder</span> <span class="hljs-operator">*</span>RouteBuilder)</span> *WebService &#123;<br>w.routesLock.<span class="hljs-constructor">Lock()</span><br>defer w.routesLock.<span class="hljs-constructor">Unlock()</span><br>builder.copy<span class="hljs-constructor">Defaults(<span class="hljs-params">w</span>.<span class="hljs-params">produces</span>, <span class="hljs-params">w</span>.<span class="hljs-params">consumes</span>)</span><br>w.routes = append(w.routes, builder.<span class="hljs-constructor">Build()</span>)<br>return w<br>&#125;<br></code></pre></td></tr></table></figure><p>一个 Route 包含HTTP 协议协议相关的HTTP Request 、HTTP Reponse 、方法等处理。由RouteBuilder传递过来的</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Route</span> struct &#123;<br>    <span class="hljs-type">Method</span>   string<br>    <span class="hljs-type">Produces</span> []string<br>    <span class="hljs-type">Consumes</span> []string<br>    <span class="hljs-type">Path</span>     string // webservice root path + described path<br>    <span class="hljs-type">Function</span> <span class="hljs-type">RouteFunction</span>//具体处理函数<br>    <span class="hljs-type">Filters</span>  []<span class="hljs-type">FilterFunction</span><br>    <span class="hljs-type">If</span>       []<span class="hljs-type">RouteSelectionConditionFunction</span><br><br>    // cached values for dispatching<br>    relativePath string<br>    pathParts    []string<br>    pathExpr     *pathExpression // cached compilation of relativePath as <span class="hljs-type">RegExp</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// RouteFunction declares the signature of a function that can be bound to a Route.</span><br><span class="hljs-keyword">type</span> RouteFunction <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Request, *Response)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-keyword">To</span> bind the route <span class="hljs-keyword">to</span> a <span class="hljs-keyword">function</span>.<br>// <span class="hljs-keyword">If</span> this route <span class="hljs-keyword">is</span> matched <span class="hljs-keyword">with</span> the incoming Http Request <span class="hljs-keyword">then</span> <span class="hljs-keyword">call</span> this <span class="hljs-keyword">function</span> <span class="hljs-keyword">with</span> the *Request,*Response pair. Required.<br>func (b *RouteBuilder) <span class="hljs-keyword">To</span>(<span class="hljs-keyword">function</span> RouteFunction) *RouteBuilder &#123;<br>b.<span class="hljs-keyword">function</span> = <span class="hljs-keyword">function</span><br><span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-ResourceMethod-and-ResourceMethodContainer"><a href="#1-ResourceMethod-and-ResourceMethodContainer" class="headerlink" title="1. ResourceMethod and ResourceMethodContainer"></a>1. ResourceMethod and ResourceMethodContainer</h3><h3 id="2-Apply-Builder-pattern-to-reduce-clutter"><a href="#2-Apply-Builder-pattern-to-reduce-clutter" class="headerlink" title="2: Apply Builder pattern to reduce clutter"></a>2: Apply Builder pattern to reduce clutter</h3><h3 id="3-Introduce-defaults-on-the-Resource-and-override-per-method-if-needed"><a href="#3-Introduce-defaults-on-the-Resource-and-override-per-method-if-needed" class="headerlink" title="3: Introduce defaults on the Resource and override per method if needed"></a>3: Introduce defaults on the Resource and override per method if needed</h3><h3 id="4-Binding-Routes-to-Functions"><a href="#4-Binding-Routes-to-Functions" class="headerlink" title="4:  Binding Routes to Functions"></a>4:  Binding Routes to Functions</h3><h3 id="5-Document-the-API"><a href="#5-Document-the-API" class="headerlink" title="5: Document the API"></a>5: Document the API</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://ernestmicklei.com/2012/11/go-restful-api-design/">http://ernestmicklei.com/2012/11/go-restful-api-design/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go protobuf</title>
    <link href="/2017/10/03/go-protobuf/"/>
    <url>/2017/10/03/go-protobuf/</url>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Protocol buffers通常称为Protobuf，是Google开发的一种协议，允许对结构化数据进行序列化和反序列化。 谷歌开发它的目的是提供一种比XML更好的方式来进行系统间通信。 因此，他们专注于使其比XML更简单，更小，更快，更易于维护。与此同时，该协议甚至超越了JSON，具有更好的性能，更好的可维护性和更小的尺寸。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>下载 <a href="https://github.com/google/protobuf/releases">protoc</a> 放到 GOPATH/bin</p><p>测试</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">protoc <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure></li><li><p>proto的go插件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/golang/protobuf/protoc-gen-<span class="hljs-keyword">go</span><br></code></pre></td></tr></table></figure></li><li><p>安装goprotobuf库</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/golang/protobuf/proto<br></code></pre></td></tr></table></figure></li></ul><h3 id="编写-proto-文件"><a href="#编写-proto-文件" class="headerlink" title="编写*.proto 文件"></a>编写*.proto 文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;  <span class="hljs-regexp">//</span>指定版本，必须要写（proto3、proto2）<br>package example;<br><br>message MessageInfo&#123;<br>    string message = <span class="hljs-number">1</span>;   <span class="hljs-regexp">//</span>消息<br>    int32 length = <span class="hljs-number">2</span>;    <span class="hljs-regexp">//</span>消息大小<br>    int32 cnt = <span class="hljs-number">3</span>;      <span class="hljs-regexp">//</span>消息计数<br>&#125;<br></code></pre></td></tr></table></figure><p>如果放在 <code>package main</code> 下，运行时会报错</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta"># command-<span class="hljs-meta-keyword">line</span>-arguments</span><br>./main.go:<span class="hljs-number">10</span>:<span class="hljs-number">11</span>: undefined: UserInfo<br>./main.go:<span class="hljs-number">17</span>:<span class="hljs-number">14</span>: undefined: UserInfo<br></code></pre></td></tr></table></figure><h3 id="生成go文件"><a href="#生成go文件" class="headerlink" title="生成go文件"></a>生成go文件</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">protoc <span class="hljs-params">--go_out=</span>. *<span class="hljs-string">.proto</span><br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test := &amp;example.MessageInfo&#123;<br>Message: <span class="hljs-string">&quot;hello world&quot;</span>,<br>Length: <span class="hljs-number">100</span>,<br>Cnt: <span class="hljs-number">3</span>,<br>&#125;<br><br>data, _ := proto.Marshal(test)<br>newTest := &amp;example.MessageInfo&#123;&#125;<br>err := proto.Unmarshal(data, newTest)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;test :%+v\n&quot;</span>, test)<br>fmt.Printf(<span class="hljs-string">&quot;newTest :%+v\n&quot;</span>,newTest)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>:message:&quot;hello world&quot; length:100 cnt:3 <br>newTest :message:&quot;hello world&quot; length:100 cnt:3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker抓包方法</title>
    <link href="/2017/08/01/docker%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/"/>
    <url>/2017/08/01/docker%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-确认容器网络模式"><a href="#1-确认容器网络模式" class="headerlink" title="1. 确认容器网络模式"></a>1. 确认容器网络模式</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">docker <span class="hljs-keyword">inspect</span> container_name | <span class="hljs-keyword">grep</span> NetworkMode<br></code></pre></td></tr></table></figure><p>回显：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;NetworkMode&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br></code></pre></td></tr></table></figure><h3 id="2-host模式抓包"><a href="#2-host模式抓包" class="headerlink" title="2. host模式抓包"></a>2. host模式抓包</h3><h3 id="3-default模式抓包"><a href="#3-default模式抓包" class="headerlink" title="3. default模式抓包"></a>3. default模式抓包</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">docker inspect --format &#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">.State.Pid</span>&#125;&#125;</span><span class="xml">&#x27; container_name</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">73602<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">mkdir</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/netns<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/proc/</span><span class="hljs-number">73602</span><span class="hljs-regexp">/ns/</span>net <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/netns/</span>container_name<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ip netns exec container_name tcpdump -i eth<span class="hljs-number">0</span> -s<span class="hljs-number">0</span> -w <span class="hljs-number">1</span>.pcap<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos7搭建k8s</title>
    <link href="/2017/08/01/Centos7%E6%90%AD%E5%BB%BAk8s/"/>
    <url>/2017/08/01/Centos7%E6%90%AD%E5%BB%BAk8s/</url>
    
    <content type="html"><![CDATA[<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld<br>systemctl disable firewalld<br></code></pre></td></tr></table></figure><h2 id="关闭Swap"><a href="#关闭Swap" class="headerlink" title="关闭Swap"></a>关闭Swap</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">swapoff -a <br>sed -i &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab<br></code></pre></td></tr></table></figure><h2 id="关闭Selinux"><a href="#关闭Selinux" class="headerlink" title="关闭Selinux"></a>关闭Selinux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">setenforce  0 <br>sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/sysconfig/selinux <br>sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config <br>sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/sysconfig/selinux <br>sed -i &quot;s/^SELINUX=permissive/SELINUX=disabled/g&quot; /etc/selinux/config  <br>modprobe br_netfilter<br>cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br>sysctl -p /etc/sysctl.d/k8s.conf<br><br>ls /proc/sys/net/bridge<br></code></pre></td></tr></table></figure><h2 id="设置内核、K8S的yum源"><a href="#设置内核、K8S的yum源" class="headerlink" title="设置内核、K8S的yum源"></a>设置内核、K8S的yum源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/<br>enabled=1<br>gpgcheck=1<br>repo_gpgcheck=1<br>gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<br>EOF<br></code></pre></td></tr></table></figure><h2 id="下载kubelet、-kubectl、-kubeadm、-docker、-kubernetes-cni"><a href="#下载kubelet、-kubectl、-kubeadm、-docker、-kubernetes-cni" class="headerlink" title="下载kubelet、 kubectl、 kubeadm、 docker、 kubernetes-cni"></a>下载kubelet、 kubectl、 kubeadm、 docker、 kubernetes-cni</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y kubeadm kubelet kubectl kubernetes-cni docker<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> kubelet &amp; systemctl <span class="hljs-keyword">start</span> kubelet<br></code></pre></td></tr></table></figure><h2 id="设置docker加速器"><a href="#设置docker加速器" class="headerlink" title="设置docker加速器"></a>设置docker加速器</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mkdir -p <span class="hljs-regexp">/etc/</span>docker<br>sudo tee <span class="hljs-regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><h2 id="docker代理设置-amp-cgroupfs设置"><a href="#docker代理设置-amp-cgroupfs设置" class="headerlink" title="docker代理设置 &amp; cgroupfs设置"></a>docker代理设置 &amp; cgroupfs设置</h2><pre><code>vi /usr/lib/systemd/system/docker.service</code></pre><p> 修改cgroup driver：native.cgroupdriver=systemd修改为native.cgroupdriver=cgroupfs</p><p> 启动docker并设置开启自启<br>systemctl enable docker &amp; systemctl daemon-reload &amp; systemctl restart docker</p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS应用签名原理</title>
    <link href="/2016/09/08/iOS%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86/"/>
    <url>/2016/09/08/iOS%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="基本签名原理："><a href="#基本签名原理：" class="headerlink" title="基本签名原理："></a>基本签名原理：</h3><p>App签名使用到了数字签名，通过hash算法提取摘要，使用苹果私钥加密，形成签名，然后将原始数据，加密的的摘要（签名）及相关信息放到一起，形成已签名的数据（数字证书）。</p><span id="more"></span><h3 id="iOS-App-签名机制："><a href="#iOS-App-签名机制：" class="headerlink" title="iOS App 签名机制："></a>iOS App 签名机制：</h3><h3 id="CertificateSigningRequest-certSigningRequest"><a href="#CertificateSigningRequest-certSigningRequest" class="headerlink" title="CertificateSigningRequest.certSigningRequest"></a>CertificateSigningRequest.certSigningRequest</h3><p>在PKI系统中，Certificate siging request（CSR）是用于到Certificate Authority申请证书的，包含申请证书的一些必要信息</p><p>*.certSigningRequest包含了如下信息：</p><ul><li>申请者信息</li><li>申请者公钥</li><li>摘要算法和公钥加密算法</li></ul><h3 id="发布证书"><a href="#发布证书" class="headerlink" title="发布证书"></a>发布证书</h3><p>在苹果服务端上传了*.certSigningRequest后，苹果服务端会取出CertSigningRequest中的公钥，添加账号信息，通过哈希算法生成一个摘要，使用苹果私钥对摘要加密，形成数字签名。发布证书包含如下信息：</p><ul><li>申请者信息</li><li>申请者公钥</li><li>通过苹果私钥加密的摘要—-数字签名</li></ul><h3 id="Provision-Profile"><a href="#Provision-Profile" class="headerlink" title="Provision Profile"></a>Provision Profile</h3><p>签名文件在苹果开发者网站生成，生成时需要关联App ID，发布证书。*.mobileprovision文件主要包含了如下信息：</p><ul><li>APP ID（Bundle ID/application-identifier）</li><li>Entitlements （权限列表）</li><li>DeveloperCertificates（使用的证书）</li><li>ExpirationDate（签名文件过期时间点）</li><li>ProvisionedDevices（可安装的设备列表的UDID，development证书特有，distribution是ProvisionAllDevices）</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[] (<a href="http://www.youdzone.com/signature.html">http://www.youdzone.com/signature.html</a>)</p><p>[] (<a href="https://www.objc.io/issues/17-security/inside-code-signing/">https://www.objc.io/issues/17-security/inside-code-signing/</a>)</p><p>[] (<a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929-CH1-SW3">https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929-CH1-SW3</a>)</p><p>[] (<a href="http://blog.cnbang.net/tech/3386/">http://blog.cnbang.net/tech/3386/</a>)</p><p>[] (<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a>)</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>申请移动设备管理厂商(MDM Vendor)</title>
    <link href="/2016/07/01/MDM-vendor/"/>
    <url>/2016/07/01/MDM-vendor/</url>
    
    <content type="html"><![CDATA[<h2 id="申请移动设备管理厂商-MDM-Vendor"><a href="#申请移动设备管理厂商-MDM-Vendor" class="headerlink" title="申请移动设备管理厂商(MDM Vendor)"></a>申请移动设备管理厂商(MDM Vendor)</h2><p>前提：必须是苹果企业开发者</p><p>前往苹果开发者网站申请成为<a href="https://developer.apple.com/contact/submit/">MDM Vendor</a>，申请成功后在开发者网站可以看到多出一个MDM CSR选项</p><p>![](<a href="https://gitee.com/eightzero/pico/raw/master/MDM">https://gitee.com/eightzero/pico/raw/master/MDM</a> CSR.png)</p><span id="more"></span><h2 id="MDM提供商侧-MDM-vendor"><a href="#MDM提供商侧-MDM-vendor" class="headerlink" title="MDM提供商侧(MDM vendor)"></a>MDM提供商侧(MDM vendor)</h2><h3 id="创建CSR"><a href="#创建CSR" class="headerlink" title="创建CSR"></a>创建CSR</h3><h3 id="生成MDM证书"><a href="#生成MDM证书" class="headerlink" title="生成MDM证书"></a>生成MDM证书</h3><h3 id="下载苹果WWDR和苹果根证书"><a href="#下载苹果WWDR和苹果根证书" class="headerlink" title="下载苹果WWDR和苹果根证书"></a>下载苹果WWDR和苹果根证书</h3><p>地址：</p><p><a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer">WWDR internediate certificate</a>  </p><p><a href="http://www.apple.com/appleca/AppleIncRootCertificate.cer">Apple root certificate</a></p><h3 id="转化成PEM"><a href="#转化成PEM" class="headerlink" title="转化成PEM"></a>转化成PEM</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">openssl x509 -inform der -<span class="hljs-keyword">in</span> mdm_identity<span class="hljs-selector-class">.cer</span> -out mdm<span class="hljs-selector-class">.pem</span><br>openssl x509 -inform der -<span class="hljs-keyword">in</span> AppleWWDRCA<span class="hljs-selector-class">.cer</span> -out intermediate<span class="hljs-selector-class">.pem</span><br>openssl x509 -inform der -<span class="hljs-keyword">in</span> AppleIncRootCertificate<span class="hljs-selector-class">.cer</span> -out root.pem<br></code></pre></td></tr></table></figure><h2 id="MDM使用侧-customer"><a href="#MDM使用侧-customer" class="headerlink" title="MDM使用侧(customer)"></a>MDM使用侧(customer)</h2><h3 id="创建CSR-1"><a href="#创建CSR-1" class="headerlink" title="创建CSR"></a>创建CSR</h3><h3 id="CSR签名成encoded-plist"><a href="#CSR签名成encoded-plist" class="headerlink" title="CSR签名成encoded_plist"></a>CSR签名成encoded_plist</h3><p>PYTHON：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import argparse<br><span class="hljs-keyword">from</span> plistlib import writePlistToString<br>import os<br>import subprocess<br><span class="hljs-keyword">from</span> base64 import b64encode<br>import sys<br>import urllib2<br><br>def p(s):<br>sys.stdout.write(s)<br>sys.stdout.flush()<br><br>def mdm_vendor_sign():<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">This utility will create a properly encoded certifiate signing request</span><br><span class="hljs-string">that you can upload to identity.apple.com/pushcert</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br><br>parser = argparse.ArgumentParser(<span class="hljs-attribute">description</span>=mdm_vendor_sign.__doc__)<br>parser.add_argument(<span class="hljs-string">&#x27;--key&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&#x27;Private key&#x27;</span>, <span class="hljs-attribute">required</span>=<span class="hljs-literal">True</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;--csr&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&#x27;Certificate signing request&#x27;</span>, <span class="hljs-attribute">required</span>=<span class="hljs-literal">True</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;--mdm&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&#x27;MDM vendor certificate&#x27;</span>, <span class="hljs-attribute">required</span>=<span class="hljs-literal">True</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;--out&#x27;</span>, <span class="hljs-attribute">help</span>=<span class="hljs-string">&#x27;Output filename&#x27;</span>, <span class="hljs-attribute">required</span>=<span class="hljs-literal">False</span>)<br><br><br>cli_args = vars(parser.parse_args())<br><br># Verify CSR<br># openssl req -text -noout -verify -in CSR.csr<br>p(<span class="hljs-string">&#x27;Verifying %s ... &#x27;</span> % cli_args[<span class="hljs-string">&#x27;csr&#x27;</span>])<br>csr_file = open(cli_args[<span class="hljs-string">&#x27;csr&#x27;</span>]).read()<br>args = [<span class="hljs-string">&#x27;openssl&#x27;</span>, <span class="hljs-string">&#x27;req&#x27;</span>, <span class="hljs-string">&#x27;-noout&#x27;</span>, <span class="hljs-string">&#x27;-verify&#x27;</span> ]<br>command = subprocess.Popen(args, <span class="hljs-attribute">stdout</span>=subprocess.PIPE, <span class="hljs-attribute">stdin</span>=subprocess.PIPE, <span class="hljs-attribute">stderr</span>=subprocess.STDOUT)<br>output, <span class="hljs-builtin-name">error</span> = command.communicate(input = csr_file)<br><span class="hljs-keyword">if</span> output.rstrip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)[0] == <span class="hljs-string">&#x27;verify OK&#x27;</span>:<br>p(<span class="hljs-string">&#x27;OK\n&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>p(<span class="hljs-string">&#x27;FAILED\n&#x27;</span>)<br>return<br><br><br># Verify private key<br># openssl rsa -in privateKey.key -check<br>p(<span class="hljs-string">&#x27;Verifying %s ... &#x27;</span> % cli_args[<span class="hljs-string">&#x27;key&#x27;</span>])<br>key_file = open(cli_args[<span class="hljs-string">&#x27;key&#x27;</span>]).read()<br>args = [<span class="hljs-string">&#x27;openssl&#x27;</span>, <span class="hljs-string">&#x27;rsa&#x27;</span>, <span class="hljs-string">&#x27;-check&#x27;</span>, <span class="hljs-string">&#x27;-noout&#x27;</span> ]<br>command = subprocess.Popen(args, <span class="hljs-attribute">stdout</span>=subprocess.PIPE, <span class="hljs-attribute">stdin</span>=subprocess.PIPE, <span class="hljs-attribute">stderr</span>=subprocess.STDOUT)<br>output, <span class="hljs-builtin-name">error</span> = command.communicate(input = key_file)<br><span class="hljs-keyword">if</span> output.rstrip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)[0] == <span class="hljs-string">&#x27;RSA key ok&#x27;</span>:<br>p(<span class="hljs-string">&#x27;OK\n&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>p(<span class="hljs-string">&#x27;FAILED\n\n&#x27;</span>)<br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;If you don&#x27;t have the plain private key already, you need</span><br><span class="hljs-string">to extract it from the pkcs12 file...</span><br><span class="hljs-string">First convert to PEM</span><br><span class="hljs-string">openssl pkcs12 -in filename.p12 -nocerts -out key.pem</span><br><span class="hljs-string">Then export the certificate file from the pfx file</span><br><span class="hljs-string">openssl pkcs12 -in filename.pfx -clcerts -nokeys -out cert.pem</span><br><span class="hljs-string">Lastly Remove the passphrase from the private key</span><br><span class="hljs-string">openssl rsa -in key.pem -out the_private_key.key</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br>return<br><br><br># Verify MDM vendor certificate<br># openssl x509 -noout -in mdm.cer -inform DER<br>p(<span class="hljs-string">&#x27;Verifying %s ... &#x27;</span> % cli_args[<span class="hljs-string">&#x27;mdm&#x27;</span>])<br>mdm_cert_file = open(cli_args[<span class="hljs-string">&#x27;mdm&#x27;</span>],<span class="hljs-string">&#x27;rb&#x27;</span>).read()  # Binary read<br>args = [<span class="hljs-string">&#x27;openssl&#x27;</span>, <span class="hljs-string">&#x27;x509&#x27;</span>, <span class="hljs-string">&#x27;-noout&#x27;</span>, <span class="hljs-string">&#x27;-inform&#x27;</span>, <span class="hljs-string">&#x27;DER&#x27;</span> ]<br>command = subprocess.Popen(args, <span class="hljs-attribute">stdout</span>=subprocess.PIPE, <span class="hljs-attribute">stdin</span>=subprocess.PIPE, <span class="hljs-attribute">stderr</span>=subprocess.STDOUT)<br>output, <span class="hljs-builtin-name">error</span> = command.communicate(input = mdm_cert_file)<br><span class="hljs-keyword">if</span> len(output) == 0:<br>p(<span class="hljs-string">&#x27;OK\n&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>p(<span class="hljs-string">&#x27;FAILED\n&#x27;</span>)<br>return<br><br><br># Convert CSR <span class="hljs-keyword">to</span> DER format<br># openssl req -inform pem -outform der -in customer.csr -out customer.der<br>p(<span class="hljs-string">&#x27;Converting %s to DER format... &#x27;</span> % cli_args[<span class="hljs-string">&#x27;csr&#x27;</span>])<br>args = [<span class="hljs-string">&#x27;openssl&#x27;</span>, <span class="hljs-string">&#x27;req&#x27;</span>, <span class="hljs-string">&#x27;-inform&#x27;</span>, <span class="hljs-string">&#x27;pem&#x27;</span>, <span class="hljs-string">&#x27;-outform&#x27;</span>, <span class="hljs-string">&#x27;der&#x27;</span> ]<br>command = subprocess.Popen(args, <span class="hljs-attribute">stdout</span>=subprocess.PIPE, <span class="hljs-attribute">stdin</span>=subprocess.PIPE, <span class="hljs-attribute">stderr</span>=subprocess.STDOUT)<br>output, <span class="hljs-builtin-name">error</span> = command.communicate(input = csr_file)<br><span class="hljs-keyword">if</span> error:<br>p(<span class="hljs-string">&#x27;FAILED\n&#x27;</span>)<br>return<br>p(<span class="hljs-string">&#x27;OK\n&#x27;</span>)<br>csr_der = output<br>csr_b64 = b64encode(csr_der)<br><br><br># Sign the CSR with the private key <br># openssl sha1 -sign private_key.key -out signed_output.rsa data_to_sign.txt<br>p(<span class="hljs-string">&#x27;Signing CSR with private key... &#x27;</span>)<br>args = [<span class="hljs-string">&#x27;openssl&#x27;</span>, <span class="hljs-string">&#x27;sha1&#x27;</span>, <span class="hljs-string">&#x27;-sign&#x27;</span>, cli_args[<span class="hljs-string">&#x27;key&#x27;</span>] ]<br>command = subprocess.Popen(args, <span class="hljs-attribute">stdout</span>=subprocess.PIPE, <span class="hljs-attribute">stdin</span>=subprocess.PIPE, <span class="hljs-attribute">stderr</span>=subprocess.STDOUT)<br>output, <span class="hljs-builtin-name">error</span> = command.communicate(input = csr_der)<br><span class="hljs-keyword">if</span> error:<br>p(<span class="hljs-string">&#x27;FAILED\n&#x27;</span>)<br>return<br>p(<span class="hljs-string">&#x27;OK\n&#x27;</span>)<br>signature_bytes = output<br>signature = b64encode(signature_bytes)<br><br><br>def cer_to_pem(cer_data):<br># openssl x509 -inform der -in mdm.cer -out mdm.pem<br># -in <span class="hljs-keyword">and</span> -out flags are handled by STDIN <span class="hljs-keyword">and</span> STDOUT<br>args = [<span class="hljs-string">&#x27;openssl&#x27;</span>, <span class="hljs-string">&#x27;x509&#x27;</span>, <span class="hljs-string">&#x27;-inform&#x27;</span>, <span class="hljs-string">&#x27;der&#x27;</span> ]<br>command = subprocess.Popen(args, <span class="hljs-attribute">stdout</span>=subprocess.PIPE, <span class="hljs-attribute">stdin</span>=subprocess.PIPE, <span class="hljs-attribute">stderr</span>=subprocess.STDOUT)<br>output, <span class="hljs-builtin-name">error</span> = command.communicate(input = cer_data)<br><span class="hljs-keyword">if</span> error:<br>p(<span class="hljs-string">&#x27;Error converting from cer to pem: %s&#x27;</span> % error)<br>return output<br><br><br># TODO : Probably should verify these too<br><br>p(<span class="hljs-string">&#x27;Downloading WWDR intermediate certificate...&#x27;</span>)<br>intermediate_cer = urllib2.urlopen(<span class="hljs-string">&#x27;https://developer.apple.com/certificationauthority/AppleWWDRCA.cer&#x27;</span>).read()<br>p(<span class="hljs-string">&#x27; converting to pem...&#x27;</span>)<br>intermediate_pem = cer_to_pem(intermediate_cer)<br>p(<span class="hljs-string">&#x27;OK\n&#x27;</span>)<br><br>p(<span class="hljs-string">&#x27;Downloading Apple Root Certificate...&#x27;</span>)<br>root_cer = urllib2.urlopen(<span class="hljs-string">&#x27;http://www.apple.com/appleca/AppleIncRootCertificate.cer&#x27;</span>).read()<br>p(<span class="hljs-string">&#x27; converting to pem...&#x27;</span>)<br>root_pem = cer_to_pem(root_cer)<br>p(<span class="hljs-string">&#x27;OK\n&#x27;</span>)<br><br>mdm_pem = cer_to_pem(mdm_cert_file)<br><br>p(<span class="hljs-string">&#x27;Finishing...&#x27;</span>)<br>plist_dict = dict(<br>    PushCertRequestCSR = csr_b64,<br>    PushCertCertificateChain = mdm_pem + intermediate_pem + root_pem,<br>    PushCertSignature = signature<br>)<br>plist_xml = writePlistToString(plist_dict)<br>plist_b64 = b64encode(plist_xml)<br><br>output_filename =  cli_args[<span class="hljs-string">&#x27;out&#x27;</span>] <span class="hljs-keyword">if</span>  cli_args[<span class="hljs-string">&#x27;out&#x27;</span>] <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;plist_encoded&#x27;</span><br>write_path = os.path.join(os.getcwd(), output_filename)<br>output = open(write_path, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>output.write(plist_b64)<br>output.close()<br>p(<span class="hljs-string">&#x27;DONE\n\nGo upload file \&#x27;</span>%s\<span class="hljs-string">&#x27; to identity.apple.com/pushcert !\n&#x27;</span> % output_filename)<br><br><br><br><span class="hljs-keyword">if</span> <span class="hljs-attribute">__name__</span>==&quot;__main__&quot;:<br>mdm_vendor_sign()<br></code></pre></td></tr></table></figure><h3 id="创建或更新MDM证书"><a href="#创建或更新MDM证书" class="headerlink" title="创建或更新MDM证书"></a>创建或更新MDM证书</h3><p><a href="https://identity.apple.com/pushcert/">iOS Push CERT</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>MDM Vendor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="/2016/06/15/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2016/06/15/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_hexo0.png"></p><span id="more"></span><h3 id="零"><a href="#零" class="headerlink" title="零"></a>零</h3><p>为什么要写博客？备忘，提供持续学习动力，提高语言组织能力（<a href="https://zhuanlan.zhihu.com/p/19743861?columnSlug=cnfeat">为什么你要写博客</a>）。为什么要搭建独立博客？为了获取更大的自由度，不自由，何来独立。同时资料保存在本地，以免丢失。</p><h3 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h3><blockquote><p>mac用户　　　搜索关键词：mac hexo github 博客</p></blockquote><h4 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h4><p><a href="http://www.jianshu.com/p/4eaddcbe4d12">5分钟 搭建免费个人博客</a></p><h4 id="申请个性域名来搭建"><a href="#申请个性域名来搭建" class="headerlink" title="申请个性域名来搭建"></a>申请个性域名来搭建</h4><p><a href="http://www.jianshu.com/p/99665608d295">如何在一天之内搭建以你自己名字为域名且具备cool属性的个人博客</a></p><blockquote><p>windows用户　　　搜索关键词：windows hexo github 博客</p></blockquote><p><a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html">史上最详细“截图”搭建Hexo博客并部署到Github</a></p><p><a href="http://opiece.me/2015/04/09/hexo-guide/">使用Hexo搭建个人博客(基于hexo3.0)</a></p><p><a href="http://www.jianshu.com/p/141abf1700da">如何搭建一个独立博客</a></p><blockquote><p>所有用户　　　搜索关键词：hexo baidu google</p></blockquote><h4 id="hexo提交搜索引擎（百度-谷歌）"><a href="#hexo提交搜索引擎（百度-谷歌）" class="headerlink" title="hexo提交搜索引擎（百度+谷歌）"></a>hexo提交搜索引擎（百度+谷歌）</h4><p><a href="http://www.jianshu.com/p/619dab2d3c08">hexo提交搜索引擎（百度+谷歌）</a></p><h4 id="将hexo博客同时托管到github和coding（可选）"><a href="#将hexo博客同时托管到github和coding（可选）" class="headerlink" title="将hexo博客同时托管到github和coding（可选）"></a>将hexo博客同时托管到github和coding（可选）</h4><p><a href="http://www.jianshu.com/p/7ad9d3cd4d6e">将hexo博客同时托管到github和coding</a></p><h4 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h4><p>关于域名：在阿里云上购买的，快捷方便。关于写作：windows上用的是Markdownpad，Mac上用的是Macdown。图片上传到七牛云，通过外链放在文章里，这样加载快点，也减轻github空间负担。</p><h4 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h4><ol><li>每次hexo d -g，更新博客内容后都无法通过域名访问：在source目录下创建一个CNAME，在CNAME里面添加域名，这样每次更新博客会将域名绑定一起更新</li><li>在百度搜索(site:yourblog)搜不到自己的博客：百度比较慢，可以去站长平台手动提交，多提交几次</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发_7_UITextField</title>
    <link href="/2015/12/03/iOS%E5%BC%80%E5%8F%91-7-UITextField/"/>
    <url>/2015/12/03/iOS%E5%BC%80%E5%8F%91-7-UITextField/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_iOS7.png"></p><span id="more"></span><h3 id="UIResponder"><a href="#UIResponder" class="headerlink" title="UIResponder"></a>UIResponder</h3><p>UIResponder是UIkit框架中的一个抽象类，其定义了一系列方法，用于接收和处理用户事件，例如触摸事件、运动事件（摇晃设备）和功能控制事件（编辑文本或播放音乐）等。UIResponder的子类会覆盖这些方法。</p><p>UIWindow有一个firstResponder属性指向第一响应者。例如，当用户点击UITextField对象时，UITextfield对象就会成为第一响应者。UIWindow会将firstResponder指向该对象，之后，如果应用接收到运动事件和功能控制事件，都会发送给UITextField对象。</p><p>当某个UITextField对象或者UITextView对象成为第一响应者时，屏幕会弹出键盘。除了用户点击外，还可以在代码中向UITextField对象发送becomeFirstResponser消息，使其成为第一响应者。如果要关闭键盘，则可以向UITextField对象发送resignFirstResponder消息。</p><h3 id="设置UITextField的键盘"><a href="#设置UITextField的键盘" class="headerlink" title="设置UITextField的键盘"></a>设置UITextField的键盘</h3><h4 id="UITextField的几个属性"><a href="#UITextField的几个属性" class="headerlink" title="UITextField的几个属性"></a>UITextField的几个属性</h4><ul><li><p>autocapitalizationType：设置UITextField对象的自动大写功能，包括none、words（单词）、sentence、allcharacter（所有字母）</p></li><li><p>autocorrectionType：启用/禁用（设置为YES/NO，下同）UITextField对象的拼写建议功能</p></li><li><p>enablesReturnKeyAutomatically：启用/禁用UITextField对象的换行键自动检测功能，如果将该属性设置为YES，UITextField对象会自动检测用户输入，并根据是否输入文字启用/禁用换行键</p></li><li><p>keyboardType：设置UITextField对象弹出键盘类型，例如ASCII Capble（ASCII标准键盘）、E-Mail Address（电子邮件地址）、Number pad（数字键盘）和URL（网址）</p></li><li><p>secureTextEntry：启用/禁用UITextField对象的安全输入功能，如果将该属性设置为YES、UITextField对象会以原点代替用户输入的文字，常见于密码输入框</p></li></ul><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>UITextField对象具有一个委托属性，通过UITextField对象设置委托，UiTextField对象会在发生事件时向委托发送相应的消息，由委托处理该事件。</p><p>对于编辑UiTextField对象文本内容的事件，有以下两个对应的委托方法：</p><p>-(void) textFieldDidEndEditing: (UITextField *) textField;</p><p>-(void) textFieldDidBeginEditing: (UITextField *) textField;</p><p>还有带返回值的委托方法，用于从委托中查询需要的信息</p><p>-(void) textFieldShouldEndEditing: (UITextField *) textField;</p><p>-(void) textFieldShouldBeginEditing: (UITextField *) textField;</p><p>-(void) textFieldShouldClear: (UITextField *) textField;</p><p>-(void) textFieldShouldReturn: (UITextField *) textField;</p><p>注意，在委托方法中，通常应该将对象自身作为第一个参数。</p><p>多个对象可能具有相同的委托，当委托收到消息时，需要根据该参数判断发送给该消息的对象。例如，某个控制器中包含多个UITextField对象，他们的委托都是该控制器，那么控制器要根据TextField参数获取相应的UITextField对象并执行不同操作。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>凡是支持委托的对象，其背后都有一个相应的协议，声明可以向该对象的委托对象发送的消息。被委托对象需要根据这个协议为其“感兴趣”的事件实现相应的方法。如果一个类实现了某个协议中规定的方法，称这个类遵守协议。</p><p>UITextField的协议：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@protocol</span> UITextFieldDelegate &lt;NSObject&gt;<br><br><span class="hljs-variable">@optional</span><br><br>- (BOOL)<span class="hljs-attribute">textFieldShouldBeginEditing</span>:(UITextField *)textField;        <span class="hljs-comment">// return NO to disallow editing.</span><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">textFieldDidBeginEditing</span>:(UITextField *)<span class="hljs-selector-tag">textField</span>;           <span class="hljs-comment">// became first responder</span><br><span class="hljs-selector-tag">-</span> (BOOL)<span class="hljs-selector-tag">textFieldShouldEndEditing</span>:(UITextField *)<span class="hljs-selector-tag">textField</span>;          <span class="hljs-comment">// return YES to allow editing to stop and to resign first responder status. NO to disallow the editing session to end</span><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">textFieldDidEndEditing</span>:(UITextField *)<span class="hljs-selector-tag">textField</span>;             <span class="hljs-comment">// may be called if forced even if shouldEndEditing returns NO (e.g. view removed from window) or endEditing:YES called</span><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">textFieldDidEndEditing</span>:(UITextField *)<span class="hljs-selector-tag">textField</span> <span class="hljs-selector-tag">reason</span>:(UITextFieldDidEndEditingReason)<span class="hljs-selector-tag">reason</span> <span class="hljs-selector-tag">NS_AVAILABLE_IOS</span>(<span class="hljs-number">10</span>_0); <span class="hljs-comment">// if implemented, called in place of textFieldDidEndEditing:</span><br><br><span class="hljs-selector-tag">-</span> (BOOL)<span class="hljs-selector-tag">textField</span>:(UITextField *)<span class="hljs-selector-tag">textField</span> <span class="hljs-selector-tag">shouldChangeCharactersInRange</span>:(NSRange)<span class="hljs-selector-tag">range</span> <span class="hljs-selector-tag">replacementString</span>:(NSString *)<span class="hljs-selector-tag">string</span>;   <span class="hljs-comment">// return NO to not change text</span><br><br><span class="hljs-selector-tag">-</span> (BOOL)<span class="hljs-selector-tag">textFieldShouldClear</span>:(UITextField *)<span class="hljs-selector-tag">textField</span>;               <span class="hljs-comment">// called when clear button pressed. return NO to ignore (no notifications)</span><br><span class="hljs-selector-tag">-</span> (BOOL)<span class="hljs-selector-tag">textFieldShouldReturn</span>:(UITextField *)<span class="hljs-selector-tag">textField</span>;              <span class="hljs-comment">// called when &#x27;return&#x27; key pressed. return NO to ignore.</span><br><br>@<span class="hljs-selector-tag">end</span><br></code></pre></td></tr></table></figure><p>发送方在发送可选方法前，会先向其委托发送另一个名为respondsToSelector：方法。</p><p>所有objective-c对象都从NSObject继承了respondToSelector：方法，该方法能在运行时检查对象是否实现了指定的方法。</p><p>@selector()指令可以将选择器(selector)转换成数值，以便将其作为参数进行传递。</p><p>例如，UITextField可以实现如下方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)clearButtonTapped<br>&#123;<br><span class="hljs-comment">//textFieldshouldClear:是可选方法，需要检查委托是否实现了该方法</span><br>SEL clearAelector = <span class="hljs-keyword">@selector</span>(textFieldShouldClear);<br><span class="hljs-keyword">if</span>([<span class="hljs-keyword">self</span>.delegate respondsToSelector:clearSelector])&#123;<br><span class="hljs-keyword">if</span>([<span class="hljs-keyword">self</span>.delegate textFieldShouldClear:<span class="hljs-keyword">self</span>])&#123;<br><span class="hljs-keyword">self</span>.text = <span class="hljs-string">@&quot;&quot;</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>iOS SDK很多类都具有委托，几乎所有的委托都是弱引用（weak）；这是为了避免对象及其委托之间产生强引用循环。</p><h3 id="向屏幕中添加UILabel对象"><a href="#向屏幕中添加UILabel对象" class="headerlink" title="向屏幕中添加UILabel对象"></a>向屏幕中添加UILabel对象</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)drawHypnoticMessage:(<span class="hljs-built_in">NSString</span> *)message<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>        <span class="hljs-built_in">UILabel</span> *messageLabel = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br><br>        <span class="hljs-comment">// Configure the label&#x27;s colors and text</span><br>        messageLabel.backgroundColor = [<span class="hljs-built_in">UIColor</span> clearColor];<br>        messageLabel.textColor = [<span class="hljs-built_in">UIColor</span> whiteColor];<br>        messageLabel.text = message;<br><br>        <span class="hljs-comment">// This method resizes the label, which will be relative</span><br>        <span class="hljs-comment">// to the text that it is displaying</span><br>        [messageLabel sizeToFit];<br><br>        <span class="hljs-comment">// Get a random x value that fits within the hypnosis view&#x27;s width</span><br>        <span class="hljs-keyword">int</span> width = <span class="hljs-keyword">self</span>.view.bounds.size.width - messageLabel.bounds.size.width;<br>        <span class="hljs-keyword">int</span> x = arc4random_uniform(width);<br><br>        <span class="hljs-comment">// Get a random y value that fits within the hypnosis view&#x27;s height</span><br>        <span class="hljs-keyword">int</span> height = <span class="hljs-keyword">self</span>.view.bounds.size.height - messageLabel.bounds.size.height;<br>        <span class="hljs-keyword">int</span> y = arc4random_uniform(height);<br><br>        <span class="hljs-comment">// Update the label&#x27;s frame</span><br>        <span class="hljs-built_in">CGRect</span> frame = messageLabel.frame;<br>        frame.origin = <span class="hljs-built_in">CGPointMake</span>(x, y);<br>        messageLabel.frame = frame;<br><br>        <span class="hljs-comment">// Add the label to the hierarchy</span><br>        [<span class="hljs-keyword">self</span>.view addSubview:messageLabel];<br>        <span class="hljs-comment">//添加视差效果</span><br>        <span class="hljs-built_in">UIInterpolatingMotionEffect</span> *motionEffect;<br>        motionEffect = [[<span class="hljs-built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="hljs-string">@&quot;center.x&quot;</span><br>                                                                       type:<span class="hljs-built_in">UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis</span>];<br>        motionEffect.minimumRelativeValue = @<span class="hljs-number">-25</span>;<br>        motionEffect.maximumRelativeValue = @<span class="hljs-number">25</span>;<br>        [messageLabel addMotionEffect:motionEffect];<br><br>        motionEffect = [[<span class="hljs-built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="hljs-string">@&quot;center.y&quot;</span><br>                                                                       type:<span class="hljs-built_in">UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis</span>];<br>        motionEffect.minimumRelativeValue = @<span class="hljs-number">-25</span>;<br>        motionEffect.maximumRelativeValue = @<span class="hljs-number">25</span>;<br>        [messageLabel addMotionEffect:motionEffect];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>附：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//  BNRHypnosisViewController.m</span><br><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;BNRHypnosisViewController.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;BNRHypnosisView.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">BNRHypnosisViewController</span> () &lt;<span class="hljs-title">UITextFieldDelegate</span>&gt;</span><br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">BNRHypnosisViewController</span></span><br><br>- (<span class="hljs-keyword">id</span>)initWithNibName:(<span class="hljs-built_in">NSString</span> *)nibNameOrNil bundle:(<span class="hljs-built_in">NSBundle</span> *)nibBundleOrNil<br>&#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br><br>        <span class="hljs-comment">// Set the tab bar item&#x27;s title</span><br>        <span class="hljs-keyword">self</span>.tabBarItem.title = <span class="hljs-string">@&quot;Hypnotize&quot;</span>;<br><br>        <span class="hljs-comment">// Create a UIImage from a file</span><br>        <span class="hljs-comment">// This will use Hypno@2x on retina display devices</span><br>        <span class="hljs-built_in">UIImage</span> *image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;Hypno.png&quot;</span>];<br><br>        <span class="hljs-comment">// Put that image on the tab bar item</span><br>        <span class="hljs-keyword">self</span>.tabBarItem.image = image;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)loadView<br>&#123;<br>    <span class="hljs-comment">// Create a view</span><br>    <span class="hljs-built_in">CGRect</span> frame = [<span class="hljs-built_in">UIScreen</span> mainScreen].bounds;<br>    BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] initWithFrame:frame];<br><br>    <span class="hljs-built_in">CGRect</span> textFieldRect = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">40</span>, <span class="hljs-number">70</span>, <span class="hljs-number">240</span>, <span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">UITextField</span> *textField = [[<span class="hljs-built_in">UITextField</span> alloc] initWithFrame:textFieldRect];<br><br>    <span class="hljs-comment">// Setting the border style on the text field will allow us to see it easier</span><br>    textField.borderStyle = <span class="hljs-built_in">UITextBorderStyleRoundedRect</span>;<br>    textField.placeholder = <span class="hljs-string">@&quot;Hypnotize me&quot;</span>;<br>    textField.returnKeyType = <span class="hljs-built_in">UIReturnKeyDone</span>;<br>    [backgroundView addSubview:textField];<br><br>    textField.delegate = <span class="hljs-keyword">self</span>;<br><br>    <span class="hljs-comment">// Set it as *the* view of this view controller</span><br>    <span class="hljs-keyword">self</span>.view = backgroundView;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad<br>&#123;<br>    <span class="hljs-comment">// Always call the super implementation of viewDidLoad</span><br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;BNRHypnosisViewController loaded its view&quot;</span>);<br>&#125;<br><br>- (<span class="hljs-built_in">BOOL</span>)textFieldShouldReturn:(<span class="hljs-built_in">UITextField</span> *)textField<br>&#123;<br>    [<span class="hljs-keyword">self</span> drawHypnoticMessage:textField.text];<br><br>    textField.text = <span class="hljs-string">@&quot;&quot;</span>;<br>    [textField resignFirstResponder];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)drawHypnoticMessage:(<span class="hljs-built_in">NSString</span> *)message<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>        <span class="hljs-built_in">UILabel</span> *messageLabel = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br><br>        <span class="hljs-comment">// Configure the label&#x27;s colors and text</span><br>        messageLabel.backgroundColor = [<span class="hljs-built_in">UIColor</span> clearColor];<br>        messageLabel.textColor = [<span class="hljs-built_in">UIColor</span> whiteColor];<br>        messageLabel.text = message;<br><br>        <span class="hljs-comment">// This method resizes the label, which will be relative</span><br>        <span class="hljs-comment">// to the text that it is displaying</span><br>        [messageLabel sizeToFit];<br><br>        <span class="hljs-comment">// Get a random x value that fits within the hypnosis view&#x27;s width</span><br>        <span class="hljs-keyword">int</span> width = <span class="hljs-keyword">self</span>.view.bounds.size.width - messageLabel.bounds.size.width;<br>        <span class="hljs-keyword">int</span> x = arc4random_uniform(width);<br><br>        <span class="hljs-comment">// Get a random y value that fits within the hypnosis view&#x27;s height</span><br>        <span class="hljs-keyword">int</span> height = <span class="hljs-keyword">self</span>.view.bounds.size.height - messageLabel.bounds.size.height;<br>        <span class="hljs-keyword">int</span> y = arc4random_uniform(height);<br><br>        <span class="hljs-comment">// Update the label&#x27;s frame</span><br>        <span class="hljs-built_in">CGRect</span> frame = messageLabel.frame;<br>        frame.origin = <span class="hljs-built_in">CGPointMake</span>(x, y);<br>        messageLabel.frame = frame;<br><br>        <span class="hljs-comment">// Add the label to the hierarchy</span><br>        [<span class="hljs-keyword">self</span>.view addSubview:messageLabel];<br><br>        <span class="hljs-built_in">UIInterpolatingMotionEffect</span> *motionEffect;<br>        motionEffect = [[<span class="hljs-built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="hljs-string">@&quot;center.x&quot;</span><br>                                                                       type:<span class="hljs-built_in">UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis</span>];<br>        motionEffect.minimumRelativeValue = @<span class="hljs-number">-25</span>;<br>        motionEffect.maximumRelativeValue = @<span class="hljs-number">25</span>;<br>        [messageLabel addMotionEffect:motionEffect];<br><br>        motionEffect = [[<span class="hljs-built_in">UIInterpolatingMotionEffect</span> alloc] initWithKeyPath:<span class="hljs-string">@&quot;center.y&quot;</span><br>                                                                       type:<span class="hljs-built_in">UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis</span>];<br>        motionEffect.minimumRelativeValue = @<span class="hljs-number">-25</span>;<br>        motionEffect.maximumRelativeValue = @<span class="hljs-number">25</span>;<br>        [messageLabel addMotionEffect:motionEffect];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TabBar中添加UInavigation</title>
    <link href="/2015/11/30/iOS%E9%82%A3%E4%BA%9B%E5%9D%91-1-tabBar/"/>
    <url>/2015/11/30/iOS%E9%82%A3%E4%BA%9B%E5%9D%91-1-tabBar/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_iOS_nav0.png"></p><span id="more"></span><p>上图是UInavigation view的层次结构。在有tab bar的情况下，给UITabbarController 指定viewcontrollers属性的时候，将需要展示的视图控制器用UINavigationController封装。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">BNRHypnosisViewController *hvc = <span class="hljs-comment">[<span class="hljs-comment">[BNRHypnosisViewController alloc]</span> init]</span>;<br>BNRReminderViewController *hvc = <span class="hljs-comment">[<span class="hljs-comment">[BNRReminderViewController alloc]</span> init]</span>;<br><br>UITabBarController *tabBarController = <span class="hljs-comment">[<span class="hljs-comment">[UITabBarController alloc]</span> init]</span>;<br><br>UINavigationController *navCtl = <span class="hljs-comment">[<span class="hljs-comment">[UINavigationController alloc]</span>initWithRootViewController:hvc]</span>;<br><br>tabBarController.viewControllers = @<span class="hljs-comment">[navCtl, rvc]</span>;<br><br>self.window.rootViewController = tabBarController;<br></code></pre></td></tr></table></figure><p>同时，iOS7之后，由于navigation的存在，视图会被半透明的导航栏遮盖，此时可以在控制器加载试图前用self.edgesForExtendedLayout = UIRectEdgeNone;来将视图边界设为当前屏幕</p><p>最后是效果图：</p><p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_iOS_nav.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发教程(6)--viewController</title>
    <link href="/2015/11/25/iOS%E5%BC%80%E5%8F%91-6-viewCtl/"/>
    <url>/2015/11/25/iOS%E5%BC%80%E5%8F%91-6-viewCtl/</url>
    
    <content type="html"><![CDATA[<blockquote><p>视图控制器（viewcontroller）是UIViewController类或其子类的对象。每个视图控制器都负责管理一个视图结构，包括创建视图层次结构中的视图并处理相关用户事件，以及将整个视图层次结构添加到应用窗口。</p></blockquote><span id="more"></span><p>创建一个UITabBarController在两个视图层次结构之间(Hypnotize和Reminder)切换，Riminder包含两个子视图，一个UIDatePicker对象和一个UIbutton对象。</p><p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_ios6.png" alt="Hypnotize"></p><p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_ios6-2.png" alt="Riminder"></p><p>视图控制器不会在其被创建出来的那一刻马上创建并载入相应的视图。只有当应用需要将某个视图控制器的视图显示到屏幕上时，相应的控制器才会创建其视图。这种延迟加载（lazy loading）视图的做法能提高内存使用效率。<br>视图控制器可以通过两种方式创建视图层次结构：</p><p>代码方式：覆盖UIViewcontroller中的loadView方法<br>NIB文件方式：使用interface Builder创建一个NIB文件，然后加入所需的视图层次结构，最后视图控制器会在运行时加载由该NIB文件编译而成的XIB文件（应用在运行时，会按需载入XIB文件并激活文件中的视图）。</p><h3 id="1-创建Hypnotize视图"><a href="#1-创建Hypnotize视图" class="headerlink" title="1. 创建Hypnotize视图"></a>1. 创建Hypnotize视图</h3><h4 id="1-1-代码方式创建视图"><a href="#1-1-代码方式创建视图" class="headerlink" title="1.1 代码方式创建视图"></a>1.1 代码方式创建视图</h4><p>BNRHypnosisViewController.m文件</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">BNRHypnosisViewController</span></span><br><br>- (<span class="hljs-keyword">id</span>)initWithNibName:(<span class="hljs-built_in">NSString</span> *)nibNameOrNil bundle:(<span class="hljs-built_in">NSBundle</span> *)nibBundleOrNil<br>&#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br><br>        <span class="hljs-comment">// Set the tab bar item&#x27;s title</span><br>        <span class="hljs-keyword">self</span>.tabBarItem.title = <span class="hljs-string">@&quot;Hypnotize&quot;</span>;<br><br>        <span class="hljs-comment">// Create a UIImage from a file</span><br>        <span class="hljs-comment">// This will use Hypno@2x on retina display devices</span><br>        <span class="hljs-built_in">UIImage</span> *image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;Hypno.png&quot;</span>];<br><br>        <span class="hljs-comment">// Put that image on the tab bar item</span><br>        <span class="hljs-keyword">self</span>.tabBarItem.image = image;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)loadView<br>&#123;<br>    <span class="hljs-comment">// Create a view</span><br>    <span class="hljs-built_in">CGRect</span> frame = [<span class="hljs-built_in">UIScreen</span> mainScreen].bounds;<br>    BNRHypnosisView *backgroundView = [[BNRHypnosisView alloc] initWithFrame:frame];<br><br>    <span class="hljs-comment">// Set it as *the* view of this view controller</span><br>    <span class="hljs-keyword">self</span>.view = backgroundView;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad<br>&#123;<br>    <span class="hljs-comment">// Always call the super implementation of viewDidLoad</span><br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;BNRHypnosisViewController loaded its view&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h4 id="1-2-设置根视图控制器"><a href="#1-2-设置根视图控制器" class="headerlink" title="1.2 设置根视图控制器"></a>1.2 设置根视图控制器</h4><p>为了将视图控制器的视图层次结构加入应用窗口，UIWindow对象提供了一个方法：setRootViewController：。当程序将某个视图控制器设置为UIWindow对象的rootViewController时，UIWindow对象会将该视图控制器的view作为子视图加入窗口，并且还会自动调整view的大小，将其设置为与窗口的大小相同。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">BNRAppDelegate</span></span><br><br>- (<span class="hljs-built_in">BOOL</span>)application:(<span class="hljs-built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="hljs-built_in">NSDictionary</span> *)launchOptions<br>&#123;<br>    <span class="hljs-keyword">self</span>.window = [[<span class="hljs-built_in">UIWindow</span> alloc] initWithFrame:[[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds]];<br>    <span class="hljs-comment">// Override point for customization after application launch.</span><br><br><br>    BNRHypnosisViewController *hvc = [[BNRHypnosisViewController alloc] init];<br><br>    <span class="hljs-comment">// Look in the appBundle for the file BNRReminderViewController.xib</span><br>    BNRReminderViewController *rvc = [[BNRReminderViewController alloc] init];<br><br>    <span class="hljs-built_in">UITabBarController</span> *tabBarController = [[<span class="hljs-built_in">UITabBarController</span> alloc] init];<br>    tabBarController.viewControllers = @[hvc, rvc];<br><br>    <span class="hljs-keyword">self</span>.window.rootViewController = tabBarController;<br><br>    <span class="hljs-keyword">self</span>.window.backgroundColor = [<span class="hljs-built_in">UIColor</span> whiteColor];<br>    [<span class="hljs-keyword">self</span>.window makeKeyAndVisible];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>rootViewController的view在应用启动完毕后就显示，因此，UIWindow对象会在设置完rootViewController后立即加载其view。</p><p>以下是setRootViewController：的实现：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">-(<span class="hljs-keyword">void</span>)setRootViewController:(<span class="hljs-built_in">UIViewController</span> *)viewController<br>&#123;<br><span class="hljs-comment">//获取根视图控制器的视图</span><br><span class="hljs-built_in">UIView</span> *rootView = viewController.view;<br><br><span class="hljs-comment">//根据UIWindow对象的bounds，为视图创建相应的frame</span><br><span class="hljs-built_in">CGRect</span> viewFrame = <span class="hljs-keyword">self</span>.bounds;<br>rootView.frame = viewFrame;<br><br><span class="hljs-comment">//将视图作为子视图加入UIWindow对象</span><br>[<span class="hljs-keyword">self</span> addSubview:rootView];<br><br><span class="hljs-comment">//将viewController赋给实例变量_rootViewController</span><br>_rootViewController = viewController;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-创建Reminder视图"><a href="#2-创建Reminder视图" class="headerlink" title="2. 创建Reminder视图"></a>2. 创建Reminder视图</h3><p>因为BNRReminderViewController包含两个子视图UIdatePicker和UIbutton，因此需要添加一个dataPicker属性，指向一个UIDatePicker对象。同时，将BNRViewController设置为UIButton对象的目标，还需编写一个addReminder：方法，并设置为UIButton对象的动作。<br>BNRReminderViewController对象的view有两个子视图，当某个视图控制器的view拥有子视图时，使用interface Builder创建视图层次会较方便。</p><h4 id="2-1-Interface-Builder中创建视图"><a href="#2-1-Interface-Builder中创建视图" class="headerlink" title="2.1 Interface Builder中创建视图"></a>2.1 Interface Builder中创建视图</h4><p>创建一个xib文件，在File菜单选择new-file…，选择User interface，再选中Empty。</p><h5 id="2-1-1-创建视图对象"><a href="#2-1-1-创建视图对象" class="headerlink" title="2.1.1 创建视图对象"></a>2.1.1 创建视图对象</h5><p>从xcode右下方对象库拖拽UIview，UIbutton，UIdatePicker至画布。</p><h5 id="2-1-2-加载nib文件"><a href="#2-1-2-加载nib文件" class="headerlink" title="2.1.2 加载nib文件"></a>2.1.2 加载nib文件</h5><p>当视图控制器从NIB文件中创建试图层次结构时，不需要覆盖loadview方法，默认的loadview会自动处理NIB文件包含的视图层次结构。<br>接下来，用以下方法为reminder加载NIB文件</p><p>-(id)initWithNibName:(NSString )nibNameOrNil bundle:(NSBundle )nibBundleOrNil</p><p>上述方法两个参数，分别用于指定NIB文件的文件名及其所在的程序包</p><h5 id="2-1-3-关联Files‘s-Owner"><a href="#2-1-3-关联Files‘s-Owner" class="headerlink" title="2.1.3 关联Files‘s Owner"></a>2.1.3 关联Files‘s Owner</h5><p>Files’s owner对象是一个占位符对象（placeholder），它是XIB文件特意留下的一个“空洞”。当某个视图控制器将XIB文件加载为NIB文件时，首先会创建XIB文件中所有的视图对象，然后会将自己填入相应的File‘s Owner空洞，并建立之前在Interface Builder中设置的关联。<br>因此，如果要在运行时关联加载NIB文件的对象，可在XIB文件中关联File’s Owner。首先，需要设置BNRReminderViewController.xib文件中的File‘s Owner是BNRReminderViewController。<br>接着，在XIB文件中添加所需关联：1，Ctrl+左键点击File‘s owner，在插座变量outlet部分找到view，鼠标连线至右侧视图控制器的View属性；2，同理关联datepicker；3，将UIbutton关联到File’s owner的addReminder方法。</p><p>BNRReminderViewController.m完整代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;BNRReminderViewController.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">BNRReminderViewController</span> ()</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>) <span class="hljs-keyword">IBOutlet</span> <span class="hljs-built_in">UIDatePicker</span> *datePicker;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">BNRReminderViewController</span></span><br><br>- (<span class="hljs-keyword">id</span>)initWithNibName:(<span class="hljs-built_in">NSString</span> *)nibNameOrNil bundle:(<span class="hljs-built_in">NSBundle</span> *)nibBundleOrNil<br>&#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-comment">// Set the tab bar item&#x27;s title</span><br>        <span class="hljs-keyword">self</span>.tabBarItem.title = <span class="hljs-string">@&quot;Reminder&quot;</span>;<br>    <br>        <span class="hljs-comment">// Create a UIImage from a file</span><br>        <span class="hljs-comment">// This will use Time@2x.png on retina display devices</span><br>        <span class="hljs-built_in">UIImage</span> *image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-string">@&quot;Time.png&quot;</span>];<br><br>        <span class="hljs-comment">// Put that image on the tab bar item</span><br>        <span class="hljs-keyword">self</span>.tabBarItem.image = image;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad<br>&#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;BNRReminderViewController loaded its view&quot;</span>);<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewWillAppear:(<span class="hljs-built_in">BOOL</span>)animated<br>&#123;<br>    [<span class="hljs-keyword">super</span> viewWillAppear:animated];<br><br>    <span class="hljs-keyword">self</span>.datePicker.minimumDate = [<span class="hljs-built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="hljs-number">60</span>];<br>&#125;<br><br>- (<span class="hljs-keyword">IBAction</span>)addReminder:(<span class="hljs-keyword">id</span>)sender<br>&#123;<br>    <span class="hljs-built_in">NSDate</span> *date = <span class="hljs-keyword">self</span>.datePicker.date;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Setting a reminder for %@&quot;</span>, date);<br><br>    <span class="hljs-built_in">UILocalNotification</span> *note = [[<span class="hljs-built_in">UILocalNotification</span> alloc] init];<br>    note.alertBody = <span class="hljs-string">@&quot;Hypnotize me!&quot;</span>;<br>    note.fireDate = date;<br><br>    [[<span class="hljs-built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:note];<br>&#125;<br></code></pre></td></tr></table></figure><p>在BNRAppdelegate.m中，创建一个BNRReminderViewCOntroller对象，再将其设置为应用程序</p><h3 id="3-UITabBarController"><a href="#3-UITabBarController" class="headerlink" title="3. UITabBarController"></a>3. UITabBarController</h3><p>UITabBarController对象可以保存一组视图控制器，此外UITabBarController还会在底部显示一个标签栏（tab bar），标签栏会有多个标签项（tab item）</p><h4 id="3-1-设置标签项"><a href="#3-1-设置标签项" class="headerlink" title="3.1 设置标签项"></a>3.1 设置标签项</h4><p>设置tabbaritem的title以及image属性</p><h3 id="4-视图控制器初始化方法"><a href="#4-视图控制器初始化方法" class="headerlink" title="4. 视图控制器初始化方法"></a>4. 视图控制器初始化方法</h3><p>当UIViewController子类和该子类需要加载的NIB文件同名时，即使用在appdelegate调用init初始化，传给vieController两个参数为nil，也能正常调用以下初始化，并正确加载</p><p>-(id)initWithNibName:(NSString )nibNameOrNil bundle:(NSBundle )nibBundleOrNil</p><h3 id="5-添加本地通知"><a href="#5-添加本地通知" class="headerlink" title="5. 添加本地通知"></a>5. 添加本地通知</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">IBAction</span>)addReminder:(<span class="hljs-keyword">id</span>)sender<br>&#123;<br>    <span class="hljs-built_in">NSDate</span> *date = <span class="hljs-keyword">self</span>.datePicker.date;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Setting a reminder for %@&quot;</span>, date);<br><br>    <span class="hljs-built_in">UILocalNotification</span> *note = [[<span class="hljs-built_in">UILocalNotification</span> alloc] init];<br>    note.alertBody = <span class="hljs-string">@&quot;Hypnotize me!&quot;</span>;<br>    note.fireDate = date;<br><br>    [[<span class="hljs-built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:note];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-加载和显示视图"><a href="#6-加载和显示视图" class="headerlink" title="6. 加载和显示视图"></a>6. 加载和显示视图</h3><p>为了实现延迟加载，在initWithNibName:bundle 中不应访问view或view的任何子视图，凡是和view或view子视图有关的初始化代码，都放在 viewDidLoad中，避免加载时加载不需要在屏幕上显示的视图。</p><h3 id="7-访问视图"><a href="#7-访问视图" class="headerlink" title="7. 访问视图"></a>7. 访问视图</h3><p>alloc【创建对象，分配空间】—&gt;init (initWithNibName)【初始化对象，初始化数据】—&gt; loadView【从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图】—&gt; viewDidLoad—&gt; viewWillAppear—&gt;viewDidAppear—&gt; viewWillDisappear—&gt; viewDidDisappear—&gt; dealloc</p><p>内存不足时，调用viewDidUnload函数释放views—-&gt;当需要使用view时，又回到loadview如此循环</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>objective-c -- property</title>
    <link href="/2015/10/28/OC-property/"/>
    <url>/2015/10/28/OC-property/</url>
    
    <content type="html"><![CDATA[<blockquote><p>@property、objective-c </p></blockquote><span id="more"></span><h4 id="1、”-”语法可能调setter，也可能调getter"><a href="#1、”-”语法可能调setter，也可能调getter" class="headerlink" title="1、”.”语法可能调setter，也可能调getter"></a>1、”.”语法可能调setter，也可能调getter</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">xx.a=<span class="hljs-number">1</span>  <br><span class="hljs-constructor">NSlog(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-params">xx</span>.<span class="hljs-params">a</span>)</span><br></code></pre></td></tr></table></figure><h4 id="2、可改变存取器的名字"><a href="#2、可改变存取器的名字" class="headerlink" title="2、可改变存取器的名字"></a>2、可改变存取器的名字</h4><p>getter= 让getter方法使用自定义的名字</p><p>setter = 让setter方法使用自定义名字</p><p><code>@property(getter=isRunning) BOOL running</code></p><p>使用方法：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Car *honda = <span class="hljs-literal">[[C<span class="hljs-identifier">ar</span> <span class="hljs-identifier">alloc</span>]</span> init];<br>honda.running = YES;<br><span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-params">honda</span>.<span class="hljs-params">running</span>)</span>;<br><span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;%d&quot;</span>,[<span class="hljs-params">honda</span> <span class="hljs-params">isRunning</span>])</span>;<br></code></pre></td></tr></table></figure><h4 id="3、readonly不合成setter方法"><a href="#3、readonly不合成setter方法" class="headerlink" title="3、readonly不合成setter方法"></a>3、readonly不合成setter方法</h4><h4 id="4、nonatomic属性"><a href="#4、nonatomic属性" class="headerlink" title="4、nonatomic属性"></a>4、nonatomic属性</h4><p>原子性（Atomicity）的作用是属性在多线程的环境中怎么行为。当你不仅仅有一个线程， 那么getter和setter可能会在同一时间去调用，这就意味着getter/setter可能会被另一个方法打扰，很有可能造成数据错误。</p><p>原子的属性会封锁object，防止这种情况发生，确保get或者set操作的操作对象是完整的。没有被损坏。然而，这仅仅是一个线程安全的方面，我们必须要理解这一点。使用原子性并不能确保我们的代码就是线程安全的</p><h4 id="5、strong属性"><a href="#5、strong属性" class="headerlink" title="5、strong属性"></a>5、strong属性</h4><p>无论对象被指定为什么属性，强壮的属性可以创建拥有关系，这对所有对象属性来说是一种内隐行为，它默认是安全的，因为只要它被指定为strong属性，它就会确保对对象的值存在</p><p>举个例子：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@interface</span> <span class="hljs-attribute">Person </span>: NSObject<br><span class="hljs-variable">@property</span>(nonatomic)NSString *name;<br><span class="hljs-variable">@end</span><br></code></pre></td></tr></table></figure><p>它的实现如下，@property产生的使用的默认存储方法，也重写了NSObject的描述方法，返回一个代表该对象的字符串</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;Person.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Person</span></span><br>-(<span class="hljs-built_in">NSString</span> *)description<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.name;<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>然后，添加Person的属性给Car，改变Car.h：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;Person.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Car</span> : <span class="hljs-title">NSObject</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>) <span class="hljs-built_in">NSString</span> *model;<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">nonatomic</span>,<span class="hljs-keyword">strong</span>) Person *driver; <br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>接着</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix">Person *<span class="hljs-attr">john</span> = [[Person alloc] init];<br>john.<span class="hljs-attr">name</span> = @<span class="hljs-string">&quot;John&quot;</span>;<br> <br>Car *<span class="hljs-attr">honda</span> = [[Car alloc] init];<br>honda.<span class="hljs-attr">model</span> = @<span class="hljs-string">&quot;Honda Civic&quot;</span>;<br>honda.<span class="hljs-attr">driver</span> = john;<br>NSLog(@<span class="hljs-string">&quot;%@ is driving the %@&quot;</span>,honda.driver,honda.model);<br></code></pre></td></tr></table></figure><p><strong>只要driver是一个strong关联，honda对象就会持有john，这确保只要honda需要它，它就会有效</strong></p><p>6、weak 属性</p><p>在属性和指定value之间创建一个不拥有关系，使用这个防止循环引用。</p><p>大多数情况下，强属性可以直观知道你想要什么对象属性，强引用会暴漏一个问题，例如，我们需要从driver引用他正在开的Car对象，首先，我们需要给Person添加一个car属性：</p><p>Person.h</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">@class</span> <span class="hljs-title">Car</span>;</span><br> <br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Person</span> : <span class="hljs-title">NSObject</span></span><br> <br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">nonatomic</span>)<span class="hljs-built_in">NSString</span> *name;<br><span class="hljs-keyword">@property</span>(<span class="hljs-keyword">nonatomic</span>,<span class="hljs-keyword">strong</span>)Car *car;<br> <br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>@class Car 是对Car类的前声明，就像它告诉编译器，“相信我，Car类是存在的，所有不要想着去立刻找到它”。我们不用#import这样做，因为Car也导入了Person.h，那样我们会陷入无尽的导入循环</p><p>然后，添加下面的代码，在honda、driver分配后：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix">Person *<span class="hljs-attr">john</span> = [[Person alloc] init];<br>john.<span class="hljs-attr">name</span> = @<span class="hljs-string">&quot;John&quot;</span>;<br>Car *<span class="hljs-attr">honda</span> = [[Car alloc] init];<br>honda.<span class="hljs-attr">model</span> = @<span class="hljs-string">&quot;Honda Civic&quot;</span>;<br>honda.<span class="hljs-attr">driver</span> = john;<br>john.<span class="hljs-attr">car</span> = honda;  //添加这行<br>NSLog(@<span class="hljs-string">&quot;%@ is driving the %@&quot;</span>,honda.driver,honda.model);<br></code></pre></td></tr></table></figure><p>这样我们现在有一个现象，就是john拥有honda,honda拥有john。这就意味着他们相互拥有，所以尽管他们不再有用，内存管理系统也不能够释放他们。</p><p>这叫做 retain cycle（保持循环），是一种内存泄露的形式，内存泄露是很不好的。幸运的是，要想解决这个办法很简单，只需要告诉其中一个属性维持一个weak属性引用另一个对象。在Person.h中，改变car的声明：</p><p><code>@property(nonatomic,weak)Car *car;</code></p><p>这种weak(弱)属性会给car创建一个非拥有关系。它允许john有一个honda的引用，同时避免了保持循环。但是，还有一个可能性就是honda会被销毁，而这个时候john正在引用honda，如果这种情况发生，weak属性会很方便地设置car为nil，去避免悬挂指针。</p><p>7、 copy属性</p><p>它是strong的替代品，不是保持拥有一个存在的对象，而是创建一个引用，无论你指定什么属性，都会持有这个拥有。只有符合NSCopying protocol的对象才能使用这个属性。</p><p>代表值的属性（相对于链接或关系）是一个使用copy的不错选择。例如，开发者通常复制字符串属性，而不是强引用它们</p><p>strong是引用，copy是复制一份，保存当时的值，无论原对象值如何变化</p>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发教程--学习路线图</title>
    <link href="/2015/08/03/iOS%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <url>/2015/08/03/iOS%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="http://o8z0mw8i6.bkt.clouddn.com/article_ios.png"></p><span id="more"></span><br>![](http://o8z0mw8i6.bkt.clouddn.com/iOS%E8%AF%A6.jpg)]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
